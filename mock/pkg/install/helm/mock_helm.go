// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/install/helm/helm.go

// Package mock_helm is a generated GoMock package.
package mock_helm

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHelmClient is a mock of HelmClient interface
type MockHelmClient struct {
	ctrl     *gomock.Controller
	recorder *MockHelmClientMockRecorder
}

// MockHelmClientMockRecorder is the mock recorder for MockHelmClient
type MockHelmClientMockRecorder struct {
	mock *MockHelmClient
}

// NewMockHelmClient creates a new mock instance
func NewMockHelmClient(ctrl *gomock.Controller) *MockHelmClient {
	mock := &MockHelmClient{ctrl: ctrl}
	mock.recorder = &MockHelmClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelmClient) EXPECT() *MockHelmClientMockRecorder {
	return m.recorder
}

// InstallHelmRelease mocks base method
func (m *MockHelmClient) InstallHelmRelease(ctx context.Context, chartPath, releaseName, installNamespace, overridesYaml string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallHelmRelease", ctx, chartPath, releaseName, installNamespace, overridesYaml)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallHelmRelease indicates an expected call of InstallHelmRelease
func (mr *MockHelmClientMockRecorder) InstallHelmRelease(ctx, chartPath, releaseName, installNamespace, overridesYaml interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallHelmRelease", reflect.TypeOf((*MockHelmClient)(nil).InstallHelmRelease), ctx, chartPath, releaseName, installNamespace, overridesYaml)
}

// UpdateHelmRelease mocks base method
func (m *MockHelmClient) UpdateHelmRelease(ctx context.Context, chartPath, releaseName, overridesYaml string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHelmRelease", ctx, chartPath, releaseName, overridesYaml)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHelmRelease indicates an expected call of UpdateHelmRelease
func (mr *MockHelmClientMockRecorder) UpdateHelmRelease(ctx, chartPath, releaseName, overridesYaml interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHelmRelease", reflect.TypeOf((*MockHelmClient)(nil).UpdateHelmRelease), ctx, chartPath, releaseName, overridesYaml)
}

// DeleteHelmRelease mocks base method
func (m *MockHelmClient) DeleteHelmRelease(ctx context.Context, releaseName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHelmRelease", ctx, releaseName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHelmRelease indicates an expected call of DeleteHelmRelease
func (mr *MockHelmClientMockRecorder) DeleteHelmRelease(ctx, releaseName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHelmRelease", reflect.TypeOf((*MockHelmClient)(nil).DeleteHelmRelease), ctx, releaseName)
}

// HelmReleaseDoesntExist mocks base method
func (m *MockHelmClient) HelmReleaseDoesntExist(releaseName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelmReleaseDoesntExist", releaseName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HelmReleaseDoesntExist indicates an expected call of HelmReleaseDoesntExist
func (mr *MockHelmClientMockRecorder) HelmReleaseDoesntExist(releaseName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelmReleaseDoesntExist", reflect.TypeOf((*MockHelmClient)(nil).HelmReleaseDoesntExist), releaseName)
}
