// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kube/security.go

// Package mock_kube is a generated GoMock package.
package mock_kube

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/api/security/v1"
)

// MockSecurityClient is a mock of SecurityClient interface
type MockSecurityClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityClientMockRecorder
}

// MockSecurityClientMockRecorder is the mock recorder for MockSecurityClient
type MockSecurityClientMockRecorder struct {
	mock *MockSecurityClient
}

// NewMockSecurityClient creates a new mock instance
func NewMockSecurityClient(ctrl *gomock.Controller) *MockSecurityClient {
	mock := &MockSecurityClient{ctrl: ctrl}
	mock.recorder = &MockSecurityClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecurityClient) EXPECT() *MockSecurityClientMockRecorder {
	return m.recorder
}

// GetScc mocks base method
func (m *MockSecurityClient) GetScc(name string) (*v1.SecurityContextConstraints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScc", name)
	ret0, _ := ret[0].(*v1.SecurityContextConstraints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScc indicates an expected call of GetScc
func (mr *MockSecurityClientMockRecorder) GetScc(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScc", reflect.TypeOf((*MockSecurityClient)(nil).GetScc), name)
}

// UpdateScc mocks base method
func (m *MockSecurityClient) UpdateScc(arg0 *v1.SecurityContextConstraints) (*v1.SecurityContextConstraints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScc", arg0)
	ret0, _ := ret[0].(*v1.SecurityContextConstraints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScc indicates an expected call of UpdateScc
func (mr *MockSecurityClientMockRecorder) UpdateScc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScc", reflect.TypeOf((*MockSecurityClient)(nil).UpdateScc), arg0)
}
