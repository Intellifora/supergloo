// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kube/rbac.go

// Package mock_kube is a generated GoMock package.
package mock_kube

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRbacClient is a mock of RbacClient interface
type MockRbacClient struct {
	ctrl     *gomock.Controller
	recorder *MockRbacClientMockRecorder
}

// MockRbacClientMockRecorder is the mock recorder for MockRbacClient
type MockRbacClientMockRecorder struct {
	mock *MockRbacClient
}

// NewMockRbacClient creates a new mock instance
func NewMockRbacClient(ctrl *gomock.Controller) *MockRbacClient {
	mock := &MockRbacClient{ctrl: ctrl}
	mock.recorder = &MockRbacClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRbacClient) EXPECT() *MockRbacClientMockRecorder {
	return m.recorder
}

// CreateCrbIfNotExist mocks base method
func (m *MockRbacClient) CreateCrbIfNotExist(crbName, namespaceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCrbIfNotExist", crbName, namespaceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCrbIfNotExist indicates an expected call of CreateCrbIfNotExist
func (mr *MockRbacClientMockRecorder) CreateCrbIfNotExist(crbName, namespaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCrbIfNotExist", reflect.TypeOf((*MockRbacClient)(nil).CreateCrbIfNotExist), crbName, namespaceName)
}

// DeleteCrb mocks base method
func (m *MockRbacClient) DeleteCrb(crbName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCrb", crbName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCrb indicates an expected call of DeleteCrb
func (mr *MockRbacClientMockRecorder) DeleteCrb(crbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCrb", reflect.TypeOf((*MockRbacClient)(nil).DeleteCrb), crbName)
}
