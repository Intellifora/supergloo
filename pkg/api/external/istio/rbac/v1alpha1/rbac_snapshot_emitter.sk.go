// Code generated by solo-kit. DO NOT EDIT.

package v1alpha1

import (
	"sync"
	"time"

	"go.opencensus.io/stats"
	"go.opencensus.io/stats/view"
	"go.opencensus.io/tag"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/errors"
	"github.com/solo-io/solo-kit/pkg/utils/errutils"
)

var (
	mRbacSnapshotIn  = stats.Int64("rbac.istio.io/snap_emitter/snap_in", "The number of snapshots in", "1")
	mRbacSnapshotOut = stats.Int64("rbac.istio.io/snap_emitter/snap_out", "The number of snapshots out", "1")

	rbacsnapshotInView = &view.View{
		Name:        "rbac.istio.io_snap_emitter/snap_in",
		Measure:     mRbacSnapshotIn,
		Description: "The number of snapshots updates coming in",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
	rbacsnapshotOutView = &view.View{
		Name:        "rbac.istio.io/snap_emitter/snap_out",
		Measure:     mRbacSnapshotOut,
		Description: "The number of snapshots updates going out",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
)

func init() {
	view.Register(rbacsnapshotInView, rbacsnapshotOutView)
}

type RbacEmitter interface {
	Register() error
	ServiceRole() ServiceRoleClient
	ServiceRoleBinding() ServiceRoleBindingClient
	RbacConfig() RbacConfigClient
	Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *RbacSnapshot, <-chan error, error)
}

func NewRbacEmitter(serviceRoleClient ServiceRoleClient, serviceRoleBindingClient ServiceRoleBindingClient, rbacConfigClient RbacConfigClient) RbacEmitter {
	return NewRbacEmitterWithEmit(serviceRoleClient, serviceRoleBindingClient, rbacConfigClient, make(chan struct{}))
}

func NewRbacEmitterWithEmit(serviceRoleClient ServiceRoleClient, serviceRoleBindingClient ServiceRoleBindingClient, rbacConfigClient RbacConfigClient, emit <-chan struct{}) RbacEmitter {
	return &rbacEmitter{
		serviceRole:        serviceRoleClient,
		serviceRoleBinding: serviceRoleBindingClient,
		rbacConfig:         rbacConfigClient,
		forceEmit:          emit,
	}
}

type rbacEmitter struct {
	forceEmit          <-chan struct{}
	serviceRole        ServiceRoleClient
	serviceRoleBinding ServiceRoleBindingClient
	rbacConfig         RbacConfigClient
}

func (c *rbacEmitter) Register() error {
	if err := c.serviceRole.Register(); err != nil {
		return err
	}
	if err := c.serviceRoleBinding.Register(); err != nil {
		return err
	}
	if err := c.rbacConfig.Register(); err != nil {
		return err
	}
	return nil
}

func (c *rbacEmitter) ServiceRole() ServiceRoleClient {
	return c.serviceRole
}

func (c *rbacEmitter) ServiceRoleBinding() ServiceRoleBindingClient {
	return c.serviceRoleBinding
}

func (c *rbacEmitter) RbacConfig() RbacConfigClient {
	return c.rbacConfig
}

func (c *rbacEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *RbacSnapshot, <-chan error, error) {
	errs := make(chan error)
	var done sync.WaitGroup
	ctx := opts.Ctx
	/* Create channel for ServiceRole */
	type serviceRoleListWithNamespace struct {
		list      ServiceRoleList
		namespace string
	}
	serviceRoleChan := make(chan serviceRoleListWithNamespace)
	/* Create channel for ServiceRoleBinding */
	type serviceRoleBindingListWithNamespace struct {
		list      ServiceRoleBindingList
		namespace string
	}
	serviceRoleBindingChan := make(chan serviceRoleBindingListWithNamespace)
	/* Create channel for RbacConfig */
	type rbacConfigListWithNamespace struct {
		list      RbacConfigList
		namespace string
	}
	rbacConfigChan := make(chan rbacConfigListWithNamespace)

	for _, namespace := range watchNamespaces {
		/* Setup namespaced watch for ServiceRole */
		serviceRoleNamespacesChan, serviceRoleErrs, err := c.serviceRole.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting ServiceRole watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, serviceRoleErrs, namespace+"-serviceRoles")
		}(namespace)
		/* Setup namespaced watch for ServiceRoleBinding */
		serviceRoleBindingNamespacesChan, serviceRoleBindingErrs, err := c.serviceRoleBinding.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting ServiceRoleBinding watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, serviceRoleBindingErrs, namespace+"-serviceRoleBindings")
		}(namespace)
		/* Setup namespaced watch for RbacConfig */
		rbacConfigNamespacesChan, rbacConfigErrs, err := c.rbacConfig.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting RbacConfig watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, rbacConfigErrs, namespace+"-rbacConfigs")
		}(namespace)

		/* Watch for changes and update snapshot */
		go func(namespace string) {
			for {
				select {
				case <-ctx.Done():
					return
				case serviceRoleList := <-serviceRoleNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case serviceRoleChan <- serviceRoleListWithNamespace{list: serviceRoleList, namespace: namespace}:
					}
				case serviceRoleBindingList := <-serviceRoleBindingNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case serviceRoleBindingChan <- serviceRoleBindingListWithNamespace{list: serviceRoleBindingList, namespace: namespace}:
					}
				case rbacConfigList := <-rbacConfigNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case rbacConfigChan <- rbacConfigListWithNamespace{list: rbacConfigList, namespace: namespace}:
					}
				}
			}
		}(namespace)
	}

	snapshots := make(chan *RbacSnapshot)
	go func() {
		originalSnapshot := RbacSnapshot{}
		currentSnapshot := originalSnapshot.Clone()
		timer := time.NewTicker(time.Second * 1)
		sync := func() {
			if originalSnapshot.Hash() == currentSnapshot.Hash() {
				return
			}

			stats.Record(ctx, mRbacSnapshotOut.M(1))
			originalSnapshot = currentSnapshot.Clone()
			sentSnapshot := currentSnapshot.Clone()
			snapshots <- &sentSnapshot
		}

		/* TODO (yuval-k): figure out how to make this work to avoid a stale snapshot.
		   		// construct the first snapshot from all the configs that are currently there
		   		// that guarantees that the first snapshot contains all the data.
		   		for range watchNamespaces {
		      serviceRoleNamespacedList := <- serviceRoleChan
		      currentSnapshot.ServiceRoles.Clear(serviceRoleNamespacedList.namespace)
		      serviceRoleList := serviceRoleNamespacedList.list
		   	currentSnapshot.ServiceRoles.Add(serviceRoleList...)
		      serviceRoleBindingNamespacedList := <- serviceRoleBindingChan
		      currentSnapshot.ServiceRoleBindings.Clear(serviceRoleBindingNamespacedList.namespace)
		      serviceRoleBindingList := serviceRoleBindingNamespacedList.list
		   	currentSnapshot.ServiceRoleBindings.Add(serviceRoleBindingList...)
		      rbacConfigNamespacedList := <- rbacConfigChan
		      currentSnapshot.RbacConfigs.Clear(rbacConfigNamespacedList.namespace)
		      rbacConfigList := rbacConfigNamespacedList.list
		   	currentSnapshot.RbacConfigs.Add(rbacConfigList...)
		   		}
		*/

		for {
			record := func() { stats.Record(ctx, mRbacSnapshotIn.M(1)) }

			select {
			case <-timer.C:
				sync()
			case <-ctx.Done():
				close(snapshots)
				done.Wait()
				close(errs)
				return
			case <-c.forceEmit:
				sentSnapshot := currentSnapshot.Clone()
				snapshots <- &sentSnapshot
			case serviceRoleNamespacedList := <-serviceRoleChan:
				record()

				namespace := serviceRoleNamespacedList.namespace
				serviceRoleList := serviceRoleNamespacedList.list

				currentSnapshot.ServiceRoles.Clear(namespace)
				currentSnapshot.ServiceRoles.Add(serviceRoleList...)
			case serviceRoleBindingNamespacedList := <-serviceRoleBindingChan:
				record()

				namespace := serviceRoleBindingNamespacedList.namespace
				serviceRoleBindingList := serviceRoleBindingNamespacedList.list

				currentSnapshot.ServiceRoleBindings.Clear(namespace)
				currentSnapshot.ServiceRoleBindings.Add(serviceRoleBindingList...)
			case rbacConfigNamespacedList := <-rbacConfigChan:
				record()

				namespace := rbacConfigNamespacedList.namespace
				rbacConfigList := rbacConfigNamespacedList.list

				currentSnapshot.RbacConfigs.Clear(namespace)
				currentSnapshot.RbacConfigs.Add(rbacConfigList...)
			}
		}
	}()
	return snapshots, errs, nil
}
