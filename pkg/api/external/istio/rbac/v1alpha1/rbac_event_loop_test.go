// Code generated by solo-kit. DO NOT EDIT.

// +build solokit

package v1alpha1

import (
	"context"
	"sync"
	"time"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/memory"
)

var _ = Describe("RbacEventLoop", func() {
	var (
		namespace string
		emitter   RbacEmitter
		err       error
	)

	BeforeEach(func() {

		serviceRoleClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}
		serviceRoleClient, err := NewServiceRoleClient(serviceRoleClientFactory)
		Expect(err).NotTo(HaveOccurred())

		serviceRoleBindingClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}
		serviceRoleBindingClient, err := NewServiceRoleBindingClient(serviceRoleBindingClientFactory)
		Expect(err).NotTo(HaveOccurred())

		rbacConfigClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}
		rbacConfigClient, err := NewRbacConfigClient(rbacConfigClientFactory)
		Expect(err).NotTo(HaveOccurred())

		emitter = NewRbacEmitter(serviceRoleClient, serviceRoleBindingClient, rbacConfigClient)
	})
	It("runs sync function on a new snapshot", func() {
		_, err = emitter.ServiceRole().Write(NewServiceRole(namespace, "jerry"), clients.WriteOpts{})
		Expect(err).NotTo(HaveOccurred())
		_, err = emitter.ServiceRoleBinding().Write(NewServiceRoleBinding(namespace, "jerry"), clients.WriteOpts{})
		Expect(err).NotTo(HaveOccurred())
		_, err = emitter.RbacConfig().Write(NewRbacConfig(namespace, "jerry"), clients.WriteOpts{})
		Expect(err).NotTo(HaveOccurred())
		sync := &mockRbacSyncer{}
		el := NewRbacEventLoop(emitter, sync)
		_, err := el.Run([]string{namespace}, clients.WatchOpts{})
		Expect(err).NotTo(HaveOccurred())
		Eventually(sync.Synced, 5*time.Second).Should(BeTrue())
	})
})

type mockRbacSyncer struct {
	synced bool
	mutex  sync.Mutex
}

func (s *mockRbacSyncer) Synced() bool {
	s.mutex.Lock()
	defer s.mutex.Unlock()
	return s.synced
}

func (s *mockRbacSyncer) Sync(ctx context.Context, snap *RbacSnapshot) error {
	s.mutex.Lock()
	s.synced = true
	s.mutex.Unlock()
	return nil
}
