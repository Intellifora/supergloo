// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/supergloo/api/external/gloo/v1/plugins/service_spec.proto

package plugins // import "github.com/solo-io/supergloo/pkg/api/external/gloo/v1/plugins"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import grpc1 "github.com/solo-io/supergloo/pkg/api/external/gloo/v1/plugins/grpc"
import rest "github.com/solo-io/supergloo/pkg/api/external/gloo/v1/plugins/rest"
import sqoop "github.com/solo-io/supergloo/pkg/api/external/gloo/v1/plugins/sqoop"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Describes APIs and application-level information for services
// Gloo routes to. ServiceSpec is contained within the UpstreamSpec for certain types
// of upstreams, including Kubernetes, Consul, and Static.
// ServiceSpec configuration is opaque to Gloo and handled by Service Plugins.
type ServiceSpec struct {
	// Note to developers: new Service Plugins must be added to this oneof field
	// to be usable by Gloo.
	//
	// Types that are valid to be assigned to PluginType:
	//	*ServiceSpec_Rest
	//	*ServiceSpec_Grpc
	//	*ServiceSpec_Sqoop
	PluginType           isServiceSpec_PluginType `protobuf_oneof:"plugin_type"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ServiceSpec) Reset()         { *m = ServiceSpec{} }
func (m *ServiceSpec) String() string { return proto.CompactTextString(m) }
func (*ServiceSpec) ProtoMessage()    {}
func (*ServiceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_spec_cf06716db14bea47, []int{0}
}
func (m *ServiceSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceSpec.Unmarshal(m, b)
}
func (m *ServiceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceSpec.Marshal(b, m, deterministic)
}
func (dst *ServiceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSpec.Merge(dst, src)
}
func (m *ServiceSpec) XXX_Size() int {
	return xxx_messageInfo_ServiceSpec.Size(m)
}
func (m *ServiceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSpec proto.InternalMessageInfo

type isServiceSpec_PluginType interface {
	isServiceSpec_PluginType()
	Equal(interface{}) bool
}

type ServiceSpec_Rest struct {
	Rest *rest.ServiceSpec `protobuf:"bytes,1,opt,name=rest,oneof"`
}
type ServiceSpec_Grpc struct {
	Grpc *grpc1.ServiceSpec `protobuf:"bytes,2,opt,name=grpc,oneof"`
}
type ServiceSpec_Sqoop struct {
	Sqoop *sqoop.ServiceSpec `protobuf:"bytes,3,opt,name=sqoop,oneof"`
}

func (*ServiceSpec_Rest) isServiceSpec_PluginType()  {}
func (*ServiceSpec_Grpc) isServiceSpec_PluginType()  {}
func (*ServiceSpec_Sqoop) isServiceSpec_PluginType() {}

func (m *ServiceSpec) GetPluginType() isServiceSpec_PluginType {
	if m != nil {
		return m.PluginType
	}
	return nil
}

func (m *ServiceSpec) GetRest() *rest.ServiceSpec {
	if x, ok := m.GetPluginType().(*ServiceSpec_Rest); ok {
		return x.Rest
	}
	return nil
}

func (m *ServiceSpec) GetGrpc() *grpc1.ServiceSpec {
	if x, ok := m.GetPluginType().(*ServiceSpec_Grpc); ok {
		return x.Grpc
	}
	return nil
}

func (m *ServiceSpec) GetSqoop() *sqoop.ServiceSpec {
	if x, ok := m.GetPluginType().(*ServiceSpec_Sqoop); ok {
		return x.Sqoop
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ServiceSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ServiceSpec_OneofMarshaler, _ServiceSpec_OneofUnmarshaler, _ServiceSpec_OneofSizer, []interface{}{
		(*ServiceSpec_Rest)(nil),
		(*ServiceSpec_Grpc)(nil),
		(*ServiceSpec_Sqoop)(nil),
	}
}

func _ServiceSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ServiceSpec)
	// plugin_type
	switch x := m.PluginType.(type) {
	case *ServiceSpec_Rest:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rest); err != nil {
			return err
		}
	case *ServiceSpec_Grpc:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Grpc); err != nil {
			return err
		}
	case *ServiceSpec_Sqoop:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sqoop); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ServiceSpec.PluginType has unexpected type %T", x)
	}
	return nil
}

func _ServiceSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ServiceSpec)
	switch tag {
	case 1: // plugin_type.rest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(rest.ServiceSpec)
		err := b.DecodeMessage(msg)
		m.PluginType = &ServiceSpec_Rest{msg}
		return true, err
	case 2: // plugin_type.grpc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(grpc1.ServiceSpec)
		err := b.DecodeMessage(msg)
		m.PluginType = &ServiceSpec_Grpc{msg}
		return true, err
	case 3: // plugin_type.sqoop
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(sqoop.ServiceSpec)
		err := b.DecodeMessage(msg)
		m.PluginType = &ServiceSpec_Sqoop{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ServiceSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ServiceSpec)
	// plugin_type
	switch x := m.PluginType.(type) {
	case *ServiceSpec_Rest:
		s := proto.Size(x.Rest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceSpec_Grpc:
		s := proto.Size(x.Grpc)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceSpec_Sqoop:
		s := proto.Size(x.Sqoop)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ServiceSpec)(nil), "plugins.gloo.solo.io.ServiceSpec")
}
func (this *ServiceSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSpec)
	if !ok {
		that2, ok := that.(ServiceSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PluginType == nil {
		if this.PluginType != nil {
			return false
		}
	} else if this.PluginType == nil {
		return false
	} else if !this.PluginType.Equal(that1.PluginType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServiceSpec_Rest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSpec_Rest)
	if !ok {
		that2, ok := that.(ServiceSpec_Rest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rest.Equal(that1.Rest) {
		return false
	}
	return true
}
func (this *ServiceSpec_Grpc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSpec_Grpc)
	if !ok {
		that2, ok := that.(ServiceSpec_Grpc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Grpc.Equal(that1.Grpc) {
		return false
	}
	return true
}
func (this *ServiceSpec_Sqoop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSpec_Sqoop)
	if !ok {
		that2, ok := that.(ServiceSpec_Sqoop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sqoop.Equal(that1.Sqoop) {
		return false
	}
	return true
}

func init() {
	proto.RegisterFile("github.com/solo-io/supergloo/api/external/gloo/v1/plugins/service_spec.proto", fileDescriptor_service_spec_cf06716db14bea47)
}

var fileDescriptor_service_spec_cf06716db14bea47 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0xbd, 0x4e, 0x03, 0x31,
	0x10, 0x84, 0x39, 0xfe, 0x0a, 0x9f, 0x68, 0x4e, 0x29, 0x4e, 0x29, 0x10, 0xa2, 0x00, 0x1a, 0x6c,
	0x01, 0x2d, 0x08, 0x29, 0x34, 0x20, 0xa8, 0x48, 0x47, 0x13, 0x25, 0xd6, 0xca, 0x58, 0x1c, 0xd9,
	0xc5, 0xf6, 0x45, 0xf0, 0x46, 0xbc, 0x12, 0x2d, 0x4f, 0x82, 0xbc, 0xeb, 0x82, 0x02, 0x05, 0x44,
	0x9a, 0xd1, 0xe9, 0x3c, 0xdf, 0x78, 0x3c, 0xea, 0xce, 0xf9, 0xf4, 0xd8, 0xcf, 0xb4, 0xc5, 0x67,
	0x13, 0xb1, 0xc3, 0x63, 0x8f, 0x26, 0xf6, 0x04, 0xc1, 0x75, 0x88, 0x66, 0x4a, 0xde, 0xc0, 0x6b,
	0x82, 0x30, 0x9f, 0x76, 0x86, 0xff, 0x2c, 0x4e, 0x0c, 0x75, 0xbd, 0xf3, 0xf3, 0x68, 0x22, 0x84,
	0x85, 0xb7, 0x30, 0x89, 0x04, 0x56, 0x53, 0xc0, 0x84, 0xcd, 0xa0, 0x9c, 0xe9, 0xec, 0xd5, 0x39,
	0x4f, 0x7b, 0x1c, 0x0e, 0x1c, 0x3a, 0x64, 0x83, 0xc9, 0x5f, 0xe2, 0x1d, 0xde, 0xfc, 0xff, 0xe6,
	0x00, 0x31, 0xb1, 0xac, 0x1e, 0xe5, 0x02, 0x59, 0x96, 0x12, 0x75, 0xbb, 0xc2, 0x1e, 0x2f, 0x88,
	0x24, 0x2a, 0x61, 0xfb, 0x1f, 0x95, 0xaa, 0xc7, 0xb2, 0xd2, 0x98, 0xc0, 0x36, 0xe7, 0x6a, 0x33,
	0xb7, 0x6e, 0xab, 0xbd, 0xea, 0xa8, 0x3e, 0x3d, 0xd0, 0xf2, 0x84, 0x1f, 0x26, 0xd3, 0xdf, 0xa8,
	0xeb, 0xb5, 0x7b, 0xa6, 0x32, 0x9d, 0x8b, 0xb6, 0xeb, 0x85, 0x96, 0xd6, 0x7f, 0xa0, 0xb3, 0xb1,
	0xb9, 0x54, 0x5b, 0x5c, 0xad, 0xdd, 0x60, 0xfc, 0x50, 0x97, 0xa2, 0xbf, 0xf3, 0xc2, 0x8d, 0x76,
	0x54, 0x2d, 0xe6, 0x49, 0x7a, 0x23, 0x18, 0x5d, 0xbd, 0x7f, 0xee, 0x56, 0x0f, 0x17, 0x4b, 0xe7,
	0xa2, 0x27, 0xb7, 0x74, 0xb2, 0xd9, 0x36, 0xef, 0x74, 0xf6, 0x15, 0x00, 0x00, 0xff, 0xff, 0x78,
	0x38, 0xc4, 0x38, 0x86, 0x02, 0x00, 0x00,
}
