// Code generated by protoc-gen-solo-kit. DO NOT EDIT.

package v1

import (
	gloo_solo_io "github.com/solo-io/supergloo/pkg/api/external/gloo/v1"
	encryption_istio_io "github.com/solo-io/supergloo/pkg/api/external/istio/encryption/v1"

	"github.com/mitchellh/hashstructure"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"go.uber.org/zap"
)

type TranslatorSnapshot struct {
	Secrets      gloo_solo_io.SecretsByNamespace
	Upstreams    gloo_solo_io.UpstreamsByNamespace
	Istiocerts   encryption_istio_io.IstiocertsByNamespace
	Meshes       MeshesByNamespace
	Routingrules RoutingrulesByNamespace
}

func (s TranslatorSnapshot) Clone() TranslatorSnapshot {
	return TranslatorSnapshot{
		Secrets:      s.Secrets.Clone(),
		Upstreams:    s.Upstreams.Clone(),
		Istiocerts:   s.Istiocerts.Clone(),
		Meshes:       s.Meshes.Clone(),
		Routingrules: s.Routingrules.Clone(),
	}
}

func (s TranslatorSnapshot) snapshotToHash() TranslatorSnapshot {
	snapshotForHashing := s.Clone()
	for _, secret := range snapshotForHashing.Secrets.List() {
		resources.UpdateMetadata(secret, func(meta *core.Metadata) {
			meta.ResourceVersion = ""
		})
	}
	for _, upstream := range snapshotForHashing.Upstreams.List() {
		resources.UpdateMetadata(upstream, func(meta *core.Metadata) {
			meta.ResourceVersion = ""
		})
		upstream.SetStatus(core.Status{})
	}
	for _, istioCacertsSecret := range snapshotForHashing.Istiocerts.List() {
		resources.UpdateMetadata(istioCacertsSecret, func(meta *core.Metadata) {
			meta.ResourceVersion = ""
		})
	}
	for _, mesh := range snapshotForHashing.Meshes.List() {
		resources.UpdateMetadata(mesh, func(meta *core.Metadata) {
			meta.ResourceVersion = ""
		})
		mesh.SetStatus(core.Status{})
	}
	for _, routingRule := range snapshotForHashing.Routingrules.List() {
		resources.UpdateMetadata(routingRule, func(meta *core.Metadata) {
			meta.ResourceVersion = ""
		})
		routingRule.SetStatus(core.Status{})
	}

	return snapshotForHashing
}

func (s TranslatorSnapshot) Hash() uint64 {
	return s.hashStruct(s.snapshotToHash())
}

func (s TranslatorSnapshot) HashFields() []zap.Field {
	snapshotForHashing := s.snapshotToHash()
	var fields []zap.Field
	secrets := s.hashStruct(snapshotForHashing.Secrets.List())
	fields = append(fields, zap.Uint64("secrets", secrets))
	upstreams := s.hashStruct(snapshotForHashing.Upstreams.List())
	fields = append(fields, zap.Uint64("upstreams", upstreams))
	istiocerts := s.hashStruct(snapshotForHashing.Istiocerts.List())
	fields = append(fields, zap.Uint64("istiocerts", istiocerts))
	meshes := s.hashStruct(snapshotForHashing.Meshes.List())
	fields = append(fields, zap.Uint64("meshes", meshes))
	routingrules := s.hashStruct(snapshotForHashing.Routingrules.List())
	fields = append(fields, zap.Uint64("routingrules", routingrules))

	return append(fields, zap.Uint64("snapshotHash", s.hashStruct(snapshotForHashing)))
}

func (s TranslatorSnapshot) hashStruct(v interface{}) uint64 {
	h, err := hashstructure.Hash(v, nil)
	if err != nil {
		panic(err)
	}
	return h
}
