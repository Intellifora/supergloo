// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/supergloo/api/v1/routing.proto

package v1 // import "github.com/solo-io/supergloo/pkg/api/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
import core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
import v1alpha3 "github.com/solo-io/supergloo/pkg/api/external/istio/networking/v1alpha3"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// @solo-kit:resource.short_name=rr
// @solo-kit:resource.plural_name=routingrules
// @solo-kit:resource.resource_groups=translator.supergloo.solo.io
// rules to add features such as Fault Injection and Retries to a mesh
type RoutingRule struct {
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by gloo during validation
	Status core.Status `protobuf:"bytes,100,opt,name=status" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,99,opt,name=metadata" json:"metadata"`
	// target where we apply this rule
	TargetMesh *core.ResourceRef `protobuf:"bytes,1,opt,name=target_mesh,json=targetMesh" json:"target_mesh,omitempty"`
	// source upstreams to apply the rule to. if empty, applies to all sources.
	Sources []*core.ResourceRef `protobuf:"bytes,2,rep,name=sources" json:"sources,omitempty"`
	// destination upstreams for which this rule applies. if empty, applies to all destinations
	Destinations []*core.ResourceRef `protobuf:"bytes,3,rep,name=destinations" json:"destinations,omitempty"`
	// if specified, this rule will only apply to http requests in the mesh matching these parameters
	RequestMatchers []*v1.Matcher `protobuf:"bytes,4,rep,name=request_matchers,json=requestMatchers" json:"request_matchers,omitempty"`
	// configuration to enable traffic shifting, e.g. by percentage or for alternate destinations
	TrafficShifting *TrafficShifting `protobuf:"bytes,5,opt,name=traffic_shifting,json=trafficShifting" json:"traffic_shifting,omitempty"`
	// configuration to enable fault injection for this rule
	FaultInjection *v1alpha3.HTTPFaultInjection `protobuf:"bytes,6,opt,name=fault_injection,json=faultInjection" json:"fault_injection,omitempty"`
	// Timeout for this rule
	Timeout *types.Duration `protobuf:"bytes,7,opt,name=timeout" json:"timeout,omitempty"`
	// Retry policy for for this rule
	Retries *v1alpha3.HTTPRetry `protobuf:"bytes,8,opt,name=retries" json:"retries,omitempty"`
	// Cross-Origin Resource Sharing policy (CORS) for this rule. Refer to
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
	// for further details about cross origin resource sharing.
	CorsPolicy *v1alpha3.CorsPolicy `protobuf:"bytes,10,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// Mirror HTTP traffic to a another destination for this rule. Traffic will still be sent
	// to its original destination as normal.
	Mirror *v1.Destination `protobuf:"bytes,9,opt,name=mirror" json:"mirror,omitempty"`
	// manipulate request and response headers for this rule
	HeaderManipulaition  *HeaderManipulation `protobuf:"bytes,12,opt,name=header_manipulaition,json=headerManipulaition" json:"header_manipulaition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RoutingRule) Reset()         { *m = RoutingRule{} }
func (m *RoutingRule) String() string { return proto.CompactTextString(m) }
func (*RoutingRule) ProtoMessage()    {}
func (*RoutingRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_b66d4faa850070ae, []int{0}
}
func (m *RoutingRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingRule.Unmarshal(m, b)
}
func (m *RoutingRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingRule.Marshal(b, m, deterministic)
}
func (dst *RoutingRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingRule.Merge(dst, src)
}
func (m *RoutingRule) XXX_Size() int {
	return xxx_messageInfo_RoutingRule.Size(m)
}
func (m *RoutingRule) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingRule.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingRule proto.InternalMessageInfo

func (m *RoutingRule) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *RoutingRule) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *RoutingRule) GetTargetMesh() *core.ResourceRef {
	if m != nil {
		return m.TargetMesh
	}
	return nil
}

func (m *RoutingRule) GetSources() []*core.ResourceRef {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *RoutingRule) GetDestinations() []*core.ResourceRef {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *RoutingRule) GetRequestMatchers() []*v1.Matcher {
	if m != nil {
		return m.RequestMatchers
	}
	return nil
}

func (m *RoutingRule) GetTrafficShifting() *TrafficShifting {
	if m != nil {
		return m.TrafficShifting
	}
	return nil
}

func (m *RoutingRule) GetFaultInjection() *v1alpha3.HTTPFaultInjection {
	if m != nil {
		return m.FaultInjection
	}
	return nil
}

func (m *RoutingRule) GetTimeout() *types.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *RoutingRule) GetRetries() *v1alpha3.HTTPRetry {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *RoutingRule) GetCorsPolicy() *v1alpha3.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *RoutingRule) GetMirror() *v1.Destination {
	if m != nil {
		return m.Mirror
	}
	return nil
}

func (m *RoutingRule) GetHeaderManipulaition() *HeaderManipulation {
	if m != nil {
		return m.HeaderManipulaition
	}
	return nil
}

// enable traffic shifting for any http requests sent to one of the destinations on this rule
type TrafficShifting struct {
	// split traffic between these subsets based on their weights
	// weights should add to 100
	Destinations         []*WeightedDestination `protobuf:"bytes,1,rep,name=destinations" json:"destinations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TrafficShifting) Reset()         { *m = TrafficShifting{} }
func (m *TrafficShifting) String() string { return proto.CompactTextString(m) }
func (*TrafficShifting) ProtoMessage()    {}
func (*TrafficShifting) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_b66d4faa850070ae, []int{1}
}
func (m *TrafficShifting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficShifting.Unmarshal(m, b)
}
func (m *TrafficShifting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficShifting.Marshal(b, m, deterministic)
}
func (dst *TrafficShifting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficShifting.Merge(dst, src)
}
func (m *TrafficShifting) XXX_Size() int {
	return xxx_messageInfo_TrafficShifting.Size(m)
}
func (m *TrafficShifting) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficShifting.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficShifting proto.InternalMessageInfo

func (m *TrafficShifting) GetDestinations() []*WeightedDestination {
	if m != nil {
		return m.Destinations
	}
	return nil
}

// WeightedDestination attaches a weight to a single destination.
type WeightedDestination struct {
	Upstream *core.ResourceRef `protobuf:"bytes,1,opt,name=upstream" json:"upstream,omitempty"`
	// Weight must be greater than zero
	// Routing to each destination will be balanced by the ratio of the destination's weight to the total weight on a route
	Weight               uint32   `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeightedDestination) Reset()         { *m = WeightedDestination{} }
func (m *WeightedDestination) String() string { return proto.CompactTextString(m) }
func (*WeightedDestination) ProtoMessage()    {}
func (*WeightedDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_b66d4faa850070ae, []int{2}
}
func (m *WeightedDestination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeightedDestination.Unmarshal(m, b)
}
func (m *WeightedDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeightedDestination.Marshal(b, m, deterministic)
}
func (dst *WeightedDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedDestination.Merge(dst, src)
}
func (m *WeightedDestination) XXX_Size() int {
	return xxx_messageInfo_WeightedDestination.Size(m)
}
func (m *WeightedDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedDestination.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedDestination proto.InternalMessageInfo

func (m *WeightedDestination) GetUpstream() *core.ResourceRef {
	if m != nil {
		return m.Upstream
	}
	return nil
}

func (m *WeightedDestination) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// manipulate request and response headers
type HeaderManipulation struct {
	// HTTP headers to remove before returning a response to the caller.
	RemoveResponseHeaders []string `protobuf:"bytes,12,rep,name=remove_response_headers,json=removeResponseHeaders" json:"remove_response_headers,omitempty"`
	// Additional HTTP headers to add before returning a response to the
	// caller.
	AppendResponseHeaders map[string]string `protobuf:"bytes,13,rep,name=append_response_headers,json=appendResponseHeaders" json:"append_response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP headers to remove before forwarding a request to the
	// destination service.
	RemoveRequestHeaders []string `protobuf:"bytes,14,rep,name=remove_request_headers,json=removeRequestHeaders" json:"remove_request_headers,omitempty"`
	// Additional HTTP headers to add before forwarding a request to the
	// destination service.
	AppendRequestHeaders map[string]string `protobuf:"bytes,15,rep,name=append_request_headers,json=appendRequestHeaders" json:"append_request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HeaderManipulation) Reset()         { *m = HeaderManipulation{} }
func (m *HeaderManipulation) String() string { return proto.CompactTextString(m) }
func (*HeaderManipulation) ProtoMessage()    {}
func (*HeaderManipulation) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_b66d4faa850070ae, []int{3}
}
func (m *HeaderManipulation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeaderManipulation.Unmarshal(m, b)
}
func (m *HeaderManipulation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeaderManipulation.Marshal(b, m, deterministic)
}
func (dst *HeaderManipulation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderManipulation.Merge(dst, src)
}
func (m *HeaderManipulation) XXX_Size() int {
	return xxx_messageInfo_HeaderManipulation.Size(m)
}
func (m *HeaderManipulation) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderManipulation.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderManipulation proto.InternalMessageInfo

func (m *HeaderManipulation) GetRemoveResponseHeaders() []string {
	if m != nil {
		return m.RemoveResponseHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetAppendResponseHeaders() map[string]string {
	if m != nil {
		return m.AppendResponseHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetRemoveRequestHeaders() []string {
	if m != nil {
		return m.RemoveRequestHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetAppendRequestHeaders() map[string]string {
	if m != nil {
		return m.AppendRequestHeaders
	}
	return nil
}

// Percent specifies a percentage in the range of [0.0, 100.0].
type Percent struct {
	Value                float64  `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Percent) Reset()         { *m = Percent{} }
func (m *Percent) String() string { return proto.CompactTextString(m) }
func (*Percent) ProtoMessage()    {}
func (*Percent) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_b66d4faa850070ae, []int{4}
}
func (m *Percent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Percent.Unmarshal(m, b)
}
func (m *Percent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Percent.Marshal(b, m, deterministic)
}
func (dst *Percent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Percent.Merge(dst, src)
}
func (m *Percent) XXX_Size() int {
	return xxx_messageInfo_Percent.Size(m)
}
func (m *Percent) XXX_DiscardUnknown() {
	xxx_messageInfo_Percent.DiscardUnknown(m)
}

var xxx_messageInfo_Percent proto.InternalMessageInfo

func (m *Percent) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*RoutingRule)(nil), "supergloo.solo.io.RoutingRule")
	proto.RegisterType((*TrafficShifting)(nil), "supergloo.solo.io.TrafficShifting")
	proto.RegisterType((*WeightedDestination)(nil), "supergloo.solo.io.WeightedDestination")
	proto.RegisterType((*HeaderManipulation)(nil), "supergloo.solo.io.HeaderManipulation")
	proto.RegisterMapType((map[string]string)(nil), "supergloo.solo.io.HeaderManipulation.AppendRequestHeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "supergloo.solo.io.HeaderManipulation.AppendResponseHeadersEntry")
	proto.RegisterType((*Percent)(nil), "supergloo.solo.io.Percent")
}
func (this *RoutingRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutingRule)
	if !ok {
		that2, ok := that.(RoutingRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.TargetMesh.Equal(that1.TargetMesh) {
		return false
	}
	if len(this.Sources) != len(that1.Sources) {
		return false
	}
	for i := range this.Sources {
		if !this.Sources[i].Equal(that1.Sources[i]) {
			return false
		}
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if !this.Destinations[i].Equal(that1.Destinations[i]) {
			return false
		}
	}
	if len(this.RequestMatchers) != len(that1.RequestMatchers) {
		return false
	}
	for i := range this.RequestMatchers {
		if !this.RequestMatchers[i].Equal(that1.RequestMatchers[i]) {
			return false
		}
	}
	if !this.TrafficShifting.Equal(that1.TrafficShifting) {
		return false
	}
	if !this.FaultInjection.Equal(that1.FaultInjection) {
		return false
	}
	if !this.Timeout.Equal(that1.Timeout) {
		return false
	}
	if !this.Retries.Equal(that1.Retries) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if !this.Mirror.Equal(that1.Mirror) {
		return false
	}
	if !this.HeaderManipulaition.Equal(that1.HeaderManipulaition) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficShifting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficShifting)
	if !ok {
		that2, ok := that.(TrafficShifting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if !this.Destinations[i].Equal(that1.Destinations[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *WeightedDestination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeightedDestination)
	if !ok {
		that2, ok := that.(WeightedDestination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Upstream.Equal(that1.Upstream) {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HeaderManipulation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderManipulation)
	if !ok {
		that2, ok := that.(HeaderManipulation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RemoveResponseHeaders) != len(that1.RemoveResponseHeaders) {
		return false
	}
	for i := range this.RemoveResponseHeaders {
		if this.RemoveResponseHeaders[i] != that1.RemoveResponseHeaders[i] {
			return false
		}
	}
	if len(this.AppendResponseHeaders) != len(that1.AppendResponseHeaders) {
		return false
	}
	for i := range this.AppendResponseHeaders {
		if this.AppendResponseHeaders[i] != that1.AppendResponseHeaders[i] {
			return false
		}
	}
	if len(this.RemoveRequestHeaders) != len(that1.RemoveRequestHeaders) {
		return false
	}
	for i := range this.RemoveRequestHeaders {
		if this.RemoveRequestHeaders[i] != that1.RemoveRequestHeaders[i] {
			return false
		}
	}
	if len(this.AppendRequestHeaders) != len(that1.AppendRequestHeaders) {
		return false
	}
	for i := range this.AppendRequestHeaders {
		if this.AppendRequestHeaders[i] != that1.AppendRequestHeaders[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Percent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Percent)
	if !ok {
		that2, ok := that.(Percent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func init() {
	proto.RegisterFile("github.com/solo-io/supergloo/api/v1/routing.proto", fileDescriptor_routing_b66d4faa850070ae)
}

var fileDescriptor_routing_b66d4faa850070ae = []byte{
	// 860 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x6f, 0x4e, 0xdc, 0x46,
	0x14, 0xef, 0x02, 0x59, 0x60, 0x20, 0x59, 0x32, 0x59, 0x88, 0xd9, 0x0f, 0x80, 0x56, 0x6a, 0xc3,
	0x87, 0xc6, 0x16, 0xa5, 0xad, 0x10, 0x52, 0x55, 0x4a, 0xd3, 0x86, 0x56, 0x5a, 0x09, 0x4d, 0x90,
	0x5a, 0x55, 0xaa, 0xac, 0xc1, 0x7e, 0xb6, 0xa7, 0xd8, 0x1e, 0xf7, 0xcd, 0x78, 0x09, 0x17, 0xe8,
	0x59, 0x7a, 0x94, 0x9e, 0x22, 0x52, 0x7b, 0x84, 0x9e, 0x20, 0xf2, 0x78, 0xbc, 0xec, 0x82, 0x49,
	0xe0, 0xd3, 0x7a, 0xf6, 0xf7, 0x67, 0x7e, 0xf3, 0xde, 0x1b, 0x9b, 0xec, 0xc5, 0x42, 0x27, 0xe5,
	0xb9, 0x1b, 0xc8, 0xcc, 0x53, 0x32, 0x95, 0x2f, 0x85, 0xf4, 0x54, 0x59, 0x00, 0xc6, 0xa9, 0x94,
	0x1e, 0x2f, 0x84, 0x37, 0xde, 0xf3, 0x50, 0x96, 0x5a, 0xe4, 0xb1, 0x5b, 0xa0, 0xd4, 0x92, 0x3e,
	0x9d, 0xe0, 0x6e, 0xa5, 0x70, 0x85, 0x1c, 0xf4, 0x63, 0x19, 0x4b, 0x83, 0x7a, 0xd5, 0x53, 0x4d,
	0x1c, 0x6c, 0xc5, 0x52, 0xc6, 0x29, 0x78, 0x66, 0x75, 0x5e, 0x46, 0x5e, 0x58, 0x22, 0xd7, 0x42,
	0xe6, 0x77, 0xe1, 0x97, 0xc8, 0x8b, 0x02, 0x50, 0x59, 0xfc, 0xa0, 0x25, 0x9b, 0x89, 0x55, 0xa0,
	0xfc, 0x03, 0x02, 0xad, 0xbc, 0xe9, 0x90, 0x05, 0xca, 0xb7, 0x57, 0x56, 0xe9, 0x09, 0xa5, 0x85,
	0xf4, 0x72, 0xd0, 0x97, 0x12, 0x2f, 0x44, 0x1e, 0x7b, 0xe3, 0x3d, 0x9e, 0x16, 0x09, 0xdf, 0xf7,
	0xc6, 0x02, 0x75, 0xc9, 0x53, 0x5f, 0x01, 0x8e, 0x45, 0x00, 0x56, 0xd0, 0x5a, 0x86, 0xea, 0xf7,
	0x42, 0xe8, 0x66, 0x83, 0x0c, 0x34, 0x0f, 0xb9, 0xe6, 0xcd, 0x1e, 0xf7, 0x90, 0x28, 0xcd, 0x75,
	0xd9, 0x1c, 0xe7, 0xf3, 0x7b, 0x08, 0x10, 0xa2, 0x9a, 0x3d, 0xfc, 0xb7, 0x4b, 0x56, 0x58, 0x5d,
	0x77, 0x56, 0xa6, 0x40, 0x5f, 0x93, 0x6e, 0xed, 0xe6, 0x84, 0x3b, 0x9d, 0xdd, 0x95, 0x2f, 0xfa,
	0x6e, 0x20, 0x11, 0x9a, 0x0e, 0xb8, 0x6f, 0x0c, 0x76, 0xbc, 0xf9, 0xcf, 0xbb, 0xed, 0x4f, 0xfe,
	0x7f, 0xb7, 0xfd, 0x54, 0x83, 0xd2, 0xa1, 0x88, 0xa2, 0xc3, 0xa1, 0x88, 0x73, 0x89, 0x30, 0x64,
	0x56, 0x4e, 0x0f, 0xc8, 0x52, 0x73, 0x12, 0x27, 0x30, 0x56, 0x1b, 0xb3, 0x56, 0x23, 0x8b, 0x1e,
	0x2f, 0x54, 0x66, 0x6c, 0xc2, 0xa6, 0x87, 0x64, 0x45, 0x73, 0x8c, 0x41, 0xfb, 0x19, 0xa8, 0xc4,
	0xe9, 0x18, 0xf1, 0xe6, 0xac, 0x98, 0x81, 0x92, 0x25, 0x06, 0xc0, 0x20, 0x62, 0xa4, 0x66, 0x8f,
	0x40, 0x25, 0x74, 0x9f, 0x2c, 0xd6, 0x80, 0x72, 0xe6, 0x76, 0xe6, 0x3f, 0xac, 0x6b, 0x98, 0xf4,
	0x1b, 0xb2, 0x1a, 0x82, 0xd2, 0x22, 0x37, 0x53, 0xa3, 0x9c, 0xf9, 0x8f, 0x29, 0x67, 0xe8, 0xf4,
	0x88, 0xac, 0x21, 0xfc, 0x59, 0x82, 0xd2, 0x7e, 0xc6, 0x75, 0x90, 0x00, 0x2a, 0x67, 0xc1, 0x58,
	0xac, 0xbb, 0xd3, 0xe3, 0xeb, 0x8e, 0x6a, 0x94, 0xf5, 0x2c, 0xdd, 0xae, 0x15, 0x1d, 0x91, 0x35,
	0x8d, 0x3c, 0x8a, 0x44, 0xe0, 0xab, 0x44, 0x44, 0x55, 0x33, 0x9c, 0x47, 0xe6, 0xd8, 0x43, 0xf7,
	0xd6, 0x2d, 0x70, 0xcf, 0x6a, 0xea, 0x1b, 0xcb, 0x64, 0x3d, 0x3d, 0xfb, 0x07, 0x3d, 0x25, 0xbd,
	0x88, 0x97, 0xa9, 0xf6, 0x45, 0x5e, 0xcd, 0xaf, 0x90, 0xb9, 0xd3, 0x35, 0x6e, 0x2f, 0xdc, 0xeb,
	0x51, 0x75, 0xcd, 0xec, 0x56, 0x7e, 0x27, 0x67, 0x67, 0xa7, 0x3f, 0x56, 0xfc, 0x9f, 0x1a, 0x3a,
	0x7b, 0x12, 0xcd, 0xac, 0xab, 0xb2, 0x6a, 0x91, 0x81, 0x2c, 0xb5, 0xb3, 0x68, 0xdb, 0x51, 0x5f,
	0x2a, 0xb7, 0xb9, 0x54, 0xee, 0x2b, 0x7b, 0xe9, 0x58, 0xc3, 0xa4, 0x07, 0x64, 0x11, 0x41, 0xa3,
	0x00, 0xe5, 0x2c, 0x19, 0xd1, 0xd6, 0x9d, 0xdb, 0x33, 0xd0, 0x78, 0xc5, 0x1a, 0x3a, 0x3d, 0x22,
	0x2b, 0x81, 0x44, 0xe5, 0x17, 0x32, 0x15, 0xc1, 0x95, 0x43, 0x8c, 0x7a, 0xbb, 0x55, 0xfd, 0xbd,
	0x44, 0x75, 0x6a, 0x68, 0x8c, 0x04, 0x93, 0x67, 0xba, 0x47, 0xba, 0x99, 0x40, 0x94, 0xe8, 0x2c,
	0x37, 0x79, 0xa7, 0x4b, 0xf8, 0xea, 0xba, 0x7f, 0xcc, 0x12, 0xe9, 0xaf, 0xa4, 0x9f, 0x00, 0x0f,
	0x01, 0xfd, 0x8c, 0xe7, 0xa2, 0x28, 0x53, 0x2e, 0x4c, 0xe9, 0x56, 0x8d, 0xc1, 0xa7, 0x2d, 0x8d,
	0x38, 0x31, 0xf4, 0x91, 0x65, 0x1b, 0xb3, 0x67, 0xc9, 0xcc, 0x7f, 0xc6, 0x61, 0xf8, 0x3b, 0xe9,
	0xdd, 0xe8, 0x19, 0xfd, 0xf9, 0xc6, 0xc8, 0x75, 0xcc, 0xbc, 0x7c, 0xd6, 0xb2, 0xc9, 0x2f, 0x20,
	0xe2, 0x44, 0x43, 0x38, 0x1d, 0x79, 0x46, 0x3b, 0x0c, 0xc9, 0xb3, 0x16, 0x12, 0xfd, 0x8a, 0x2c,
	0x95, 0x85, 0xd2, 0x08, 0x3c, 0xfb, 0xf8, 0x1d, 0x9a, 0x50, 0xe9, 0x06, 0xe9, 0x5e, 0x1a, 0x37,
	0x67, 0x6e, 0xa7, 0xb3, 0xfb, 0x98, 0xd9, 0xd5, 0xf0, 0xaf, 0x05, 0x42, 0x6f, 0x1f, 0x98, 0x7e,
	0x4d, 0x9e, 0x23, 0x64, 0x72, 0x0c, 0x3e, 0x82, 0x2a, 0x64, 0xae, 0xc0, 0xaf, 0x4b, 0xa0, 0x9c,
	0xd5, 0x9d, 0xf9, 0xdd, 0x65, 0xb6, 0x5e, 0xc3, 0xcc, 0xa2, 0xb5, 0x85, 0xa2, 0x6f, 0xc9, 0xf3,
	0xea, 0x25, 0x9c, 0x87, 0xb7, 0x75, 0x8f, 0x4d, 0x2d, 0x8e, 0xee, 0x55, 0x70, 0xf7, 0x3b, 0x63,
	0x72, 0xc3, 0xfd, 0x87, 0xbc, 0x1a, 0xa7, 0x75, 0xde, 0x86, 0xd1, 0x2f, 0xc9, 0xc6, 0x24, 0x71,
	0x7d, 0x6b, 0x9b, 0x8d, 0x9f, 0x98, 0xc0, 0xfd, 0x26, 0xb0, 0x01, 0x1b, 0x55, 0x49, 0x36, 0x26,
	0x79, 0x67, 0x55, 0x3d, 0x13, 0xf7, 0xdb, 0x87, 0xc5, 0x9d, 0xf6, 0xae, 0xd3, 0xf6, 0x79, 0x0b,
	0x34, 0x38, 0x21, 0x83, 0xbb, 0x4f, 0x48, 0xd7, 0xc8, 0xfc, 0x05, 0x5c, 0x99, 0xee, 0x2e, 0xb3,
	0xea, 0x91, 0xf6, 0xc9, 0xa3, 0x31, 0x4f, 0x4b, 0x30, 0xcd, 0x5b, 0x66, 0xf5, 0xe2, 0x70, 0xee,
	0xa0, 0x33, 0x78, 0x4d, 0x36, 0xef, 0xdc, 0xfc, 0x21, 0x46, 0xc3, 0x6d, 0xb2, 0x78, 0x0a, 0x18,
	0x40, 0xae, 0xaf, 0x49, 0x95, 0xb0, 0x63, 0x49, 0xc7, 0x2f, 0xff, 0xfe, 0x6f, 0xab, 0xf3, 0xdb,
	0x8b, 0x0f, 0x7e, 0xf1, 0x8b, 0x8b, 0xd8, 0x7e, 0x8b, 0xce, 0xbb, 0xe6, 0x15, 0xb2, 0xff, 0x3e,
	0x00, 0x00, 0xff, 0xff, 0xb3, 0x55, 0x42, 0xaf, 0x23, 0x08, 0x00, 0x00,
}
