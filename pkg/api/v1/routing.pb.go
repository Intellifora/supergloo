// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routing.proto

package v1 // import "github.com/solo-io/supergloo/pkg/api/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import v1 "github.com/solo-io/supergloo/pkg/api/external/gloo/v1"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// global routing config for a single mesh
type Routing struct {
	// users define routes here
	// routes can be assigned to services in the mesh, on the ingress, or both.
	// routes define http request matchers and the destinations (services inside or outside the mesh)
	// to which client requests are sent.
	// Routing features can be added for specific routes without needing to modify the client or service.
	// Features such as
	// - retries
	// - fault injection
	// - request mirroring (shadowing)
	// - cors
	// and more are configrable here.
	Routes               []*Route `protobuf:"bytes,1,rep,name=routes" json:"routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Routing) Reset()         { *m = Routing{} }
func (m *Routing) String() string { return proto.CompactTextString(m) }
func (*Routing) ProtoMessage()    {}
func (*Routing) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_5013e98e855c4cde, []int{0}
}
func (m *Routing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Routing.Unmarshal(m, b)
}
func (m *Routing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Routing.Marshal(b, m, deterministic)
}
func (dst *Routing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Routing.Merge(dst, src)
}
func (m *Routing) XXX_Size() int {
	return xxx_messageInfo_Routing.Size(m)
}
func (m *Routing) XXX_DiscardUnknown() {
	xxx_messageInfo_Routing.DiscardUnknown(m)
}

var xxx_messageInfo_Routing proto.InternalMessageInfo

func (m *Routing) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

// Rules for traffic to a particular destination. Applied to any traffic regardless of source,
// as long as the destination matches
type Route struct {
	// set to true if this route should be used for ingress traffic coming from outside the mesh
	EnabledForIngress bool `protobuf:"varint,20,opt,name=enabled_for_ingress,json=enabledForIngress,proto3" json:"enabled_for_ingress,omitempty"`
	// set to true if this route should apply to sidecars in the mesh
	EnabledForMesh bool `protobuf:"varint,21,opt,name=enabled_for_mesh,json=enabledForMesh,proto3" json:"enabled_for_mesh,omitempty"`
	// set these labels to apply this route to specific sidecars, selected by their labels
	// see https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	// note: if both options are diabled, this route will be inactive
	// TODO ilackarms: not implemented
	EnabledForLabels map[string]string `protobuf:"bytes,23,rep,name=enabled_for_labels,json=enabledForLabels" json:"enabled_for_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Domains to match on. E.g. `www.solo.io`
	// if empty this route will match requests for any domain.
	// wildcard domains such as `*.solo.io` are supported, as well as the special `*` domain
	// to match all domains
	Domains []string `protobuf:"bytes,22,rep,name=domains" json:"domains,omitempty"`
	// the set of attributes to match on http requests
	RequestMatchers []*v1.Matcher `protobuf:"bytes,1,rep,name=request_matchers,json=requestMatchers" json:"request_matchers,omitempty"`
	// the action to take when a request is matched
	// for now this is limited to routing requests to upstream
	// services
	Action *v1.RouteAction `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
	// Timeout for HTTP requests.
	Timeout *types.Duration `protobuf:"bytes,6,opt,name=timeout" json:"timeout,omitempty"`
	// Retry policy for HTTP requests.
	Retries *HTTPRetry `protobuf:"bytes,7,opt,name=retries" json:"retries,omitempty"`
	// Fault injection policy to apply on HTTP traffic at the client side.
	// Note that timeouts or retries will not be enabled when faults are
	// enabled on the client side.
	Fault *HTTPFaultInjection `protobuf:"bytes,8,opt,name=fault" json:"fault,omitempty"`
	// Mirror HTTP traffic to a another destination in addition to forwarding
	// the requests to the intended destination. Mirrored traffic is on a
	// best effort basis where the sidecar/gateway will not wait for the
	// mirrored cluster to respond before returning the response from the
	// original destination.  Statistics will be generated for the mirrored
	// destination.
	Mirror *v1.Destination `protobuf:"bytes,9,opt,name=mirror" json:"mirror,omitempty"`
	// Cross-Origin Resource Sharing policy (CORS). Refer to
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
	// for further details about cross origin resource sharing.
	CorsPolicy *CorsPolicy `protobuf:"bytes,10,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// HTTP headers to remove before returning a response to the caller.
	RemoveResponseHeaders []string `protobuf:"bytes,12,rep,name=remove_response_headers,json=removeResponseHeaders" json:"remove_response_headers,omitempty"`
	// Additional HTTP headers to add before returning a response to the
	// caller.
	AppendResponseHeaders map[string]string `protobuf:"bytes,13,rep,name=append_response_headers,json=appendResponseHeaders" json:"append_response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP headers to remove before forwarding a request to the
	// destination service.
	RemoveRequestHeaders []string `protobuf:"bytes,14,rep,name=remove_request_headers,json=removeRequestHeaders" json:"remove_request_headers,omitempty"`
	// Additional HTTP headers to add before forwarding a request to the
	// destination service.
	AppendRequestHeaders map[string]string `protobuf:"bytes,15,rep,name=append_request_headers,json=appendRequestHeaders" json:"append_request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_5013e98e855c4cde, []int{1}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (dst *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(dst, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetEnabledForIngress() bool {
	if m != nil {
		return m.EnabledForIngress
	}
	return false
}

func (m *Route) GetEnabledForMesh() bool {
	if m != nil {
		return m.EnabledForMesh
	}
	return false
}

func (m *Route) GetEnabledForLabels() map[string]string {
	if m != nil {
		return m.EnabledForLabels
	}
	return nil
}

func (m *Route) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *Route) GetRequestMatchers() []*v1.Matcher {
	if m != nil {
		return m.RequestMatchers
	}
	return nil
}

func (m *Route) GetAction() *v1.RouteAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *Route) GetTimeout() *types.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *Route) GetRetries() *HTTPRetry {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *Route) GetFault() *HTTPFaultInjection {
	if m != nil {
		return m.Fault
	}
	return nil
}

func (m *Route) GetMirror() *v1.Destination {
	if m != nil {
		return m.Mirror
	}
	return nil
}

func (m *Route) GetCorsPolicy() *CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *Route) GetRemoveResponseHeaders() []string {
	if m != nil {
		return m.RemoveResponseHeaders
	}
	return nil
}

func (m *Route) GetAppendResponseHeaders() map[string]string {
	if m != nil {
		return m.AppendResponseHeaders
	}
	return nil
}

func (m *Route) GetRemoveRequestHeaders() []string {
	if m != nil {
		return m.RemoveRequestHeaders
	}
	return nil
}

func (m *Route) GetAppendRequestHeaders() map[string]string {
	if m != nil {
		return m.AppendRequestHeaders
	}
	return nil
}

// Describes the retry policy to use when a HTTP request fails. For
// example, the following rule sets the maximum number of retries to 3 when
// calling ratings:v1 service, with a 2s timeout per retry attempt.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: ratings-route
// spec:
//   hosts:
//   - ratings.prod.svc.cluster.local
//   http:
//   - route:
//     - destination:
//         host: ratings.prod.svc.cluster.local
//         subset: v1
//     retries:
//       attempts: 3
//       perTryTimeout: 2s
// ```
//
type HTTPRetry struct {
	// REQUIRED. Number of retries for a given request. The interval
	// between retries will be determined automatically (25ms+). Actual
	// number of retries attempted depends on the httpReqTimeout.
	Attempts int32 `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.
	PerTryTimeout        *types.Duration `protobuf:"bytes,2,opt,name=per_try_timeout,json=perTryTimeout" json:"per_try_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HTTPRetry) Reset()         { *m = HTTPRetry{} }
func (m *HTTPRetry) String() string { return proto.CompactTextString(m) }
func (*HTTPRetry) ProtoMessage()    {}
func (*HTTPRetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_5013e98e855c4cde, []int{2}
}
func (m *HTTPRetry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPRetry.Unmarshal(m, b)
}
func (m *HTTPRetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPRetry.Marshal(b, m, deterministic)
}
func (dst *HTTPRetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPRetry.Merge(dst, src)
}
func (m *HTTPRetry) XXX_Size() int {
	return xxx_messageInfo_HTTPRetry.Size(m)
}
func (m *HTTPRetry) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPRetry.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPRetry proto.InternalMessageInfo

func (m *HTTPRetry) GetAttempts() int32 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

func (m *HTTPRetry) GetPerTryTimeout() *types.Duration {
	if m != nil {
		return m.PerTryTimeout
	}
	return nil
}

// Describes the Cross-Origin Resource Sharing (CORS) policy, for a given
// service. Refer to
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
// for further details about cross origin resource sharing. For example,
// the following rule restricts cross origin requests to those originating
// from example.com domain using HTTP POST/GET, and sets the
// Access-Control-Allow-Credentials header to false. In addition, it only
// exposes X-Foo-bar header and sets an expiry period of 1 day.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: ratings-route
// spec:
//   hosts:
//   - ratings.prod.svc.cluster.local
//   http:
//   - route:
//     - destination:
//         host: ratings.prod.svc.cluster.local
//         subset: v1
//     corsPolicy:
//       allowOrigin:
//       - example.com
//       allowMethods:
//       - POST
//       - GET
//       allowCredentials: false
//       allowHeaders:
//       - X-Foo-Bar
//       maxAge: "1d"
// ```
//
type CorsPolicy struct {
	// The list of origins that are allowed to perform CORS requests. The
	// content will be serialized into the Access-Control-Allow-Origin
	// header. Wildcard * will allow all origins.
	AllowOrigin []string `protobuf:"bytes,1,rep,name=allow_origin,json=allowOrigin" json:"allow_origin,omitempty"`
	// List of HTTP methods allowed to access the resource. The content will
	// be serialized into the Access-Control-Allow-Methods header.
	AllowMethods []string `protobuf:"bytes,2,rep,name=allow_methods,json=allowMethods" json:"allow_methods,omitempty"`
	// List of HTTP headers that can be used when requesting the
	// resource. Serialized to Access-Control-Allow-Headers header.
	AllowHeaders []string `protobuf:"bytes,3,rep,name=allow_headers,json=allowHeaders" json:"allow_headers,omitempty"`
	// A white list of HTTP headers that the browsers are allowed to
	// access. Serialized into Access-Control-Expose-Headers header.
	ExposeHeaders []string `protobuf:"bytes,4,rep,name=expose_headers,json=exposeHeaders" json:"expose_headers,omitempty"`
	// Specifies how long the the results of a preflight request can be
	// cached. Translates to the Access-Control-Max-Age header.
	MaxAge *types.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge" json:"max_age,omitempty"`
	// Indicates whether the caller is allowed to send the actual request
	// (not the preflight) using credentials. Translates to
	// Access-Control-Allow-Credentials header.
	AllowCredentials     *types.BoolValue `protobuf:"bytes,6,opt,name=allow_credentials,json=allowCredentials" json:"allow_credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CorsPolicy) Reset()         { *m = CorsPolicy{} }
func (m *CorsPolicy) String() string { return proto.CompactTextString(m) }
func (*CorsPolicy) ProtoMessage()    {}
func (*CorsPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_5013e98e855c4cde, []int{3}
}
func (m *CorsPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorsPolicy.Unmarshal(m, b)
}
func (m *CorsPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorsPolicy.Marshal(b, m, deterministic)
}
func (dst *CorsPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorsPolicy.Merge(dst, src)
}
func (m *CorsPolicy) XXX_Size() int {
	return xxx_messageInfo_CorsPolicy.Size(m)
}
func (m *CorsPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CorsPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CorsPolicy proto.InternalMessageInfo

func (m *CorsPolicy) GetAllowOrigin() []string {
	if m != nil {
		return m.AllowOrigin
	}
	return nil
}

func (m *CorsPolicy) GetAllowMethods() []string {
	if m != nil {
		return m.AllowMethods
	}
	return nil
}

func (m *CorsPolicy) GetAllowHeaders() []string {
	if m != nil {
		return m.AllowHeaders
	}
	return nil
}

func (m *CorsPolicy) GetExposeHeaders() []string {
	if m != nil {
		return m.ExposeHeaders
	}
	return nil
}

func (m *CorsPolicy) GetMaxAge() *types.Duration {
	if m != nil {
		return m.MaxAge
	}
	return nil
}

func (m *CorsPolicy) GetAllowCredentials() *types.BoolValue {
	if m != nil {
		return m.AllowCredentials
	}
	return nil
}

// HTTPFaultInjection can be used to specify one or more faults to inject
// while forwarding http requests to the destination specified in a route.
// Fault specification is part of a VirtualService rule. Faults include
// aborting the Http request from downstream service, and/or delaying
// proxying of requests. A fault rule MUST HAVE delay or abort or both.
//
// *Note:* Delay and abort faults are independent of one another, even if
// both are specified simultaneously.
type HTTPFaultInjection struct {
	// Delay requests before forwarding, emulating various failures such as
	// network issues, overloaded upstream service, etc.
	Delay *HTTPFaultInjection_Delay `protobuf:"bytes,1,opt,name=delay" json:"delay,omitempty"`
	// Abort Http request attempts and return error codes back to downstream
	// service, giving the impression that the upstream service is faulty.
	Abort                *HTTPFaultInjection_Abort `protobuf:"bytes,2,opt,name=abort" json:"abort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *HTTPFaultInjection) Reset()         { *m = HTTPFaultInjection{} }
func (m *HTTPFaultInjection) String() string { return proto.CompactTextString(m) }
func (*HTTPFaultInjection) ProtoMessage()    {}
func (*HTTPFaultInjection) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_5013e98e855c4cde, []int{4}
}
func (m *HTTPFaultInjection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPFaultInjection.Unmarshal(m, b)
}
func (m *HTTPFaultInjection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPFaultInjection.Marshal(b, m, deterministic)
}
func (dst *HTTPFaultInjection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPFaultInjection.Merge(dst, src)
}
func (m *HTTPFaultInjection) XXX_Size() int {
	return xxx_messageInfo_HTTPFaultInjection.Size(m)
}
func (m *HTTPFaultInjection) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPFaultInjection.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPFaultInjection proto.InternalMessageInfo

func (m *HTTPFaultInjection) GetDelay() *HTTPFaultInjection_Delay {
	if m != nil {
		return m.Delay
	}
	return nil
}

func (m *HTTPFaultInjection) GetAbort() *HTTPFaultInjection_Abort {
	if m != nil {
		return m.Abort
	}
	return nil
}

// Delay specification is used to inject latency into the request
// forwarding path. The following example will introduce a 5 second delay
// in 1 out of every 1000 requests to the "v1" version of the "reviews"
// service from all pods with label env: prod
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: reviews-route
// spec:
//   hosts:
//   - reviews.prod.svc.cluster.local
//   http:
//   - match:
//     - sourceLabels:
//         env: prod
//     route:
//     - destination:
//         host: reviews.prod.svc.cluster.local
//         subset: v1
//     fault:
//       delay:
//         percentage:
//           value: 0.001
//         fixedDelay: 5s
// ```
//
// The _fixedDelay_ field is used to indicate the amount of delay in seconds.
// The optional _percentage_ field can be used to only delay a certain
// percentage of requests. If left unspecified, all request will be delayed.
type HTTPFaultInjection_Delay struct {
	// Percentage of requests on which the delay will be injected (0-100).
	// Use of integer `percent` value is deprecated. Use the double `percentage`
	// field instead.
	Percent int32 `protobuf:"varint,1,opt,name=percent,proto3" json:"percent,omitempty"` // Deprecated: Do not use.
	// Types that are valid to be assigned to HttpDelayType:
	//	*HTTPFaultInjection_Delay_FixedDelay
	//	*HTTPFaultInjection_Delay_ExponentialDelay
	HttpDelayType isHTTPFaultInjection_Delay_HttpDelayType `protobuf_oneof:"http_delay_type"`
	// Percentage of requests on which the delay will be injected.
	Percentage           *Percent `protobuf:"bytes,5,opt,name=percentage" json:"percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPFaultInjection_Delay) Reset()         { *m = HTTPFaultInjection_Delay{} }
func (m *HTTPFaultInjection_Delay) String() string { return proto.CompactTextString(m) }
func (*HTTPFaultInjection_Delay) ProtoMessage()    {}
func (*HTTPFaultInjection_Delay) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_5013e98e855c4cde, []int{4, 0}
}
func (m *HTTPFaultInjection_Delay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPFaultInjection_Delay.Unmarshal(m, b)
}
func (m *HTTPFaultInjection_Delay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPFaultInjection_Delay.Marshal(b, m, deterministic)
}
func (dst *HTTPFaultInjection_Delay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPFaultInjection_Delay.Merge(dst, src)
}
func (m *HTTPFaultInjection_Delay) XXX_Size() int {
	return xxx_messageInfo_HTTPFaultInjection_Delay.Size(m)
}
func (m *HTTPFaultInjection_Delay) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPFaultInjection_Delay.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPFaultInjection_Delay proto.InternalMessageInfo

type isHTTPFaultInjection_Delay_HttpDelayType interface {
	isHTTPFaultInjection_Delay_HttpDelayType()
	Equal(interface{}) bool
}

type HTTPFaultInjection_Delay_FixedDelay struct {
	FixedDelay *types.Duration `protobuf:"bytes,2,opt,name=fixed_delay,json=fixedDelay,oneof"`
}
type HTTPFaultInjection_Delay_ExponentialDelay struct {
	ExponentialDelay *types.Duration `protobuf:"bytes,3,opt,name=exponential_delay,json=exponentialDelay,oneof"`
}

func (*HTTPFaultInjection_Delay_FixedDelay) isHTTPFaultInjection_Delay_HttpDelayType()       {}
func (*HTTPFaultInjection_Delay_ExponentialDelay) isHTTPFaultInjection_Delay_HttpDelayType() {}

func (m *HTTPFaultInjection_Delay) GetHttpDelayType() isHTTPFaultInjection_Delay_HttpDelayType {
	if m != nil {
		return m.HttpDelayType
	}
	return nil
}

// Deprecated: Do not use.
func (m *HTTPFaultInjection_Delay) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *HTTPFaultInjection_Delay) GetFixedDelay() *types.Duration {
	if x, ok := m.GetHttpDelayType().(*HTTPFaultInjection_Delay_FixedDelay); ok {
		return x.FixedDelay
	}
	return nil
}

func (m *HTTPFaultInjection_Delay) GetExponentialDelay() *types.Duration {
	if x, ok := m.GetHttpDelayType().(*HTTPFaultInjection_Delay_ExponentialDelay); ok {
		return x.ExponentialDelay
	}
	return nil
}

func (m *HTTPFaultInjection_Delay) GetPercentage() *Percent {
	if m != nil {
		return m.Percentage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HTTPFaultInjection_Delay) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HTTPFaultInjection_Delay_OneofMarshaler, _HTTPFaultInjection_Delay_OneofUnmarshaler, _HTTPFaultInjection_Delay_OneofSizer, []interface{}{
		(*HTTPFaultInjection_Delay_FixedDelay)(nil),
		(*HTTPFaultInjection_Delay_ExponentialDelay)(nil),
	}
}

func _HTTPFaultInjection_Delay_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HTTPFaultInjection_Delay)
	// http_delay_type
	switch x := m.HttpDelayType.(type) {
	case *HTTPFaultInjection_Delay_FixedDelay:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FixedDelay); err != nil {
			return err
		}
	case *HTTPFaultInjection_Delay_ExponentialDelay:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExponentialDelay); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HTTPFaultInjection_Delay.HttpDelayType has unexpected type %T", x)
	}
	return nil
}

func _HTTPFaultInjection_Delay_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HTTPFaultInjection_Delay)
	switch tag {
	case 2: // http_delay_type.fixed_delay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.Duration)
		err := b.DecodeMessage(msg)
		m.HttpDelayType = &HTTPFaultInjection_Delay_FixedDelay{msg}
		return true, err
	case 3: // http_delay_type.exponential_delay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.Duration)
		err := b.DecodeMessage(msg)
		m.HttpDelayType = &HTTPFaultInjection_Delay_ExponentialDelay{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HTTPFaultInjection_Delay_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HTTPFaultInjection_Delay)
	// http_delay_type
	switch x := m.HttpDelayType.(type) {
	case *HTTPFaultInjection_Delay_FixedDelay:
		s := proto.Size(x.FixedDelay)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HTTPFaultInjection_Delay_ExponentialDelay:
		s := proto.Size(x.ExponentialDelay)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Abort specification is used to prematurely abort a request with a
// pre-specified error code. The following example will return an HTTP 400
// error code for 1 out of every 1000 requests to the "ratings" service "v1".
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: ratings-route
// spec:
//   hosts:
//   - ratings.prod.svc.cluster.local
//   http:
//   - route:
//     - destination:
//         host: ratings.prod.svc.cluster.local
//         subset: v1
//     fault:
//       abort:
//         percentage:
//           value: 0.001
//         httpStatus: 400
// ```
//
// The _httpStatus_ field is used to indicate the HTTP status code to
// return to the caller. The optional _percentage_ field can be used to only
// abort a certain percentage of requests. If not specified, all requests are
// aborted.
type HTTPFaultInjection_Abort struct {
	// Percentage of requests to be aborted with the error code provided (0-100).
	// Use of integer `percent` value is deprecated. Use the double `percentage`
	// field instead.
	Percent int32 `protobuf:"varint,1,opt,name=percent,proto3" json:"percent,omitempty"` // Deprecated: Do not use.
	// Types that are valid to be assigned to ErrorType:
	//	*HTTPFaultInjection_Abort_HttpStatus
	//	*HTTPFaultInjection_Abort_GrpcStatus
	//	*HTTPFaultInjection_Abort_Http2Error
	ErrorType isHTTPFaultInjection_Abort_ErrorType `protobuf_oneof:"error_type"`
	// Percentage of requests to be aborted with the error code provided.
	Percentage           *Percent `protobuf:"bytes,5,opt,name=percentage" json:"percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPFaultInjection_Abort) Reset()         { *m = HTTPFaultInjection_Abort{} }
func (m *HTTPFaultInjection_Abort) String() string { return proto.CompactTextString(m) }
func (*HTTPFaultInjection_Abort) ProtoMessage()    {}
func (*HTTPFaultInjection_Abort) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_5013e98e855c4cde, []int{4, 1}
}
func (m *HTTPFaultInjection_Abort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPFaultInjection_Abort.Unmarshal(m, b)
}
func (m *HTTPFaultInjection_Abort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPFaultInjection_Abort.Marshal(b, m, deterministic)
}
func (dst *HTTPFaultInjection_Abort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPFaultInjection_Abort.Merge(dst, src)
}
func (m *HTTPFaultInjection_Abort) XXX_Size() int {
	return xxx_messageInfo_HTTPFaultInjection_Abort.Size(m)
}
func (m *HTTPFaultInjection_Abort) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPFaultInjection_Abort.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPFaultInjection_Abort proto.InternalMessageInfo

type isHTTPFaultInjection_Abort_ErrorType interface {
	isHTTPFaultInjection_Abort_ErrorType()
	Equal(interface{}) bool
}

type HTTPFaultInjection_Abort_HttpStatus struct {
	HttpStatus int32 `protobuf:"varint,2,opt,name=http_status,json=httpStatus,proto3,oneof"`
}
type HTTPFaultInjection_Abort_GrpcStatus struct {
	GrpcStatus string `protobuf:"bytes,3,opt,name=grpc_status,json=grpcStatus,proto3,oneof"`
}
type HTTPFaultInjection_Abort_Http2Error struct {
	Http2Error string `protobuf:"bytes,4,opt,name=http2_error,json=http2Error,proto3,oneof"`
}

func (*HTTPFaultInjection_Abort_HttpStatus) isHTTPFaultInjection_Abort_ErrorType() {}
func (*HTTPFaultInjection_Abort_GrpcStatus) isHTTPFaultInjection_Abort_ErrorType() {}
func (*HTTPFaultInjection_Abort_Http2Error) isHTTPFaultInjection_Abort_ErrorType() {}

func (m *HTTPFaultInjection_Abort) GetErrorType() isHTTPFaultInjection_Abort_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

// Deprecated: Do not use.
func (m *HTTPFaultInjection_Abort) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *HTTPFaultInjection_Abort) GetHttpStatus() int32 {
	if x, ok := m.GetErrorType().(*HTTPFaultInjection_Abort_HttpStatus); ok {
		return x.HttpStatus
	}
	return 0
}

func (m *HTTPFaultInjection_Abort) GetGrpcStatus() string {
	if x, ok := m.GetErrorType().(*HTTPFaultInjection_Abort_GrpcStatus); ok {
		return x.GrpcStatus
	}
	return ""
}

func (m *HTTPFaultInjection_Abort) GetHttp2Error() string {
	if x, ok := m.GetErrorType().(*HTTPFaultInjection_Abort_Http2Error); ok {
		return x.Http2Error
	}
	return ""
}

func (m *HTTPFaultInjection_Abort) GetPercentage() *Percent {
	if m != nil {
		return m.Percentage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HTTPFaultInjection_Abort) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HTTPFaultInjection_Abort_OneofMarshaler, _HTTPFaultInjection_Abort_OneofUnmarshaler, _HTTPFaultInjection_Abort_OneofSizer, []interface{}{
		(*HTTPFaultInjection_Abort_HttpStatus)(nil),
		(*HTTPFaultInjection_Abort_GrpcStatus)(nil),
		(*HTTPFaultInjection_Abort_Http2Error)(nil),
	}
}

func _HTTPFaultInjection_Abort_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HTTPFaultInjection_Abort)
	// error_type
	switch x := m.ErrorType.(type) {
	case *HTTPFaultInjection_Abort_HttpStatus:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.HttpStatus))
	case *HTTPFaultInjection_Abort_GrpcStatus:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.GrpcStatus)
	case *HTTPFaultInjection_Abort_Http2Error:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Http2Error)
	case nil:
	default:
		return fmt.Errorf("HTTPFaultInjection_Abort.ErrorType has unexpected type %T", x)
	}
	return nil
}

func _HTTPFaultInjection_Abort_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HTTPFaultInjection_Abort)
	switch tag {
	case 2: // error_type.http_status
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ErrorType = &HTTPFaultInjection_Abort_HttpStatus{int32(x)}
		return true, err
	case 3: // error_type.grpc_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ErrorType = &HTTPFaultInjection_Abort_GrpcStatus{x}
		return true, err
	case 4: // error_type.http2_error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ErrorType = &HTTPFaultInjection_Abort_Http2Error{x}
		return true, err
	default:
		return false, nil
	}
}

func _HTTPFaultInjection_Abort_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HTTPFaultInjection_Abort)
	// error_type
	switch x := m.ErrorType.(type) {
	case *HTTPFaultInjection_Abort_HttpStatus:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.HttpStatus))
	case *HTTPFaultInjection_Abort_GrpcStatus:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.GrpcStatus)))
		n += len(x.GrpcStatus)
	case *HTTPFaultInjection_Abort_Http2Error:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Http2Error)))
		n += len(x.Http2Error)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Percent specifies a percentage in the range of [0.0, 100.0].
type Percent struct {
	Value                float64  `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Percent) Reset()         { *m = Percent{} }
func (m *Percent) String() string { return proto.CompactTextString(m) }
func (*Percent) ProtoMessage()    {}
func (*Percent) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_5013e98e855c4cde, []int{5}
}
func (m *Percent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Percent.Unmarshal(m, b)
}
func (m *Percent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Percent.Marshal(b, m, deterministic)
}
func (dst *Percent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Percent.Merge(dst, src)
}
func (m *Percent) XXX_Size() int {
	return xxx_messageInfo_Percent.Size(m)
}
func (m *Percent) XXX_DiscardUnknown() {
	xxx_messageInfo_Percent.DiscardUnknown(m)
}

var xxx_messageInfo_Percent proto.InternalMessageInfo

func (m *Percent) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Routing)(nil), "supergloo.solo.io.Routing")
	proto.RegisterType((*Route)(nil), "supergloo.solo.io.Route")
	proto.RegisterMapType((map[string]string)(nil), "supergloo.solo.io.Route.AppendRequestHeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "supergloo.solo.io.Route.AppendResponseHeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "supergloo.solo.io.Route.EnabledForLabelsEntry")
	proto.RegisterType((*HTTPRetry)(nil), "supergloo.solo.io.HTTPRetry")
	proto.RegisterType((*CorsPolicy)(nil), "supergloo.solo.io.CorsPolicy")
	proto.RegisterType((*HTTPFaultInjection)(nil), "supergloo.solo.io.HTTPFaultInjection")
	proto.RegisterType((*HTTPFaultInjection_Delay)(nil), "supergloo.solo.io.HTTPFaultInjection.Delay")
	proto.RegisterType((*HTTPFaultInjection_Abort)(nil), "supergloo.solo.io.HTTPFaultInjection.Abort")
	proto.RegisterType((*Percent)(nil), "supergloo.solo.io.Percent")
}
func (this *Routing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Routing)
	if !ok {
		that2, ok := that.(Routing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Route) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route)
	if !ok {
		that2, ok := that.(Route)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EnabledForIngress != that1.EnabledForIngress {
		return false
	}
	if this.EnabledForMesh != that1.EnabledForMesh {
		return false
	}
	if len(this.EnabledForLabels) != len(that1.EnabledForLabels) {
		return false
	}
	for i := range this.EnabledForLabels {
		if this.EnabledForLabels[i] != that1.EnabledForLabels[i] {
			return false
		}
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.RequestMatchers) != len(that1.RequestMatchers) {
		return false
	}
	for i := range this.RequestMatchers {
		if !this.RequestMatchers[i].Equal(that1.RequestMatchers[i]) {
			return false
		}
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if !this.Timeout.Equal(that1.Timeout) {
		return false
	}
	if !this.Retries.Equal(that1.Retries) {
		return false
	}
	if !this.Fault.Equal(that1.Fault) {
		return false
	}
	if !this.Mirror.Equal(that1.Mirror) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if len(this.RemoveResponseHeaders) != len(that1.RemoveResponseHeaders) {
		return false
	}
	for i := range this.RemoveResponseHeaders {
		if this.RemoveResponseHeaders[i] != that1.RemoveResponseHeaders[i] {
			return false
		}
	}
	if len(this.AppendResponseHeaders) != len(that1.AppendResponseHeaders) {
		return false
	}
	for i := range this.AppendResponseHeaders {
		if this.AppendResponseHeaders[i] != that1.AppendResponseHeaders[i] {
			return false
		}
	}
	if len(this.RemoveRequestHeaders) != len(that1.RemoveRequestHeaders) {
		return false
	}
	for i := range this.RemoveRequestHeaders {
		if this.RemoveRequestHeaders[i] != that1.RemoveRequestHeaders[i] {
			return false
		}
	}
	if len(this.AppendRequestHeaders) != len(that1.AppendRequestHeaders) {
		return false
	}
	for i := range this.AppendRequestHeaders {
		if this.AppendRequestHeaders[i] != that1.AppendRequestHeaders[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HTTPRetry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPRetry)
	if !ok {
		that2, ok := that.(HTTPRetry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Attempts != that1.Attempts {
		return false
	}
	if !this.PerTryTimeout.Equal(that1.PerTryTimeout) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CorsPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CorsPolicy)
	if !ok {
		that2, ok := that.(CorsPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowOrigin) != len(that1.AllowOrigin) {
		return false
	}
	for i := range this.AllowOrigin {
		if this.AllowOrigin[i] != that1.AllowOrigin[i] {
			return false
		}
	}
	if len(this.AllowMethods) != len(that1.AllowMethods) {
		return false
	}
	for i := range this.AllowMethods {
		if this.AllowMethods[i] != that1.AllowMethods[i] {
			return false
		}
	}
	if len(this.AllowHeaders) != len(that1.AllowHeaders) {
		return false
	}
	for i := range this.AllowHeaders {
		if this.AllowHeaders[i] != that1.AllowHeaders[i] {
			return false
		}
	}
	if len(this.ExposeHeaders) != len(that1.ExposeHeaders) {
		return false
	}
	for i := range this.ExposeHeaders {
		if this.ExposeHeaders[i] != that1.ExposeHeaders[i] {
			return false
		}
	}
	if !this.MaxAge.Equal(that1.MaxAge) {
		return false
	}
	if !this.AllowCredentials.Equal(that1.AllowCredentials) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HTTPFaultInjection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection)
	if !ok {
		that2, ok := that.(HTTPFaultInjection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Delay.Equal(that1.Delay) {
		return false
	}
	if !this.Abort.Equal(that1.Abort) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Delay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Delay)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Delay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Percent != that1.Percent {
		return false
	}
	if that1.HttpDelayType == nil {
		if this.HttpDelayType != nil {
			return false
		}
	} else if this.HttpDelayType == nil {
		return false
	} else if !this.HttpDelayType.Equal(that1.HttpDelayType) {
		return false
	}
	if !this.Percentage.Equal(that1.Percentage) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Delay_FixedDelay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Delay_FixedDelay)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Delay_FixedDelay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FixedDelay.Equal(that1.FixedDelay) {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Delay_ExponentialDelay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Delay_ExponentialDelay)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Delay_ExponentialDelay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExponentialDelay.Equal(that1.ExponentialDelay) {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Abort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Abort)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Abort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Percent != that1.Percent {
		return false
	}
	if that1.ErrorType == nil {
		if this.ErrorType != nil {
			return false
		}
	} else if this.ErrorType == nil {
		return false
	} else if !this.ErrorType.Equal(that1.ErrorType) {
		return false
	}
	if !this.Percentage.Equal(that1.Percentage) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Abort_HttpStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Abort_HttpStatus)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Abort_HttpStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpStatus != that1.HttpStatus {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Abort_GrpcStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Abort_GrpcStatus)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Abort_GrpcStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GrpcStatus != that1.GrpcStatus {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Abort_Http2Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Abort_Http2Error)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Abort_Http2Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Http2Error != that1.Http2Error {
		return false
	}
	return true
}
func (this *Percent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Percent)
	if !ok {
		that2, ok := that.(Percent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("routing.proto", fileDescriptor_routing_5013e98e855c4cde) }

var fileDescriptor_routing_5013e98e855c4cde = []byte{
	// 1001 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xc7, 0x27, 0xa7, 0x8e, 0xe3, 0xe3, 0x7c, 0x38, 0x6c, 0x3e, 0x54, 0xa3, 0xeb, 0x52, 0x0f,
	0xc5, 0x0c, 0x0c, 0x95, 0x17, 0x67, 0x28, 0x86, 0x76, 0x18, 0xe6, 0x7c, 0xb4, 0x29, 0xb0, 0x60,
	0x01, 0x17, 0xec, 0x62, 0x18, 0x20, 0xd0, 0xf6, 0x89, 0xac, 0x46, 0x12, 0x35, 0x92, 0x4a, 0xe3,
	0x37, 0xd8, 0x4b, 0xec, 0x7e, 0x8f, 0xb4, 0xeb, 0x3d, 0xc3, 0x2e, 0x77, 0x31, 0x90, 0x94, 0x6c,
	0xb7, 0xb6, 0xe1, 0x16, 0xbb, 0x13, 0xcf, 0xf9, 0xfd, 0x0f, 0xcf, 0xe1, 0x39, 0xa4, 0x60, 0x43,
	0xf0, 0x4c, 0x85, 0x49, 0xe0, 0xa5, 0x82, 0x2b, 0x4e, 0xb6, 0x65, 0x96, 0xa2, 0x08, 0x22, 0xce,
	0x3d, 0xc9, 0x23, 0xee, 0x85, 0xbc, 0xb1, 0x13, 0xf0, 0x80, 0x1b, 0x6f, 0x5b, 0x7f, 0x59, 0xb0,
	0xf1, 0x28, 0xe0, 0x3c, 0x88, 0xb0, 0x6d, 0x56, 0xbd, 0xec, 0xba, 0x3d, 0xc8, 0x04, 0x53, 0x21,
	0x4f, 0x16, 0xf9, 0xdf, 0x0a, 0x96, 0xa6, 0x28, 0x64, 0xee, 0xbf, 0xaf, 0xf7, 0x68, 0xdf, 0x1e,
	0x6a, 0xe0, 0x6e, 0x64, 0x8d, 0xcd, 0x17, 0x50, 0xa1, 0x36, 0x1d, 0xf2, 0x15, 0xac, 0xea, 0xcc,
	0x50, 0xba, 0xce, 0xc1, 0x4a, 0xab, 0xd6, 0x71, 0xbd, 0x99, 0xcc, 0x3c, 0xcd, 0x22, 0xcd, 0xb9,
	0xe6, 0xef, 0x55, 0x28, 0x1b, 0x0b, 0xf1, 0xe0, 0x3e, 0x26, 0xac, 0x17, 0xe1, 0xc0, 0xbf, 0xe6,
	0xc2, 0x0f, 0x93, 0x40, 0xa0, 0x94, 0xee, 0xce, 0x81, 0xd3, 0x5a, 0xa3, 0xdb, 0xb9, 0xeb, 0x25,
	0x17, 0xaf, 0xad, 0x83, 0xb4, 0xa0, 0x3e, 0xcd, 0xc7, 0x28, 0x87, 0xee, 0xae, 0x81, 0x37, 0x27,
	0xf0, 0x05, 0xca, 0x21, 0xf9, 0x15, 0xc8, 0x34, 0x19, 0xb1, 0x1e, 0x46, 0xd2, 0xdd, 0x37, 0x19,
	0x7a, 0x8b, 0x32, 0xf4, 0xce, 0xc6, 0x41, 0x7e, 0x30, 0x82, 0xb3, 0x44, 0x89, 0x11, 0xad, 0xe3,
	0x7b, 0x66, 0xe2, 0x42, 0x65, 0xc0, 0x63, 0x16, 0x26, 0xd2, 0xdd, 0x3b, 0x58, 0x69, 0x55, 0x69,
	0xb1, 0x24, 0xdf, 0x43, 0x5d, 0xe0, 0x6f, 0x19, 0x4a, 0xe5, 0xc7, 0x4c, 0xf5, 0x87, 0x28, 0x8a,
	0x73, 0xd9, 0xf5, 0xde, 0xd9, 0xf0, 0xc2, 0x7a, 0xe9, 0x56, 0x8e, 0xe7, 0x6b, 0x49, 0x0e, 0x61,
	0x95, 0xf5, 0x75, 0x7f, 0xdc, 0xd2, 0x81, 0xd3, 0xaa, 0x75, 0x1e, 0x78, 0xb3, 0x89, 0x76, 0x0d,
	0x40, 0x73, 0x90, 0x1c, 0x41, 0x45, 0x85, 0x31, 0xf2, 0x4c, 0xb9, 0xab, 0x85, 0xc6, 0x34, 0xd5,
	0x2b, 0x9a, 0xea, 0x9d, 0xe6, 0x4d, 0xa7, 0x05, 0x49, 0x9e, 0x41, 0x45, 0xa0, 0x12, 0x21, 0x4a,
	0xb7, 0x62, 0x44, 0x0f, 0xe7, 0x1c, 0xcb, 0xf9, 0xd5, 0xd5, 0x25, 0x45, 0x7d, 0x08, 0x05, 0x4c,
	0x5e, 0x40, 0xf9, 0x9a, 0x65, 0x91, 0x72, 0xd7, 0x8c, 0xea, 0xc9, 0x02, 0xd5, 0x4b, 0xcd, 0xbc,
	0x4e, 0xde, 0xa0, 0x4d, 0xd5, 0x6a, 0x74, 0x71, 0x71, 0x28, 0x04, 0x17, 0x6e, 0x75, 0x5e, 0x71,
	0xa7, 0x28, 0x55, 0x98, 0xd8, 0x44, 0x73, 0x90, 0x7c, 0x07, 0xb5, 0x3e, 0x17, 0xd2, 0x4f, 0x79,
	0x14, 0xf6, 0x47, 0x2e, 0x18, 0xdd, 0xa7, 0x73, 0x76, 0x3d, 0xe1, 0x42, 0x5e, 0x1a, 0x88, 0x42,
	0x7f, 0xfc, 0x4d, 0x9e, 0xc1, 0xbe, 0xc0, 0x98, 0xdf, 0xa2, 0x2f, 0x50, 0xa6, 0x3c, 0x91, 0xe8,
	0x0f, 0x91, 0x0d, 0x74, 0x63, 0xd6, 0x4d, 0xef, 0x76, 0xad, 0x9b, 0xe6, 0xde, 0x73, 0xeb, 0x24,
	0x37, 0xb0, 0xaf, 0xef, 0x41, 0x32, 0x98, 0xd5, 0x6d, 0x98, 0x86, 0x1e, 0x2d, 0x1c, 0xa3, 0xae,
	0xd1, 0xbd, 0x17, 0xd0, 0xce, 0xd2, 0x2e, 0x9b, 0xe7, 0x23, 0x5f, 0xc3, 0xde, 0x38, 0x49, 0x3b,
	0x3d, 0xc5, 0x5e, 0x9b, 0x26, 0xc7, 0x9d, 0x22, 0x47, 0xe3, 0x2c, 0x54, 0x43, 0xd8, 0x1b, 0xa7,
	0xf8, 0xae, 0x6a, 0xcb, 0x64, 0xd8, 0x59, 0x9a, 0xe1, 0x74, 0x38, 0x9b, 0xe0, 0x0e, 0x9b, 0xe3,
	0x6a, 0x9c, 0xc0, 0xee, 0xdc, 0xbb, 0x41, 0xea, 0xb0, 0x72, 0x83, 0x23, 0xd7, 0x39, 0x70, 0x5a,
	0x55, 0xaa, 0x3f, 0xc9, 0x0e, 0x94, 0x6f, 0x59, 0x94, 0xa1, 0x19, 0xdf, 0x2a, 0xb5, 0x8b, 0xe7,
	0xa5, 0x6f, 0x9c, 0xc6, 0x39, 0x34, 0x16, 0x9f, 0xcc, 0x47, 0x45, 0x7a, 0x05, 0x0f, 0x16, 0x56,
	0xf0, 0x31, 0x81, 0x9a, 0x6f, 0xa0, 0x3a, 0x1e, 0x71, 0xd2, 0x80, 0x35, 0xa6, 0x14, 0xc6, 0xa9,
	0x92, 0x46, 0x5d, 0xa6, 0xe3, 0x35, 0xe9, 0xc2, 0x56, 0x8a, 0xc2, 0x57, 0x62, 0xe4, 0x17, 0x57,
	0xad, 0xb4, 0xec, 0xaa, 0x6d, 0xa4, 0x28, 0xae, 0xc4, 0xe8, 0xca, 0xf2, 0xcd, 0x3f, 0x4a, 0x00,
	0x93, 0x19, 0x25, 0x8f, 0x61, 0x9d, 0x45, 0x11, 0x7f, 0xeb, 0x73, 0x11, 0x06, 0x61, 0x62, 0x5e,
	0x89, 0x2a, 0xad, 0x19, 0xdb, 0x8f, 0xc6, 0x44, 0x3e, 0x87, 0x0d, 0x8b, 0xc4, 0xa8, 0x86, 0x7c,
	0x20, 0xdd, 0x92, 0x61, 0xac, 0xee, 0xc2, 0xda, 0x26, 0x50, 0xd1, 0xfb, 0x95, 0x29, 0xa8, 0x98,
	0x94, 0x27, 0xb0, 0x89, 0x77, 0x29, 0x9f, 0x9a, 0xe1, 0x7b, 0x86, 0xda, 0xb0, 0xd6, 0x02, 0xeb,
	0x40, 0x25, 0x66, 0x77, 0x3e, 0x0b, 0xd0, 0x2d, 0x2f, 0xab, 0x6e, 0x35, 0x66, 0x77, 0xdd, 0x00,
	0xc9, 0x2b, 0xd8, 0xb6, 0xfb, 0xf7, 0x05, 0x0e, 0x30, 0x51, 0x21, 0x8b, 0x64, 0xfe, 0x0c, 0x35,
	0x66, 0xd4, 0xc7, 0x9c, 0x47, 0x3f, 0xeb, 0xd3, 0xa7, 0x75, 0x23, 0x3a, 0x99, 0x68, 0x9a, 0xff,
	0xdc, 0x03, 0x32, 0xfb, 0x72, 0x90, 0x2e, 0x94, 0x07, 0x18, 0x31, 0xdb, 0xd0, 0x5a, 0xe7, 0xcb,
	0x0f, 0x7a, 0x6f, 0xbc, 0x53, 0x2d, 0xa1, 0x56, 0xa9, 0x43, 0xb0, 0x1e, 0x17, 0x45, 0xcb, 0x3e,
	0x30, 0x44, 0x57, 0x4b, 0xa8, 0x55, 0x36, 0xfe, 0x75, 0xa0, 0x6c, 0x62, 0x92, 0x87, 0x50, 0x49,
	0x51, 0xf4, 0x31, 0x51, 0x76, 0x48, 0x8e, 0x4b, 0xae, 0x43, 0x0b, 0x13, 0xf9, 0x16, 0x6a, 0xd7,
	0xe1, 0x1d, 0x0e, 0x7c, 0x9b, 0xf3, 0xb2, 0x19, 0x39, 0xff, 0x84, 0x82, 0xe1, 0x6d, 0xec, 0x73,
	0xd8, 0xd6, 0x0d, 0x49, 0xec, 0x91, 0xe4, 0x31, 0x56, 0x96, 0xc7, 0xa8, 0x4f, 0xa9, 0x6c, 0xa4,
	0xe7, 0x00, 0x79, 0x4a, 0x93, 0x66, 0x36, 0xe6, 0xd4, 0x7d, 0x69, 0x21, 0x3a, 0x45, 0x1f, 0x6f,
	0xc3, 0xd6, 0x50, 0xa9, 0xd4, 0x6e, 0xef, 0xab, 0x51, 0x8a, 0x8d, 0xbf, 0x1c, 0x28, 0x9b, 0xf3,
	0x58, 0x52, 0xfe, 0x63, 0xa8, 0x19, 0xa9, 0x54, 0x4c, 0x65, 0xd2, 0x94, 0x5f, 0xd6, 0x35, 0x6a,
	0xe3, 0x4f, 0xc6, 0xa6, 0x91, 0x40, 0xa4, 0xfd, 0x02, 0xd1, 0xd5, 0x55, 0x35, 0xa2, 0x8d, 0x13,
	0x44, 0x0b, 0x3a, 0x3e, 0x9a, 0x5f, 0xc5, 0xbd, 0x02, 0x31, 0xc6, 0x33, 0xf3, 0x57, 0xf8, 0x3f,
	0xf5, 0xad, 0x03, 0x98, 0xc0, 0xa6, 0xb4, 0xe6, 0x67, 0x50, 0xc9, 0xa1, 0xc9, 0x3b, 0xa1, 0x2b,
	0x73, 0xf2, 0x77, 0xe2, 0xf8, 0xe9, 0x9f, 0x7f, 0x3f, 0x72, 0x7e, 0xf9, 0x22, 0x08, 0xd5, 0x30,
	0xeb, 0x79, 0x7d, 0x1e, 0xb7, 0x75, 0xf0, 0xa7, 0x21, 0x6f, 0x8f, 0xb7, 0x6b, 0xa7, 0x37, 0x41,
	0x9b, 0xa5, 0x61, 0xfb, 0xf6, 0xb0, 0xb7, 0x6a, 0x1a, 0x74, 0xf4, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x7b, 0x08, 0x55, 0x04, 0xb0, 0x09, 0x00, 0x00,
}
