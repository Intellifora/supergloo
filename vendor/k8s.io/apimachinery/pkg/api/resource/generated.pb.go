// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/supergloo/vendor/k8s.io/apimachinery/pkg/api/resource/generated.proto

package resource

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Quantity is a fixed-point representation of a number.
// It provides convenient marshaling/unmarshaling in JSON and YAML,
// in addition to String() and Int64() accessors.
//
// The serialization format is:
//
// <quantity>        ::= <signedNumber><suffix>
//   (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
// <digit>           ::= 0 | 1 | ... | 9
// <digits>          ::= <digit> | <digit><digits>
// <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits>
// <sign>            ::= "+" | "-"
// <signedNumber>    ::= <number> | <sign><number>
// <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI>
// <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
//   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
// <decimalSI>       ::= m | "" | k | M | G | T | P | E
//   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
//
// No matter which of the three exponent forms is used, no quantity may represent
// a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
// places. Numbers larger or more precise will be capped or rounded up.
// (E.g.: 0.1m will rounded up to 1m.)
// This may be extended in the future if we require larger or smaller quantities.
//
// When a Quantity is parsed from a string, it will remember the type of suffix
// it had, and will use the same type again when it is serialized.
//
// Before serializing, Quantity will be put in "canonical form".
// This means that Exponent/suffix will be adjusted up or down (with a
// corresponding increase or decrease in Mantissa) such that:
//   a. No precision is lost
//   b. No fractional digits will be emitted
//   c. The exponent (or suffix) is as large as possible.
// The sign will be omitted unless the number is negative.
//
// Examples:
//   1.5 will be serialized as "1500m"
//   1.5Gi will be serialized as "1536Mi"
//
// Note that the quantity will NEVER be internally represented by a
// floating point number. That is the whole point of this exercise.
//
// Non-canonical values will still parse as long as they are well formed,
// but will be re-emitted in their canonical form. (So always use canonical
// form, or don't diff.)
//
// This format is intended to make it difficult to use these numbers without
// writing some sort of special handling code in the hopes that that will
// cause implementors to also use a fixed point implementation.
//
// +protobuf=true
// +protobuf.embed=string
// +protobuf.options.marshal=false
// +protobuf.options.(gogoproto.goproto_stringer)=false
// +k8s:deepcopy-gen=true
// +k8s:openapi-gen=true
type Quantity struct {
	String_              *string  `protobuf:"bytes,1,opt,name=string" json:"string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Quantity) Reset()         { *m = Quantity{} }
func (m *Quantity) String() string { return proto.CompactTextString(m) }
func (*Quantity) ProtoMessage()    {}
func (*Quantity) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_808957f05b5e480c, []int{0}
}
func (m *Quantity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Quantity.Unmarshal(m, b)
}
func (m *Quantity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Quantity.Marshal(b, m, deterministic)
}
func (dst *Quantity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quantity.Merge(dst, src)
}
func (m *Quantity) XXX_Size() int {
	return xxx_messageInfo_Quantity.Size(m)
}
func (m *Quantity) XXX_DiscardUnknown() {
	xxx_messageInfo_Quantity.DiscardUnknown(m)
}

var xxx_messageInfo_Quantity proto.InternalMessageInfo

func (m *Quantity) GetString_() string {
	if m != nil && m.String_ != nil {
		return *m.String_
	}
	return ""
}

func init() {
	proto.RegisterType((*Quantity)(nil), "k8s.io.apimachinery.pkg.api.resource.Quantity")
}

func init() {
	proto.RegisterFile("github.com/solo-io/supergloo/vendor/k8s.io/apimachinery/pkg/api/resource/generated.proto", fileDescriptor_generated_808957f05b5e480c)
}

var fileDescriptor_generated_808957f05b5e480c = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcb, 0xb1, 0x0a, 0xc2, 0x30,
	0x10, 0xc6, 0x71, 0xba, 0x48, 0xcd, 0xd8, 0x41, 0x1c, 0xa5, 0x38, 0xb8, 0x98, 0x5b, 0x9d, 0x7d,
	0x03, 0x9d, 0xc4, 0x2d, 0xb6, 0x47, 0x7a, 0xa4, 0xcd, 0x85, 0xcb, 0x45, 0xe8, 0xdb, 0x4b, 0xd1,
	0x82, 0xe3, 0xf7, 0xe7, 0xfb, 0x99, 0x87, 0x27, 0x1d, 0xca, 0xcb, 0x76, 0x3c, 0x41, 0xe6, 0x91,
	0xcf, 0xc4, 0x90, 0x4b, 0x42, 0xf1, 0x23, 0x33, 0xbc, 0x31, 0xf6, 0x2c, 0x10, 0x2e, 0xd9, 0x12,
	0x83, 0x4b, 0x34, 0xb9, 0x6e, 0xa0, 0x88, 0x32, 0x43, 0x0a, 0x7e, 0x09, 0x20, 0x98, 0xb9, 0x48,
	0x87, 0xe0, 0x31, 0xa2, 0x38, 0xc5, 0xde, 0x26, 0x61, 0xe5, 0xe6, 0xf8, 0x55, 0xf6, 0x5f, 0xd9,
	0x14, 0xfc, 0x12, 0xec, 0xaa, 0xda, 0xd6, 0xd4, 0xb7, 0xe2, 0xa2, 0x92, 0xce, 0xcd, 0xce, 0x6c,
	0xb2, 0x0a, 0x45, 0xbf, 0xaf, 0x0e, 0xd5, 0x69, 0x7b, 0xff, 0xad, 0xab, 0x79, 0xd6, 0xeb, 0xff,
	0x13, 0x00, 0x00, 0xff, 0xff, 0xda, 0x39, 0x91, 0x55, 0xb0, 0x00, 0x00, 0x00,
}
