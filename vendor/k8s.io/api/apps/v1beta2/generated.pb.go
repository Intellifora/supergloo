// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/supergloo/vendor/k8s.io/api/apps/v1beta2/generated.proto

package v1beta2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import v11 "k8s.io/api/core/v1"
import v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
import runtime "k8s.io/apimachinery/pkg/runtime"
import _ "k8s.io/apimachinery/pkg/runtime/schema"
import intstr "k8s.io/apimachinery/pkg/util/intstr"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// DEPRECATED - This group version of ControllerRevision is deprecated by apps/v1/ControllerRevision. See the
// release notes for more information.
// ControllerRevision implements an immutable snapshot of state data. Clients
// are responsible for serializing and deserializing the objects that contain
// their internal state.
// Once a ControllerRevision has been successfully created, it can not be updated.
// The API Server will fail validation of all requests that attempt to mutate
// the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both
// the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However,
// it may be subject to name and representation changes in future releases, and clients should not
// depend on its stability. It is primarily for internal use by controllers.
type ControllerRevision struct {
	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Data is the serialized representation of the state.
	Data *runtime.RawExtension `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	// Revision indicates the revision of the state represented by Data.
	Revision             *int64   `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControllerRevision) Reset()         { *m = ControllerRevision{} }
func (m *ControllerRevision) String() string { return proto.CompactTextString(m) }
func (*ControllerRevision) ProtoMessage()    {}
func (*ControllerRevision) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{0}
}
func (m *ControllerRevision) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerRevision.Unmarshal(m, b)
}
func (m *ControllerRevision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerRevision.Marshal(b, m, deterministic)
}
func (dst *ControllerRevision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerRevision.Merge(dst, src)
}
func (m *ControllerRevision) XXX_Size() int {
	return xxx_messageInfo_ControllerRevision.Size(m)
}
func (m *ControllerRevision) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerRevision.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerRevision proto.InternalMessageInfo

func (m *ControllerRevision) GetMetadata() *v1.ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ControllerRevision) GetData() *runtime.RawExtension {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ControllerRevision) GetRevision() int64 {
	if m != nil && m.Revision != nil {
		return *m.Revision
	}
	return 0
}

// ControllerRevisionList is a resource containing a list of ControllerRevision objects.
type ControllerRevisionList struct {
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Items is the list of ControllerRevisions
	Items                []*ControllerRevision `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ControllerRevisionList) Reset()         { *m = ControllerRevisionList{} }
func (m *ControllerRevisionList) String() string { return proto.CompactTextString(m) }
func (*ControllerRevisionList) ProtoMessage()    {}
func (*ControllerRevisionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{1}
}
func (m *ControllerRevisionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerRevisionList.Unmarshal(m, b)
}
func (m *ControllerRevisionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerRevisionList.Marshal(b, m, deterministic)
}
func (dst *ControllerRevisionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerRevisionList.Merge(dst, src)
}
func (m *ControllerRevisionList) XXX_Size() int {
	return xxx_messageInfo_ControllerRevisionList.Size(m)
}
func (m *ControllerRevisionList) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerRevisionList.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerRevisionList proto.InternalMessageInfo

func (m *ControllerRevisionList) GetMetadata() *v1.ListMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ControllerRevisionList) GetItems() []*ControllerRevision {
	if m != nil {
		return m.Items
	}
	return nil
}

// DEPRECATED - This group version of DaemonSet is deprecated by apps/v1/DaemonSet. See the release notes for
// more information.
// DaemonSet represents the configuration of a daemon set.
type DaemonSet struct {
	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// The desired behavior of this daemon set.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
	// +optional
	Spec *DaemonSetSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// The current status of this daemon set. This data may be
	// out of date by some window of time.
	// Populated by the system.
	// Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
	// +optional
	Status               *DaemonSetStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DaemonSet) Reset()         { *m = DaemonSet{} }
func (m *DaemonSet) String() string { return proto.CompactTextString(m) }
func (*DaemonSet) ProtoMessage()    {}
func (*DaemonSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{2}
}
func (m *DaemonSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaemonSet.Unmarshal(m, b)
}
func (m *DaemonSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaemonSet.Marshal(b, m, deterministic)
}
func (dst *DaemonSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaemonSet.Merge(dst, src)
}
func (m *DaemonSet) XXX_Size() int {
	return xxx_messageInfo_DaemonSet.Size(m)
}
func (m *DaemonSet) XXX_DiscardUnknown() {
	xxx_messageInfo_DaemonSet.DiscardUnknown(m)
}

var xxx_messageInfo_DaemonSet proto.InternalMessageInfo

func (m *DaemonSet) GetMetadata() *v1.ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DaemonSet) GetSpec() *DaemonSetSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *DaemonSet) GetStatus() *DaemonSetStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// DaemonSetCondition describes the state of a DaemonSet at a certain point.
type DaemonSetCondition struct {
	// Type of DaemonSet condition.
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	// Last time the condition transitioned from one status to another.
	// +optional
	LastTransitionTime *v1.Time `protobuf:"bytes,3,opt,name=lastTransitionTime" json:"lastTransitionTime,omitempty"`
	// The reason for the condition's last transition.
	// +optional
	Reason *string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
	// A human readable message indicating details about the transition.
	// +optional
	Message              *string  `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DaemonSetCondition) Reset()         { *m = DaemonSetCondition{} }
func (m *DaemonSetCondition) String() string { return proto.CompactTextString(m) }
func (*DaemonSetCondition) ProtoMessage()    {}
func (*DaemonSetCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{3}
}
func (m *DaemonSetCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaemonSetCondition.Unmarshal(m, b)
}
func (m *DaemonSetCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaemonSetCondition.Marshal(b, m, deterministic)
}
func (dst *DaemonSetCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaemonSetCondition.Merge(dst, src)
}
func (m *DaemonSetCondition) XXX_Size() int {
	return xxx_messageInfo_DaemonSetCondition.Size(m)
}
func (m *DaemonSetCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_DaemonSetCondition.DiscardUnknown(m)
}

var xxx_messageInfo_DaemonSetCondition proto.InternalMessageInfo

func (m *DaemonSetCondition) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *DaemonSetCondition) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *DaemonSetCondition) GetLastTransitionTime() *v1.Time {
	if m != nil {
		return m.LastTransitionTime
	}
	return nil
}

func (m *DaemonSetCondition) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *DaemonSetCondition) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// DaemonSetList is a collection of daemon sets.
type DaemonSetList struct {
	// Standard list metadata.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// A list of daemon sets.
	Items                []*DaemonSet `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DaemonSetList) Reset()         { *m = DaemonSetList{} }
func (m *DaemonSetList) String() string { return proto.CompactTextString(m) }
func (*DaemonSetList) ProtoMessage()    {}
func (*DaemonSetList) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{4}
}
func (m *DaemonSetList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaemonSetList.Unmarshal(m, b)
}
func (m *DaemonSetList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaemonSetList.Marshal(b, m, deterministic)
}
func (dst *DaemonSetList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaemonSetList.Merge(dst, src)
}
func (m *DaemonSetList) XXX_Size() int {
	return xxx_messageInfo_DaemonSetList.Size(m)
}
func (m *DaemonSetList) XXX_DiscardUnknown() {
	xxx_messageInfo_DaemonSetList.DiscardUnknown(m)
}

var xxx_messageInfo_DaemonSetList proto.InternalMessageInfo

func (m *DaemonSetList) GetMetadata() *v1.ListMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DaemonSetList) GetItems() []*DaemonSet {
	if m != nil {
		return m.Items
	}
	return nil
}

// DaemonSetSpec is the specification of a daemon set.
type DaemonSetSpec struct {
	// A label query over pods that are managed by the daemon set.
	// Must match in order to be controlled.
	// It must match the pod template's labels.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector *v1.LabelSelector `protobuf:"bytes,1,opt,name=selector" json:"selector,omitempty"`
	// An object that describes the pod that will be created.
	// The DaemonSet will create exactly one copy of this pod on every node
	// that matches the template's node selector (or on every node if no node
	// selector is specified).
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
	Template *v11.PodTemplateSpec `protobuf:"bytes,2,opt,name=template" json:"template,omitempty"`
	// An update strategy to replace existing DaemonSet pods with new pods.
	// +optional
	UpdateStrategy *DaemonSetUpdateStrategy `protobuf:"bytes,3,opt,name=updateStrategy" json:"updateStrategy,omitempty"`
	// The minimum number of seconds for which a newly created DaemonSet pod should
	// be ready without any of its container crashing, for it to be considered
	// available. Defaults to 0 (pod will be considered available as soon as it
	// is ready).
	// +optional
	MinReadySeconds *int32 `protobuf:"varint,4,opt,name=minReadySeconds" json:"minReadySeconds,omitempty"`
	// The number of old history to retain to allow rollback.
	// This is a pointer to distinguish between explicit zero and not specified.
	// Defaults to 10.
	// +optional
	RevisionHistoryLimit *int32   `protobuf:"varint,6,opt,name=revisionHistoryLimit" json:"revisionHistoryLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DaemonSetSpec) Reset()         { *m = DaemonSetSpec{} }
func (m *DaemonSetSpec) String() string { return proto.CompactTextString(m) }
func (*DaemonSetSpec) ProtoMessage()    {}
func (*DaemonSetSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{5}
}
func (m *DaemonSetSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaemonSetSpec.Unmarshal(m, b)
}
func (m *DaemonSetSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaemonSetSpec.Marshal(b, m, deterministic)
}
func (dst *DaemonSetSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaemonSetSpec.Merge(dst, src)
}
func (m *DaemonSetSpec) XXX_Size() int {
	return xxx_messageInfo_DaemonSetSpec.Size(m)
}
func (m *DaemonSetSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DaemonSetSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DaemonSetSpec proto.InternalMessageInfo

func (m *DaemonSetSpec) GetSelector() *v1.LabelSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *DaemonSetSpec) GetTemplate() *v11.PodTemplateSpec {
	if m != nil {
		return m.Template
	}
	return nil
}

func (m *DaemonSetSpec) GetUpdateStrategy() *DaemonSetUpdateStrategy {
	if m != nil {
		return m.UpdateStrategy
	}
	return nil
}

func (m *DaemonSetSpec) GetMinReadySeconds() int32 {
	if m != nil && m.MinReadySeconds != nil {
		return *m.MinReadySeconds
	}
	return 0
}

func (m *DaemonSetSpec) GetRevisionHistoryLimit() int32 {
	if m != nil && m.RevisionHistoryLimit != nil {
		return *m.RevisionHistoryLimit
	}
	return 0
}

// DaemonSetStatus represents the current status of a daemon set.
type DaemonSetStatus struct {
	// The number of nodes that are running at least 1
	// daemon pod and are supposed to run the daemon pod.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	CurrentNumberScheduled *int32 `protobuf:"varint,1,opt,name=currentNumberScheduled" json:"currentNumberScheduled,omitempty"`
	// The number of nodes that are running the daemon pod, but are
	// not supposed to run the daemon pod.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	NumberMisscheduled *int32 `protobuf:"varint,2,opt,name=numberMisscheduled" json:"numberMisscheduled,omitempty"`
	// The total number of nodes that should be running the daemon
	// pod (including nodes correctly running the daemon pod).
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	DesiredNumberScheduled *int32 `protobuf:"varint,3,opt,name=desiredNumberScheduled" json:"desiredNumberScheduled,omitempty"`
	// The number of nodes that should be running the daemon pod and have one
	// or more of the daemon pod running and ready.
	NumberReady *int32 `protobuf:"varint,4,opt,name=numberReady" json:"numberReady,omitempty"`
	// The most recent generation observed by the daemon set controller.
	// +optional
	ObservedGeneration *int64 `protobuf:"varint,5,opt,name=observedGeneration" json:"observedGeneration,omitempty"`
	// The total number of nodes that are running updated daemon pod
	// +optional
	UpdatedNumberScheduled *int32 `protobuf:"varint,6,opt,name=updatedNumberScheduled" json:"updatedNumberScheduled,omitempty"`
	// The number of nodes that should be running the
	// daemon pod and have one or more of the daemon pod running and
	// available (ready for at least spec.minReadySeconds)
	// +optional
	NumberAvailable *int32 `protobuf:"varint,7,opt,name=numberAvailable" json:"numberAvailable,omitempty"`
	// The number of nodes that should be running the
	// daemon pod and have none of the daemon pod running and available
	// (ready for at least spec.minReadySeconds)
	// +optional
	NumberUnavailable *int32 `protobuf:"varint,8,opt,name=numberUnavailable" json:"numberUnavailable,omitempty"`
	// Count of hash collisions for the DaemonSet. The DaemonSet controller
	// uses this field as a collision avoidance mechanism when it needs to
	// create the name for the newest ControllerRevision.
	// +optional
	CollisionCount *int32 `protobuf:"varint,9,opt,name=collisionCount" json:"collisionCount,omitempty"`
	// Represents the latest available observations of a DaemonSet's current state.
	// +optional
	// +patchMergeKey=type
	// +patchStrategy=merge
	Conditions           []*DaemonSetCondition `protobuf:"bytes,10,rep,name=conditions" json:"conditions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DaemonSetStatus) Reset()         { *m = DaemonSetStatus{} }
func (m *DaemonSetStatus) String() string { return proto.CompactTextString(m) }
func (*DaemonSetStatus) ProtoMessage()    {}
func (*DaemonSetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{6}
}
func (m *DaemonSetStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaemonSetStatus.Unmarshal(m, b)
}
func (m *DaemonSetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaemonSetStatus.Marshal(b, m, deterministic)
}
func (dst *DaemonSetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaemonSetStatus.Merge(dst, src)
}
func (m *DaemonSetStatus) XXX_Size() int {
	return xxx_messageInfo_DaemonSetStatus.Size(m)
}
func (m *DaemonSetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DaemonSetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DaemonSetStatus proto.InternalMessageInfo

func (m *DaemonSetStatus) GetCurrentNumberScheduled() int32 {
	if m != nil && m.CurrentNumberScheduled != nil {
		return *m.CurrentNumberScheduled
	}
	return 0
}

func (m *DaemonSetStatus) GetNumberMisscheduled() int32 {
	if m != nil && m.NumberMisscheduled != nil {
		return *m.NumberMisscheduled
	}
	return 0
}

func (m *DaemonSetStatus) GetDesiredNumberScheduled() int32 {
	if m != nil && m.DesiredNumberScheduled != nil {
		return *m.DesiredNumberScheduled
	}
	return 0
}

func (m *DaemonSetStatus) GetNumberReady() int32 {
	if m != nil && m.NumberReady != nil {
		return *m.NumberReady
	}
	return 0
}

func (m *DaemonSetStatus) GetObservedGeneration() int64 {
	if m != nil && m.ObservedGeneration != nil {
		return *m.ObservedGeneration
	}
	return 0
}

func (m *DaemonSetStatus) GetUpdatedNumberScheduled() int32 {
	if m != nil && m.UpdatedNumberScheduled != nil {
		return *m.UpdatedNumberScheduled
	}
	return 0
}

func (m *DaemonSetStatus) GetNumberAvailable() int32 {
	if m != nil && m.NumberAvailable != nil {
		return *m.NumberAvailable
	}
	return 0
}

func (m *DaemonSetStatus) GetNumberUnavailable() int32 {
	if m != nil && m.NumberUnavailable != nil {
		return *m.NumberUnavailable
	}
	return 0
}

func (m *DaemonSetStatus) GetCollisionCount() int32 {
	if m != nil && m.CollisionCount != nil {
		return *m.CollisionCount
	}
	return 0
}

func (m *DaemonSetStatus) GetConditions() []*DaemonSetCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

// DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
type DaemonSetUpdateStrategy struct {
	// Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
	// +optional
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Rolling update config params. Present only if type = "RollingUpdate".
	// ---
	// TODO: Update this to follow our convention for oneOf, whatever we decide it
	// to be. Same as Deployment `strategy.rollingUpdate`.
	// See https://github.com/kubernetes/kubernetes/issues/35345
	// +optional
	RollingUpdate        *RollingUpdateDaemonSet `protobuf:"bytes,2,opt,name=rollingUpdate" json:"rollingUpdate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DaemonSetUpdateStrategy) Reset()         { *m = DaemonSetUpdateStrategy{} }
func (m *DaemonSetUpdateStrategy) String() string { return proto.CompactTextString(m) }
func (*DaemonSetUpdateStrategy) ProtoMessage()    {}
func (*DaemonSetUpdateStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{7}
}
func (m *DaemonSetUpdateStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaemonSetUpdateStrategy.Unmarshal(m, b)
}
func (m *DaemonSetUpdateStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaemonSetUpdateStrategy.Marshal(b, m, deterministic)
}
func (dst *DaemonSetUpdateStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaemonSetUpdateStrategy.Merge(dst, src)
}
func (m *DaemonSetUpdateStrategy) XXX_Size() int {
	return xxx_messageInfo_DaemonSetUpdateStrategy.Size(m)
}
func (m *DaemonSetUpdateStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_DaemonSetUpdateStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_DaemonSetUpdateStrategy proto.InternalMessageInfo

func (m *DaemonSetUpdateStrategy) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *DaemonSetUpdateStrategy) GetRollingUpdate() *RollingUpdateDaemonSet {
	if m != nil {
		return m.RollingUpdate
	}
	return nil
}

// DEPRECATED - This group version of Deployment is deprecated by apps/v1/Deployment. See the release notes for
// more information.
// Deployment enables declarative updates for Pods and ReplicaSets.
type Deployment struct {
	// Standard object metadata.
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Specification of the desired behavior of the Deployment.
	// +optional
	Spec *DeploymentSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Most recently observed status of the Deployment.
	// +optional
	Status               *DeploymentStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Deployment) Reset()         { *m = Deployment{} }
func (m *Deployment) String() string { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()    {}
func (*Deployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{8}
}
func (m *Deployment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deployment.Unmarshal(m, b)
}
func (m *Deployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deployment.Marshal(b, m, deterministic)
}
func (dst *Deployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deployment.Merge(dst, src)
}
func (m *Deployment) XXX_Size() int {
	return xxx_messageInfo_Deployment.Size(m)
}
func (m *Deployment) XXX_DiscardUnknown() {
	xxx_messageInfo_Deployment.DiscardUnknown(m)
}

var xxx_messageInfo_Deployment proto.InternalMessageInfo

func (m *Deployment) GetMetadata() *v1.ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Deployment) GetSpec() *DeploymentSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Deployment) GetStatus() *DeploymentStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// DeploymentCondition describes the state of a deployment at a certain point.
type DeploymentCondition struct {
	// Type of deployment condition.
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	// The last time this condition was updated.
	LastUpdateTime *v1.Time `protobuf:"bytes,6,opt,name=lastUpdateTime" json:"lastUpdateTime,omitempty"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *v1.Time `protobuf:"bytes,7,opt,name=lastTransitionTime" json:"lastTransitionTime,omitempty"`
	// The reason for the condition's last transition.
	Reason *string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
	// A human readable message indicating details about the transition.
	Message              *string  `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeploymentCondition) Reset()         { *m = DeploymentCondition{} }
func (m *DeploymentCondition) String() string { return proto.CompactTextString(m) }
func (*DeploymentCondition) ProtoMessage()    {}
func (*DeploymentCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{9}
}
func (m *DeploymentCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeploymentCondition.Unmarshal(m, b)
}
func (m *DeploymentCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeploymentCondition.Marshal(b, m, deterministic)
}
func (dst *DeploymentCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentCondition.Merge(dst, src)
}
func (m *DeploymentCondition) XXX_Size() int {
	return xxx_messageInfo_DeploymentCondition.Size(m)
}
func (m *DeploymentCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentCondition.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentCondition proto.InternalMessageInfo

func (m *DeploymentCondition) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *DeploymentCondition) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *DeploymentCondition) GetLastUpdateTime() *v1.Time {
	if m != nil {
		return m.LastUpdateTime
	}
	return nil
}

func (m *DeploymentCondition) GetLastTransitionTime() *v1.Time {
	if m != nil {
		return m.LastTransitionTime
	}
	return nil
}

func (m *DeploymentCondition) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *DeploymentCondition) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// DeploymentList is a list of Deployments.
type DeploymentList struct {
	// Standard list metadata.
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Items is the list of Deployments.
	Items                []*Deployment `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeploymentList) Reset()         { *m = DeploymentList{} }
func (m *DeploymentList) String() string { return proto.CompactTextString(m) }
func (*DeploymentList) ProtoMessage()    {}
func (*DeploymentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{10}
}
func (m *DeploymentList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeploymentList.Unmarshal(m, b)
}
func (m *DeploymentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeploymentList.Marshal(b, m, deterministic)
}
func (dst *DeploymentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentList.Merge(dst, src)
}
func (m *DeploymentList) XXX_Size() int {
	return xxx_messageInfo_DeploymentList.Size(m)
}
func (m *DeploymentList) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentList.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentList proto.InternalMessageInfo

func (m *DeploymentList) GetMetadata() *v1.ListMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DeploymentList) GetItems() []*Deployment {
	if m != nil {
		return m.Items
	}
	return nil
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
type DeploymentSpec struct {
	// Number of desired pods. This is a pointer to distinguish between explicit
	// zero and not specified. Defaults to 1.
	// +optional
	Replicas *int32 `protobuf:"varint,1,opt,name=replicas" json:"replicas,omitempty"`
	// Label selector for pods. Existing ReplicaSets whose pods are
	// selected by this will be the ones affected by this deployment.
	// It must match the pod template's labels.
	Selector *v1.LabelSelector `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	// Template describes the pods that will be created.
	Template *v11.PodTemplateSpec `protobuf:"bytes,3,opt,name=template" json:"template,omitempty"`
	// The deployment strategy to use to replace existing pods with new ones.
	// +optional
	Strategy *DeploymentStrategy `protobuf:"bytes,4,opt,name=strategy" json:"strategy,omitempty"`
	// Minimum number of seconds for which a newly created pod should be ready
	// without any of its container crashing, for it to be considered available.
	// Defaults to 0 (pod will be considered available as soon as it is ready)
	// +optional
	MinReadySeconds *int32 `protobuf:"varint,5,opt,name=minReadySeconds" json:"minReadySeconds,omitempty"`
	// The number of old ReplicaSets to retain to allow rollback.
	// This is a pointer to distinguish between explicit zero and not specified.
	// Defaults to 10.
	// +optional
	RevisionHistoryLimit *int32 `protobuf:"varint,6,opt,name=revisionHistoryLimit" json:"revisionHistoryLimit,omitempty"`
	// Indicates that the deployment is paused.
	// +optional
	Paused *bool `protobuf:"varint,7,opt,name=paused" json:"paused,omitempty"`
	// The maximum time in seconds for a deployment to make progress before it
	// is considered to be failed. The deployment controller will continue to
	// process failed deployments and a condition with a ProgressDeadlineExceeded
	// reason will be surfaced in the deployment status. Note that progress will
	// not be estimated during the time a deployment is paused. Defaults to 600s.
	ProgressDeadlineSeconds *int32   `protobuf:"varint,9,opt,name=progressDeadlineSeconds" json:"progressDeadlineSeconds,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *DeploymentSpec) Reset()         { *m = DeploymentSpec{} }
func (m *DeploymentSpec) String() string { return proto.CompactTextString(m) }
func (*DeploymentSpec) ProtoMessage()    {}
func (*DeploymentSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{11}
}
func (m *DeploymentSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeploymentSpec.Unmarshal(m, b)
}
func (m *DeploymentSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeploymentSpec.Marshal(b, m, deterministic)
}
func (dst *DeploymentSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentSpec.Merge(dst, src)
}
func (m *DeploymentSpec) XXX_Size() int {
	return xxx_messageInfo_DeploymentSpec.Size(m)
}
func (m *DeploymentSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentSpec proto.InternalMessageInfo

func (m *DeploymentSpec) GetReplicas() int32 {
	if m != nil && m.Replicas != nil {
		return *m.Replicas
	}
	return 0
}

func (m *DeploymentSpec) GetSelector() *v1.LabelSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *DeploymentSpec) GetTemplate() *v11.PodTemplateSpec {
	if m != nil {
		return m.Template
	}
	return nil
}

func (m *DeploymentSpec) GetStrategy() *DeploymentStrategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (m *DeploymentSpec) GetMinReadySeconds() int32 {
	if m != nil && m.MinReadySeconds != nil {
		return *m.MinReadySeconds
	}
	return 0
}

func (m *DeploymentSpec) GetRevisionHistoryLimit() int32 {
	if m != nil && m.RevisionHistoryLimit != nil {
		return *m.RevisionHistoryLimit
	}
	return 0
}

func (m *DeploymentSpec) GetPaused() bool {
	if m != nil && m.Paused != nil {
		return *m.Paused
	}
	return false
}

func (m *DeploymentSpec) GetProgressDeadlineSeconds() int32 {
	if m != nil && m.ProgressDeadlineSeconds != nil {
		return *m.ProgressDeadlineSeconds
	}
	return 0
}

// DeploymentStatus is the most recently observed status of the Deployment.
type DeploymentStatus struct {
	// The generation observed by the deployment controller.
	// +optional
	ObservedGeneration *int64 `protobuf:"varint,1,opt,name=observedGeneration" json:"observedGeneration,omitempty"`
	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	// +optional
	Replicas *int32 `protobuf:"varint,2,opt,name=replicas" json:"replicas,omitempty"`
	// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
	// +optional
	UpdatedReplicas *int32 `protobuf:"varint,3,opt,name=updatedReplicas" json:"updatedReplicas,omitempty"`
	// Total number of ready pods targeted by this deployment.
	// +optional
	ReadyReplicas *int32 `protobuf:"varint,7,opt,name=readyReplicas" json:"readyReplicas,omitempty"`
	// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
	// +optional
	AvailableReplicas *int32 `protobuf:"varint,4,opt,name=availableReplicas" json:"availableReplicas,omitempty"`
	// Total number of unavailable pods targeted by this deployment. This is the total number of
	// pods that are still required for the deployment to have 100% available capacity. They may
	// either be pods that are running but not yet available or pods that still have not been created.
	// +optional
	UnavailableReplicas *int32 `protobuf:"varint,5,opt,name=unavailableReplicas" json:"unavailableReplicas,omitempty"`
	// Represents the latest available observations of a deployment's current state.
	// +patchMergeKey=type
	// +patchStrategy=merge
	Conditions []*DeploymentCondition `protobuf:"bytes,6,rep,name=conditions" json:"conditions,omitempty"`
	// Count of hash collisions for the Deployment. The Deployment controller uses this
	// field as a collision avoidance mechanism when it needs to create the name for the
	// newest ReplicaSet.
	// +optional
	CollisionCount       *int32   `protobuf:"varint,8,opt,name=collisionCount" json:"collisionCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeploymentStatus) Reset()         { *m = DeploymentStatus{} }
func (m *DeploymentStatus) String() string { return proto.CompactTextString(m) }
func (*DeploymentStatus) ProtoMessage()    {}
func (*DeploymentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{12}
}
func (m *DeploymentStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeploymentStatus.Unmarshal(m, b)
}
func (m *DeploymentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeploymentStatus.Marshal(b, m, deterministic)
}
func (dst *DeploymentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentStatus.Merge(dst, src)
}
func (m *DeploymentStatus) XXX_Size() int {
	return xxx_messageInfo_DeploymentStatus.Size(m)
}
func (m *DeploymentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentStatus proto.InternalMessageInfo

func (m *DeploymentStatus) GetObservedGeneration() int64 {
	if m != nil && m.ObservedGeneration != nil {
		return *m.ObservedGeneration
	}
	return 0
}

func (m *DeploymentStatus) GetReplicas() int32 {
	if m != nil && m.Replicas != nil {
		return *m.Replicas
	}
	return 0
}

func (m *DeploymentStatus) GetUpdatedReplicas() int32 {
	if m != nil && m.UpdatedReplicas != nil {
		return *m.UpdatedReplicas
	}
	return 0
}

func (m *DeploymentStatus) GetReadyReplicas() int32 {
	if m != nil && m.ReadyReplicas != nil {
		return *m.ReadyReplicas
	}
	return 0
}

func (m *DeploymentStatus) GetAvailableReplicas() int32 {
	if m != nil && m.AvailableReplicas != nil {
		return *m.AvailableReplicas
	}
	return 0
}

func (m *DeploymentStatus) GetUnavailableReplicas() int32 {
	if m != nil && m.UnavailableReplicas != nil {
		return *m.UnavailableReplicas
	}
	return 0
}

func (m *DeploymentStatus) GetConditions() []*DeploymentCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *DeploymentStatus) GetCollisionCount() int32 {
	if m != nil && m.CollisionCount != nil {
		return *m.CollisionCount
	}
	return 0
}

// DeploymentStrategy describes how to replace existing pods with new ones.
type DeploymentStrategy struct {
	// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
	// +optional
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Rolling update config params. Present only if DeploymentStrategyType =
	// RollingUpdate.
	// ---
	// TODO: Update this to follow our convention for oneOf, whatever we decide it
	// to be.
	// +optional
	RollingUpdate        *RollingUpdateDeployment `protobuf:"bytes,2,opt,name=rollingUpdate" json:"rollingUpdate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DeploymentStrategy) Reset()         { *m = DeploymentStrategy{} }
func (m *DeploymentStrategy) String() string { return proto.CompactTextString(m) }
func (*DeploymentStrategy) ProtoMessage()    {}
func (*DeploymentStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{13}
}
func (m *DeploymentStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeploymentStrategy.Unmarshal(m, b)
}
func (m *DeploymentStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeploymentStrategy.Marshal(b, m, deterministic)
}
func (dst *DeploymentStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentStrategy.Merge(dst, src)
}
func (m *DeploymentStrategy) XXX_Size() int {
	return xxx_messageInfo_DeploymentStrategy.Size(m)
}
func (m *DeploymentStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentStrategy proto.InternalMessageInfo

func (m *DeploymentStrategy) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *DeploymentStrategy) GetRollingUpdate() *RollingUpdateDeployment {
	if m != nil {
		return m.RollingUpdate
	}
	return nil
}

// DEPRECATED - This group version of ReplicaSet is deprecated by apps/v1/ReplicaSet. See the release notes for
// more information.
// ReplicaSet ensures that a specified number of pod replicas are running at any given time.
type ReplicaSet struct {
	// If the Labels of a ReplicaSet are empty, they are defaulted to
	// be the same as the Pod(s) that the ReplicaSet manages.
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Spec defines the specification of the desired behavior of the ReplicaSet.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
	// +optional
	Spec *ReplicaSetSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Status is the most recently observed status of the ReplicaSet.
	// This data may be out of date by some window of time.
	// Populated by the system.
	// Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
	// +optional
	Status               *ReplicaSetStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReplicaSet) Reset()         { *m = ReplicaSet{} }
func (m *ReplicaSet) String() string { return proto.CompactTextString(m) }
func (*ReplicaSet) ProtoMessage()    {}
func (*ReplicaSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{14}
}
func (m *ReplicaSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicaSet.Unmarshal(m, b)
}
func (m *ReplicaSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicaSet.Marshal(b, m, deterministic)
}
func (dst *ReplicaSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaSet.Merge(dst, src)
}
func (m *ReplicaSet) XXX_Size() int {
	return xxx_messageInfo_ReplicaSet.Size(m)
}
func (m *ReplicaSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaSet.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaSet proto.InternalMessageInfo

func (m *ReplicaSet) GetMetadata() *v1.ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ReplicaSet) GetSpec() *ReplicaSetSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ReplicaSet) GetStatus() *ReplicaSetStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// ReplicaSetCondition describes the state of a replica set at a certain point.
type ReplicaSetCondition struct {
	// Type of replica set condition.
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	// The last time the condition transitioned from one status to another.
	// +optional
	LastTransitionTime *v1.Time `protobuf:"bytes,3,opt,name=lastTransitionTime" json:"lastTransitionTime,omitempty"`
	// The reason for the condition's last transition.
	// +optional
	Reason *string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
	// A human readable message indicating details about the transition.
	// +optional
	Message              *string  `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplicaSetCondition) Reset()         { *m = ReplicaSetCondition{} }
func (m *ReplicaSetCondition) String() string { return proto.CompactTextString(m) }
func (*ReplicaSetCondition) ProtoMessage()    {}
func (*ReplicaSetCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{15}
}
func (m *ReplicaSetCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicaSetCondition.Unmarshal(m, b)
}
func (m *ReplicaSetCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicaSetCondition.Marshal(b, m, deterministic)
}
func (dst *ReplicaSetCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaSetCondition.Merge(dst, src)
}
func (m *ReplicaSetCondition) XXX_Size() int {
	return xxx_messageInfo_ReplicaSetCondition.Size(m)
}
func (m *ReplicaSetCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaSetCondition.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaSetCondition proto.InternalMessageInfo

func (m *ReplicaSetCondition) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *ReplicaSetCondition) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *ReplicaSetCondition) GetLastTransitionTime() *v1.Time {
	if m != nil {
		return m.LastTransitionTime
	}
	return nil
}

func (m *ReplicaSetCondition) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *ReplicaSetCondition) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// ReplicaSetList is a collection of ReplicaSets.
type ReplicaSetList struct {
	// Standard list metadata.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// List of ReplicaSets.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
	Items                []*ReplicaSet `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReplicaSetList) Reset()         { *m = ReplicaSetList{} }
func (m *ReplicaSetList) String() string { return proto.CompactTextString(m) }
func (*ReplicaSetList) ProtoMessage()    {}
func (*ReplicaSetList) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{16}
}
func (m *ReplicaSetList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicaSetList.Unmarshal(m, b)
}
func (m *ReplicaSetList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicaSetList.Marshal(b, m, deterministic)
}
func (dst *ReplicaSetList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaSetList.Merge(dst, src)
}
func (m *ReplicaSetList) XXX_Size() int {
	return xxx_messageInfo_ReplicaSetList.Size(m)
}
func (m *ReplicaSetList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaSetList.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaSetList proto.InternalMessageInfo

func (m *ReplicaSetList) GetMetadata() *v1.ListMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ReplicaSetList) GetItems() []*ReplicaSet {
	if m != nil {
		return m.Items
	}
	return nil
}

// ReplicaSetSpec is the specification of a ReplicaSet.
type ReplicaSetSpec struct {
	// Replicas is the number of desired replicas.
	// This is a pointer to distinguish between explicit zero and unspecified.
	// Defaults to 1.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
	// +optional
	Replicas *int32 `protobuf:"varint,1,opt,name=replicas" json:"replicas,omitempty"`
	// Minimum number of seconds for which a newly created pod should be ready
	// without any of its container crashing, for it to be considered available.
	// Defaults to 0 (pod will be considered available as soon as it is ready)
	// +optional
	MinReadySeconds *int32 `protobuf:"varint,4,opt,name=minReadySeconds" json:"minReadySeconds,omitempty"`
	// Selector is a label query over pods that should match the replica count.
	// Label keys and values that must match in order to be controlled by this replica set.
	// It must match the pod template's labels.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector *v1.LabelSelector `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	// Template is the object that describes the pod that will be created if
	// insufficient replicas are detected.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
	// +optional
	Template             *v11.PodTemplateSpec `protobuf:"bytes,3,opt,name=template" json:"template,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReplicaSetSpec) Reset()         { *m = ReplicaSetSpec{} }
func (m *ReplicaSetSpec) String() string { return proto.CompactTextString(m) }
func (*ReplicaSetSpec) ProtoMessage()    {}
func (*ReplicaSetSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{17}
}
func (m *ReplicaSetSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicaSetSpec.Unmarshal(m, b)
}
func (m *ReplicaSetSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicaSetSpec.Marshal(b, m, deterministic)
}
func (dst *ReplicaSetSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaSetSpec.Merge(dst, src)
}
func (m *ReplicaSetSpec) XXX_Size() int {
	return xxx_messageInfo_ReplicaSetSpec.Size(m)
}
func (m *ReplicaSetSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaSetSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaSetSpec proto.InternalMessageInfo

func (m *ReplicaSetSpec) GetReplicas() int32 {
	if m != nil && m.Replicas != nil {
		return *m.Replicas
	}
	return 0
}

func (m *ReplicaSetSpec) GetMinReadySeconds() int32 {
	if m != nil && m.MinReadySeconds != nil {
		return *m.MinReadySeconds
	}
	return 0
}

func (m *ReplicaSetSpec) GetSelector() *v1.LabelSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *ReplicaSetSpec) GetTemplate() *v11.PodTemplateSpec {
	if m != nil {
		return m.Template
	}
	return nil
}

// ReplicaSetStatus represents the current status of a ReplicaSet.
type ReplicaSetStatus struct {
	// Replicas is the most recently oberved number of replicas.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
	Replicas *int32 `protobuf:"varint,1,opt,name=replicas" json:"replicas,omitempty"`
	// The number of pods that have labels matching the labels of the pod template of the replicaset.
	// +optional
	FullyLabeledReplicas *int32 `protobuf:"varint,2,opt,name=fullyLabeledReplicas" json:"fullyLabeledReplicas,omitempty"`
	// The number of ready replicas for this replica set.
	// +optional
	ReadyReplicas *int32 `protobuf:"varint,4,opt,name=readyReplicas" json:"readyReplicas,omitempty"`
	// The number of available replicas (ready for at least minReadySeconds) for this replica set.
	// +optional
	AvailableReplicas *int32 `protobuf:"varint,5,opt,name=availableReplicas" json:"availableReplicas,omitempty"`
	// ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
	// +optional
	ObservedGeneration *int64 `protobuf:"varint,3,opt,name=observedGeneration" json:"observedGeneration,omitempty"`
	// Represents the latest available observations of a replica set's current state.
	// +optional
	// +patchMergeKey=type
	// +patchStrategy=merge
	Conditions           []*ReplicaSetCondition `protobuf:"bytes,6,rep,name=conditions" json:"conditions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ReplicaSetStatus) Reset()         { *m = ReplicaSetStatus{} }
func (m *ReplicaSetStatus) String() string { return proto.CompactTextString(m) }
func (*ReplicaSetStatus) ProtoMessage()    {}
func (*ReplicaSetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{18}
}
func (m *ReplicaSetStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicaSetStatus.Unmarshal(m, b)
}
func (m *ReplicaSetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicaSetStatus.Marshal(b, m, deterministic)
}
func (dst *ReplicaSetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaSetStatus.Merge(dst, src)
}
func (m *ReplicaSetStatus) XXX_Size() int {
	return xxx_messageInfo_ReplicaSetStatus.Size(m)
}
func (m *ReplicaSetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaSetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaSetStatus proto.InternalMessageInfo

func (m *ReplicaSetStatus) GetReplicas() int32 {
	if m != nil && m.Replicas != nil {
		return *m.Replicas
	}
	return 0
}

func (m *ReplicaSetStatus) GetFullyLabeledReplicas() int32 {
	if m != nil && m.FullyLabeledReplicas != nil {
		return *m.FullyLabeledReplicas
	}
	return 0
}

func (m *ReplicaSetStatus) GetReadyReplicas() int32 {
	if m != nil && m.ReadyReplicas != nil {
		return *m.ReadyReplicas
	}
	return 0
}

func (m *ReplicaSetStatus) GetAvailableReplicas() int32 {
	if m != nil && m.AvailableReplicas != nil {
		return *m.AvailableReplicas
	}
	return 0
}

func (m *ReplicaSetStatus) GetObservedGeneration() int64 {
	if m != nil && m.ObservedGeneration != nil {
		return *m.ObservedGeneration
	}
	return 0
}

func (m *ReplicaSetStatus) GetConditions() []*ReplicaSetCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

// Spec to control the desired behavior of daemon set rolling update.
type RollingUpdateDaemonSet struct {
	// The maximum number of DaemonSet pods that can be unavailable during the
	// update. Value can be an absolute number (ex: 5) or a percentage of total
	// number of DaemonSet pods at the start of the update (ex: 10%). Absolute
	// number is calculated from percentage by rounding up.
	// This cannot be 0.
	// Default value is 1.
	// Example: when this is set to 30%, at most 30% of the total number of nodes
	// that should be running the daemon pod (i.e. status.desiredNumberScheduled)
	// can have their pods stopped for an update at any given
	// time. The update starts by stopping at most 30% of those DaemonSet pods
	// and then brings up new DaemonSet pods in their place. Once the new pods
	// are available, it then proceeds onto other DaemonSet pods, thus ensuring
	// that at least 70% of original number of DaemonSet pods are available at
	// all times during the update.
	// +optional
	MaxUnavailable       *intstr.IntOrString `protobuf:"bytes,1,opt,name=maxUnavailable" json:"maxUnavailable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RollingUpdateDaemonSet) Reset()         { *m = RollingUpdateDaemonSet{} }
func (m *RollingUpdateDaemonSet) String() string { return proto.CompactTextString(m) }
func (*RollingUpdateDaemonSet) ProtoMessage()    {}
func (*RollingUpdateDaemonSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{19}
}
func (m *RollingUpdateDaemonSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollingUpdateDaemonSet.Unmarshal(m, b)
}
func (m *RollingUpdateDaemonSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollingUpdateDaemonSet.Marshal(b, m, deterministic)
}
func (dst *RollingUpdateDaemonSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollingUpdateDaemonSet.Merge(dst, src)
}
func (m *RollingUpdateDaemonSet) XXX_Size() int {
	return xxx_messageInfo_RollingUpdateDaemonSet.Size(m)
}
func (m *RollingUpdateDaemonSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RollingUpdateDaemonSet.DiscardUnknown(m)
}

var xxx_messageInfo_RollingUpdateDaemonSet proto.InternalMessageInfo

func (m *RollingUpdateDaemonSet) GetMaxUnavailable() *intstr.IntOrString {
	if m != nil {
		return m.MaxUnavailable
	}
	return nil
}

// Spec to control the desired behavior of rolling update.
type RollingUpdateDeployment struct {
	// The maximum number of pods that can be unavailable during the update.
	// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
	// Absolute number is calculated from percentage by rounding down.
	// This can not be 0 if MaxSurge is 0.
	// Defaults to 25%.
	// Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods
	// immediately when the rolling update starts. Once new pods are ready, old ReplicaSet
	// can be scaled down further, followed by scaling up the new ReplicaSet, ensuring
	// that the total number of pods available at all times during the update is at
	// least 70% of desired pods.
	// +optional
	MaxUnavailable *intstr.IntOrString `protobuf:"bytes,1,opt,name=maxUnavailable" json:"maxUnavailable,omitempty"`
	// The maximum number of pods that can be scheduled above the desired number of
	// pods.
	// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
	// This can not be 0 if MaxUnavailable is 0.
	// Absolute number is calculated from percentage by rounding up.
	// Defaults to 25%.
	// Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when
	// the rolling update starts, such that the total number of old and new pods do not exceed
	// 130% of desired pods. Once old pods have been killed,
	// new ReplicaSet can be scaled up further, ensuring that total number of pods running
	// at any time during the update is atmost 130% of desired pods.
	// +optional
	MaxSurge             *intstr.IntOrString `protobuf:"bytes,2,opt,name=maxSurge" json:"maxSurge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RollingUpdateDeployment) Reset()         { *m = RollingUpdateDeployment{} }
func (m *RollingUpdateDeployment) String() string { return proto.CompactTextString(m) }
func (*RollingUpdateDeployment) ProtoMessage()    {}
func (*RollingUpdateDeployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{20}
}
func (m *RollingUpdateDeployment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollingUpdateDeployment.Unmarshal(m, b)
}
func (m *RollingUpdateDeployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollingUpdateDeployment.Marshal(b, m, deterministic)
}
func (dst *RollingUpdateDeployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollingUpdateDeployment.Merge(dst, src)
}
func (m *RollingUpdateDeployment) XXX_Size() int {
	return xxx_messageInfo_RollingUpdateDeployment.Size(m)
}
func (m *RollingUpdateDeployment) XXX_DiscardUnknown() {
	xxx_messageInfo_RollingUpdateDeployment.DiscardUnknown(m)
}

var xxx_messageInfo_RollingUpdateDeployment proto.InternalMessageInfo

func (m *RollingUpdateDeployment) GetMaxUnavailable() *intstr.IntOrString {
	if m != nil {
		return m.MaxUnavailable
	}
	return nil
}

func (m *RollingUpdateDeployment) GetMaxSurge() *intstr.IntOrString {
	if m != nil {
		return m.MaxSurge
	}
	return nil
}

// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
type RollingUpdateStatefulSetStrategy struct {
	// Partition indicates the ordinal at which the StatefulSet should be
	// partitioned.
	// Default value is 0.
	// +optional
	Partition            *int32   `protobuf:"varint,1,opt,name=partition" json:"partition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollingUpdateStatefulSetStrategy) Reset()         { *m = RollingUpdateStatefulSetStrategy{} }
func (m *RollingUpdateStatefulSetStrategy) String() string { return proto.CompactTextString(m) }
func (*RollingUpdateStatefulSetStrategy) ProtoMessage()    {}
func (*RollingUpdateStatefulSetStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{21}
}
func (m *RollingUpdateStatefulSetStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollingUpdateStatefulSetStrategy.Unmarshal(m, b)
}
func (m *RollingUpdateStatefulSetStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollingUpdateStatefulSetStrategy.Marshal(b, m, deterministic)
}
func (dst *RollingUpdateStatefulSetStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollingUpdateStatefulSetStrategy.Merge(dst, src)
}
func (m *RollingUpdateStatefulSetStrategy) XXX_Size() int {
	return xxx_messageInfo_RollingUpdateStatefulSetStrategy.Size(m)
}
func (m *RollingUpdateStatefulSetStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_RollingUpdateStatefulSetStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_RollingUpdateStatefulSetStrategy proto.InternalMessageInfo

func (m *RollingUpdateStatefulSetStrategy) GetPartition() int32 {
	if m != nil && m.Partition != nil {
		return *m.Partition
	}
	return 0
}

// Scale represents a scaling request for a resource.
type Scale struct {
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
	// +optional
	Spec *ScaleSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.
	// +optional
	Status               *ScaleStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Scale) Reset()         { *m = Scale{} }
func (m *Scale) String() string { return proto.CompactTextString(m) }
func (*Scale) ProtoMessage()    {}
func (*Scale) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{22}
}
func (m *Scale) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Scale.Unmarshal(m, b)
}
func (m *Scale) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Scale.Marshal(b, m, deterministic)
}
func (dst *Scale) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scale.Merge(dst, src)
}
func (m *Scale) XXX_Size() int {
	return xxx_messageInfo_Scale.Size(m)
}
func (m *Scale) XXX_DiscardUnknown() {
	xxx_messageInfo_Scale.DiscardUnknown(m)
}

var xxx_messageInfo_Scale proto.InternalMessageInfo

func (m *Scale) GetMetadata() *v1.ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Scale) GetSpec() *ScaleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Scale) GetStatus() *ScaleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// ScaleSpec describes the attributes of a scale subresource
type ScaleSpec struct {
	// desired number of instances for the scaled object.
	// +optional
	Replicas             *int32   `protobuf:"varint,1,opt,name=replicas" json:"replicas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScaleSpec) Reset()         { *m = ScaleSpec{} }
func (m *ScaleSpec) String() string { return proto.CompactTextString(m) }
func (*ScaleSpec) ProtoMessage()    {}
func (*ScaleSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{23}
}
func (m *ScaleSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScaleSpec.Unmarshal(m, b)
}
func (m *ScaleSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScaleSpec.Marshal(b, m, deterministic)
}
func (dst *ScaleSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScaleSpec.Merge(dst, src)
}
func (m *ScaleSpec) XXX_Size() int {
	return xxx_messageInfo_ScaleSpec.Size(m)
}
func (m *ScaleSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ScaleSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ScaleSpec proto.InternalMessageInfo

func (m *ScaleSpec) GetReplicas() int32 {
	if m != nil && m.Replicas != nil {
		return *m.Replicas
	}
	return 0
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatus struct {
	// actual number of observed instances of the scaled object.
	Replicas *int32 `protobuf:"varint,1,opt,name=replicas" json:"replicas,omitempty"`
	// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
	// +optional
	Selector map[string]string `protobuf:"bytes,2,rep,name=selector" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// label selector for pods that should match the replicas count. This is a serializated
	// version of both map-based and more expressive set-based selectors. This is done to
	// avoid introspection in the clients. The string will be in the same format as the
	// query-param syntax. If the target type only supports map-based selectors, both this
	// field and map-based selector field are populated.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	// +optional
	TargetSelector       *string  `protobuf:"bytes,3,opt,name=targetSelector" json:"targetSelector,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScaleStatus) Reset()         { *m = ScaleStatus{} }
func (m *ScaleStatus) String() string { return proto.CompactTextString(m) }
func (*ScaleStatus) ProtoMessage()    {}
func (*ScaleStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{24}
}
func (m *ScaleStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScaleStatus.Unmarshal(m, b)
}
func (m *ScaleStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScaleStatus.Marshal(b, m, deterministic)
}
func (dst *ScaleStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScaleStatus.Merge(dst, src)
}
func (m *ScaleStatus) XXX_Size() int {
	return xxx_messageInfo_ScaleStatus.Size(m)
}
func (m *ScaleStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ScaleStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ScaleStatus proto.InternalMessageInfo

func (m *ScaleStatus) GetReplicas() int32 {
	if m != nil && m.Replicas != nil {
		return *m.Replicas
	}
	return 0
}

func (m *ScaleStatus) GetSelector() map[string]string {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *ScaleStatus) GetTargetSelector() string {
	if m != nil && m.TargetSelector != nil {
		return *m.TargetSelector
	}
	return ""
}

// DEPRECATED - This group version of StatefulSet is deprecated by apps/v1/StatefulSet. See the release notes for
// more information.
// StatefulSet represents a set of pods with consistent identities.
// Identities are defined as:
//  - Network: A single stable DNS and hostname.
//  - Storage: As many VolumeClaims as requested.
// The StatefulSet guarantees that a given network identity will always
// map to the same storage identity.
type StatefulSet struct {
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Spec defines the desired identities of pods in this set.
	// +optional
	Spec *StatefulSetSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Status is the current status of Pods in this StatefulSet. This data
	// may be out of date by some window of time.
	// +optional
	Status               *StatefulSetStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *StatefulSet) Reset()         { *m = StatefulSet{} }
func (m *StatefulSet) String() string { return proto.CompactTextString(m) }
func (*StatefulSet) ProtoMessage()    {}
func (*StatefulSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{25}
}
func (m *StatefulSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatefulSet.Unmarshal(m, b)
}
func (m *StatefulSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatefulSet.Marshal(b, m, deterministic)
}
func (dst *StatefulSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatefulSet.Merge(dst, src)
}
func (m *StatefulSet) XXX_Size() int {
	return xxx_messageInfo_StatefulSet.Size(m)
}
func (m *StatefulSet) XXX_DiscardUnknown() {
	xxx_messageInfo_StatefulSet.DiscardUnknown(m)
}

var xxx_messageInfo_StatefulSet proto.InternalMessageInfo

func (m *StatefulSet) GetMetadata() *v1.ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *StatefulSet) GetSpec() *StatefulSetSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *StatefulSet) GetStatus() *StatefulSetStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// StatefulSetCondition describes the state of a statefulset at a certain point.
type StatefulSetCondition struct {
	// Type of statefulset condition.
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	// Last time the condition transitioned from one status to another.
	// +optional
	LastTransitionTime *v1.Time `protobuf:"bytes,3,opt,name=lastTransitionTime" json:"lastTransitionTime,omitempty"`
	// The reason for the condition's last transition.
	// +optional
	Reason *string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
	// A human readable message indicating details about the transition.
	// +optional
	Message              *string  `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatefulSetCondition) Reset()         { *m = StatefulSetCondition{} }
func (m *StatefulSetCondition) String() string { return proto.CompactTextString(m) }
func (*StatefulSetCondition) ProtoMessage()    {}
func (*StatefulSetCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{26}
}
func (m *StatefulSetCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatefulSetCondition.Unmarshal(m, b)
}
func (m *StatefulSetCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatefulSetCondition.Marshal(b, m, deterministic)
}
func (dst *StatefulSetCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatefulSetCondition.Merge(dst, src)
}
func (m *StatefulSetCondition) XXX_Size() int {
	return xxx_messageInfo_StatefulSetCondition.Size(m)
}
func (m *StatefulSetCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_StatefulSetCondition.DiscardUnknown(m)
}

var xxx_messageInfo_StatefulSetCondition proto.InternalMessageInfo

func (m *StatefulSetCondition) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *StatefulSetCondition) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *StatefulSetCondition) GetLastTransitionTime() *v1.Time {
	if m != nil {
		return m.LastTransitionTime
	}
	return nil
}

func (m *StatefulSetCondition) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *StatefulSetCondition) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// StatefulSetList is a collection of StatefulSets.
type StatefulSetList struct {
	// +optional
	Metadata             *v1.ListMeta   `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Items                []*StatefulSet `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StatefulSetList) Reset()         { *m = StatefulSetList{} }
func (m *StatefulSetList) String() string { return proto.CompactTextString(m) }
func (*StatefulSetList) ProtoMessage()    {}
func (*StatefulSetList) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{27}
}
func (m *StatefulSetList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatefulSetList.Unmarshal(m, b)
}
func (m *StatefulSetList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatefulSetList.Marshal(b, m, deterministic)
}
func (dst *StatefulSetList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatefulSetList.Merge(dst, src)
}
func (m *StatefulSetList) XXX_Size() int {
	return xxx_messageInfo_StatefulSetList.Size(m)
}
func (m *StatefulSetList) XXX_DiscardUnknown() {
	xxx_messageInfo_StatefulSetList.DiscardUnknown(m)
}

var xxx_messageInfo_StatefulSetList proto.InternalMessageInfo

func (m *StatefulSetList) GetMetadata() *v1.ListMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *StatefulSetList) GetItems() []*StatefulSet {
	if m != nil {
		return m.Items
	}
	return nil
}

// A StatefulSetSpec is the specification of a StatefulSet.
type StatefulSetSpec struct {
	// replicas is the desired number of replicas of the given Template.
	// These are replicas in the sense that they are instantiations of the
	// same Template, but individual replicas also have a consistent identity.
	// If unspecified, defaults to 1.
	// TODO: Consider a rename of this field.
	// +optional
	Replicas *int32 `protobuf:"varint,1,opt,name=replicas" json:"replicas,omitempty"`
	// selector is a label query over pods that should match the replica count.
	// It must match the pod template's labels.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector *v1.LabelSelector `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	// template is the object that describes the pod that will be created if
	// insufficient replicas are detected. Each pod stamped out by the StatefulSet
	// will fulfill this Template, but have a unique identity from the rest
	// of the StatefulSet.
	Template *v11.PodTemplateSpec `protobuf:"bytes,3,opt,name=template" json:"template,omitempty"`
	// volumeClaimTemplates is a list of claims that pods are allowed to reference.
	// The StatefulSet controller is responsible for mapping network identities to
	// claims in a way that maintains the identity of a pod. Every claim in
	// this list must have at least one matching (by name) volumeMount in one
	// container in the template. A claim in this list takes precedence over
	// any volumes in the template, with the same name.
	// TODO: Define the behavior if a claim already exists with the same name.
	// +optional
	VolumeClaimTemplates []*v11.PersistentVolumeClaim `protobuf:"bytes,4,rep,name=volumeClaimTemplates" json:"volumeClaimTemplates,omitempty"`
	// serviceName is the name of the service that governs this StatefulSet.
	// This service must exist before the StatefulSet, and is responsible for
	// the network identity of the set. Pods get DNS/hostnames that follow the
	// pattern: pod-specific-string.serviceName.default.svc.cluster.local
	// where "pod-specific-string" is managed by the StatefulSet controller.
	ServiceName *string `protobuf:"bytes,5,opt,name=serviceName" json:"serviceName,omitempty"`
	// podManagementPolicy controls how pods are created during initial scale up,
	// when replacing pods on nodes, or when scaling down. The default policy is
	// `OrderedReady`, where pods are created in increasing order (pod-0, then
	// pod-1, etc) and the controller will wait until each pod is ready before
	// continuing. When scaling down, the pods are removed in the opposite order.
	// The alternative policy is `Parallel` which will create pods in parallel
	// to match the desired scale without waiting, and on scale down will delete
	// all pods at once.
	// +optional
	PodManagementPolicy *string `protobuf:"bytes,6,opt,name=podManagementPolicy" json:"podManagementPolicy,omitempty"`
	// updateStrategy indicates the StatefulSetUpdateStrategy that will be
	// employed to update Pods in the StatefulSet when a revision is made to
	// Template.
	UpdateStrategy *StatefulSetUpdateStrategy `protobuf:"bytes,7,opt,name=updateStrategy" json:"updateStrategy,omitempty"`
	// revisionHistoryLimit is the maximum number of revisions that will
	// be maintained in the StatefulSet's revision history. The revision history
	// consists of all revisions not represented by a currently applied
	// StatefulSetSpec version. The default value is 10.
	RevisionHistoryLimit *int32   `protobuf:"varint,8,opt,name=revisionHistoryLimit" json:"revisionHistoryLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatefulSetSpec) Reset()         { *m = StatefulSetSpec{} }
func (m *StatefulSetSpec) String() string { return proto.CompactTextString(m) }
func (*StatefulSetSpec) ProtoMessage()    {}
func (*StatefulSetSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{28}
}
func (m *StatefulSetSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatefulSetSpec.Unmarshal(m, b)
}
func (m *StatefulSetSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatefulSetSpec.Marshal(b, m, deterministic)
}
func (dst *StatefulSetSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatefulSetSpec.Merge(dst, src)
}
func (m *StatefulSetSpec) XXX_Size() int {
	return xxx_messageInfo_StatefulSetSpec.Size(m)
}
func (m *StatefulSetSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_StatefulSetSpec.DiscardUnknown(m)
}

var xxx_messageInfo_StatefulSetSpec proto.InternalMessageInfo

func (m *StatefulSetSpec) GetReplicas() int32 {
	if m != nil && m.Replicas != nil {
		return *m.Replicas
	}
	return 0
}

func (m *StatefulSetSpec) GetSelector() *v1.LabelSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *StatefulSetSpec) GetTemplate() *v11.PodTemplateSpec {
	if m != nil {
		return m.Template
	}
	return nil
}

func (m *StatefulSetSpec) GetVolumeClaimTemplates() []*v11.PersistentVolumeClaim {
	if m != nil {
		return m.VolumeClaimTemplates
	}
	return nil
}

func (m *StatefulSetSpec) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *StatefulSetSpec) GetPodManagementPolicy() string {
	if m != nil && m.PodManagementPolicy != nil {
		return *m.PodManagementPolicy
	}
	return ""
}

func (m *StatefulSetSpec) GetUpdateStrategy() *StatefulSetUpdateStrategy {
	if m != nil {
		return m.UpdateStrategy
	}
	return nil
}

func (m *StatefulSetSpec) GetRevisionHistoryLimit() int32 {
	if m != nil && m.RevisionHistoryLimit != nil {
		return *m.RevisionHistoryLimit
	}
	return 0
}

// StatefulSetStatus represents the current state of a StatefulSet.
type StatefulSetStatus struct {
	// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the
	// StatefulSet's generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration *int64 `protobuf:"varint,1,opt,name=observedGeneration" json:"observedGeneration,omitempty"`
	// replicas is the number of Pods created by the StatefulSet controller.
	Replicas *int32 `protobuf:"varint,2,opt,name=replicas" json:"replicas,omitempty"`
	// readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
	ReadyReplicas *int32 `protobuf:"varint,3,opt,name=readyReplicas" json:"readyReplicas,omitempty"`
	// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version
	// indicated by currentRevision.
	CurrentReplicas *int32 `protobuf:"varint,4,opt,name=currentReplicas" json:"currentReplicas,omitempty"`
	// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version
	// indicated by updateRevision.
	UpdatedReplicas *int32 `protobuf:"varint,5,opt,name=updatedReplicas" json:"updatedReplicas,omitempty"`
	// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the
	// sequence [0,currentReplicas).
	CurrentRevision *string `protobuf:"bytes,6,opt,name=currentRevision" json:"currentRevision,omitempty"`
	// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence
	// [replicas-updatedReplicas,replicas)
	UpdateRevision *string `protobuf:"bytes,7,opt,name=updateRevision" json:"updateRevision,omitempty"`
	// collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller
	// uses this field as a collision avoidance mechanism when it needs to create the name for the
	// newest ControllerRevision.
	// +optional
	CollisionCount *int32 `protobuf:"varint,9,opt,name=collisionCount" json:"collisionCount,omitempty"`
	// Represents the latest available observations of a statefulset's current state.
	// +optional
	// +patchMergeKey=type
	// +patchStrategy=merge
	Conditions           []*StatefulSetCondition `protobuf:"bytes,10,rep,name=conditions" json:"conditions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StatefulSetStatus) Reset()         { *m = StatefulSetStatus{} }
func (m *StatefulSetStatus) String() string { return proto.CompactTextString(m) }
func (*StatefulSetStatus) ProtoMessage()    {}
func (*StatefulSetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{29}
}
func (m *StatefulSetStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatefulSetStatus.Unmarshal(m, b)
}
func (m *StatefulSetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatefulSetStatus.Marshal(b, m, deterministic)
}
func (dst *StatefulSetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatefulSetStatus.Merge(dst, src)
}
func (m *StatefulSetStatus) XXX_Size() int {
	return xxx_messageInfo_StatefulSetStatus.Size(m)
}
func (m *StatefulSetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StatefulSetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StatefulSetStatus proto.InternalMessageInfo

func (m *StatefulSetStatus) GetObservedGeneration() int64 {
	if m != nil && m.ObservedGeneration != nil {
		return *m.ObservedGeneration
	}
	return 0
}

func (m *StatefulSetStatus) GetReplicas() int32 {
	if m != nil && m.Replicas != nil {
		return *m.Replicas
	}
	return 0
}

func (m *StatefulSetStatus) GetReadyReplicas() int32 {
	if m != nil && m.ReadyReplicas != nil {
		return *m.ReadyReplicas
	}
	return 0
}

func (m *StatefulSetStatus) GetCurrentReplicas() int32 {
	if m != nil && m.CurrentReplicas != nil {
		return *m.CurrentReplicas
	}
	return 0
}

func (m *StatefulSetStatus) GetUpdatedReplicas() int32 {
	if m != nil && m.UpdatedReplicas != nil {
		return *m.UpdatedReplicas
	}
	return 0
}

func (m *StatefulSetStatus) GetCurrentRevision() string {
	if m != nil && m.CurrentRevision != nil {
		return *m.CurrentRevision
	}
	return ""
}

func (m *StatefulSetStatus) GetUpdateRevision() string {
	if m != nil && m.UpdateRevision != nil {
		return *m.UpdateRevision
	}
	return ""
}

func (m *StatefulSetStatus) GetCollisionCount() int32 {
	if m != nil && m.CollisionCount != nil {
		return *m.CollisionCount
	}
	return 0
}

func (m *StatefulSetStatus) GetConditions() []*StatefulSetCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet
// controller will use to perform updates. It includes any additional parameters
// necessary to perform the update for the indicated strategy.
type StatefulSetUpdateStrategy struct {
	// Type indicates the type of the StatefulSetUpdateStrategy.
	// Default is RollingUpdate.
	// +optional
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
	// +optional
	RollingUpdate        *RollingUpdateStatefulSetStrategy `protobuf:"bytes,2,opt,name=rollingUpdate" json:"rollingUpdate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *StatefulSetUpdateStrategy) Reset()         { *m = StatefulSetUpdateStrategy{} }
func (m *StatefulSetUpdateStrategy) String() string { return proto.CompactTextString(m) }
func (*StatefulSetUpdateStrategy) ProtoMessage()    {}
func (*StatefulSetUpdateStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a7480263a789dd6f, []int{30}
}
func (m *StatefulSetUpdateStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatefulSetUpdateStrategy.Unmarshal(m, b)
}
func (m *StatefulSetUpdateStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatefulSetUpdateStrategy.Marshal(b, m, deterministic)
}
func (dst *StatefulSetUpdateStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatefulSetUpdateStrategy.Merge(dst, src)
}
func (m *StatefulSetUpdateStrategy) XXX_Size() int {
	return xxx_messageInfo_StatefulSetUpdateStrategy.Size(m)
}
func (m *StatefulSetUpdateStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_StatefulSetUpdateStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_StatefulSetUpdateStrategy proto.InternalMessageInfo

func (m *StatefulSetUpdateStrategy) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *StatefulSetUpdateStrategy) GetRollingUpdate() *RollingUpdateStatefulSetStrategy {
	if m != nil {
		return m.RollingUpdate
	}
	return nil
}

func init() {
	proto.RegisterType((*ControllerRevision)(nil), "k8s.io.api.apps.v1beta2.ControllerRevision")
	proto.RegisterType((*ControllerRevisionList)(nil), "k8s.io.api.apps.v1beta2.ControllerRevisionList")
	proto.RegisterType((*DaemonSet)(nil), "k8s.io.api.apps.v1beta2.DaemonSet")
	proto.RegisterType((*DaemonSetCondition)(nil), "k8s.io.api.apps.v1beta2.DaemonSetCondition")
	proto.RegisterType((*DaemonSetList)(nil), "k8s.io.api.apps.v1beta2.DaemonSetList")
	proto.RegisterType((*DaemonSetSpec)(nil), "k8s.io.api.apps.v1beta2.DaemonSetSpec")
	proto.RegisterType((*DaemonSetStatus)(nil), "k8s.io.api.apps.v1beta2.DaemonSetStatus")
	proto.RegisterType((*DaemonSetUpdateStrategy)(nil), "k8s.io.api.apps.v1beta2.DaemonSetUpdateStrategy")
	proto.RegisterType((*Deployment)(nil), "k8s.io.api.apps.v1beta2.Deployment")
	proto.RegisterType((*DeploymentCondition)(nil), "k8s.io.api.apps.v1beta2.DeploymentCondition")
	proto.RegisterType((*DeploymentList)(nil), "k8s.io.api.apps.v1beta2.DeploymentList")
	proto.RegisterType((*DeploymentSpec)(nil), "k8s.io.api.apps.v1beta2.DeploymentSpec")
	proto.RegisterType((*DeploymentStatus)(nil), "k8s.io.api.apps.v1beta2.DeploymentStatus")
	proto.RegisterType((*DeploymentStrategy)(nil), "k8s.io.api.apps.v1beta2.DeploymentStrategy")
	proto.RegisterType((*ReplicaSet)(nil), "k8s.io.api.apps.v1beta2.ReplicaSet")
	proto.RegisterType((*ReplicaSetCondition)(nil), "k8s.io.api.apps.v1beta2.ReplicaSetCondition")
	proto.RegisterType((*ReplicaSetList)(nil), "k8s.io.api.apps.v1beta2.ReplicaSetList")
	proto.RegisterType((*ReplicaSetSpec)(nil), "k8s.io.api.apps.v1beta2.ReplicaSetSpec")
	proto.RegisterType((*ReplicaSetStatus)(nil), "k8s.io.api.apps.v1beta2.ReplicaSetStatus")
	proto.RegisterType((*RollingUpdateDaemonSet)(nil), "k8s.io.api.apps.v1beta2.RollingUpdateDaemonSet")
	proto.RegisterType((*RollingUpdateDeployment)(nil), "k8s.io.api.apps.v1beta2.RollingUpdateDeployment")
	proto.RegisterType((*RollingUpdateStatefulSetStrategy)(nil), "k8s.io.api.apps.v1beta2.RollingUpdateStatefulSetStrategy")
	proto.RegisterType((*Scale)(nil), "k8s.io.api.apps.v1beta2.Scale")
	proto.RegisterType((*ScaleSpec)(nil), "k8s.io.api.apps.v1beta2.ScaleSpec")
	proto.RegisterType((*ScaleStatus)(nil), "k8s.io.api.apps.v1beta2.ScaleStatus")
	proto.RegisterMapType((map[string]string)(nil), "k8s.io.api.apps.v1beta2.ScaleStatus.SelectorEntry")
	proto.RegisterType((*StatefulSet)(nil), "k8s.io.api.apps.v1beta2.StatefulSet")
	proto.RegisterType((*StatefulSetCondition)(nil), "k8s.io.api.apps.v1beta2.StatefulSetCondition")
	proto.RegisterType((*StatefulSetList)(nil), "k8s.io.api.apps.v1beta2.StatefulSetList")
	proto.RegisterType((*StatefulSetSpec)(nil), "k8s.io.api.apps.v1beta2.StatefulSetSpec")
	proto.RegisterType((*StatefulSetStatus)(nil), "k8s.io.api.apps.v1beta2.StatefulSetStatus")
	proto.RegisterType((*StatefulSetUpdateStrategy)(nil), "k8s.io.api.apps.v1beta2.StatefulSetUpdateStrategy")
}

func init() {
	proto.RegisterFile("github.com/solo-io/supergloo/vendor/k8s.io/api/apps/v1beta2/generated.proto", fileDescriptor_generated_a7480263a789dd6f)
}

var fileDescriptor_generated_a7480263a789dd6f = []byte{
	// 1663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0x4b, 0x6f, 0x14, 0xc7,
	0x16, 0x56, 0xcf, 0xc3, 0x9e, 0x39, 0x96, 0x6d, 0x28, 0x2c, 0x7b, 0xae, 0x75, 0x17, 0x56, 0x83,
	0xc0, 0x97, 0x47, 0x8f, 0x19, 0xae, 0x90, 0x79, 0x48, 0x17, 0x30, 0x88, 0x9b, 0x60, 0x03, 0xea,
	0x01, 0x14, 0x21, 0x45, 0x51, 0xb9, 0xbb, 0x18, 0x57, 0xdc, 0x2f, 0x75, 0x55, 0x4f, 0x98, 0x5d,
	0x14, 0xb1, 0xc8, 0x32, 0x9b, 0x28, 0xca, 0x36, 0x59, 0xe4, 0x0f, 0x44, 0xca, 0x9a, 0x75, 0xa4,
	0x24, 0xbb, 0x28, 0x91, 0x92, 0x75, 0x7e, 0x46, 0x54, 0xd5, 0x3d, 0x3d, 0xfd, 0xf4, 0x34, 0x68,
	0x22, 0x12, 0x76, 0xd3, 0xe7, 0x55, 0xa7, 0xea, 0x9c, 0xfa, 0xbe, 0xaa, 0x1a, 0xb8, 0x37, 0xa0,
	0xfc, 0x20, 0xd8, 0xd7, 0x0c, 0xd7, 0xee, 0x32, 0xd7, 0x72, 0x2f, 0x50, 0xb7, 0xcb, 0x02, 0x8f,
	0xf8, 0x03, 0xcb, 0x75, 0xbb, 0x43, 0xe2, 0x98, 0xae, 0xdf, 0x3d, 0xdc, 0x66, 0x1a, 0x75, 0xbb,
	0xd8, 0xa3, 0x5d, 0xec, 0x79, 0xac, 0x3b, 0xbc, 0xb8, 0x4f, 0x38, 0xee, 0x75, 0x07, 0xc4, 0x21,
	0x3e, 0xe6, 0xc4, 0xd4, 0x3c, 0xdf, 0xe5, 0x2e, 0x5a, 0x0b, 0x0d, 0x35, 0xec, 0x51, 0x4d, 0x18,
	0x6a, 0x91, 0xe1, 0xba, 0x9a, 0x88, 0x60, 0xb8, 0x3e, 0xe9, 0x0e, 0x2f, 0x66, 0x9d, 0xd7, 0xff,
	0x3b, 0xb1, 0xb1, 0xb1, 0x71, 0x40, 0x1d, 0xe2, 0x8f, 0xba, 0xde, 0xe1, 0x40, 0x08, 0x58, 0xd7,
	0x26, 0x1c, 0x17, 0x79, 0x75, 0xcb, 0xbc, 0xfc, 0xc0, 0xe1, 0xd4, 0x26, 0x39, 0x87, 0xcb, 0xd3,
	0x1c, 0x98, 0x71, 0x40, 0x6c, 0x9c, 0xf3, 0xbb, 0x54, 0xe6, 0x17, 0x70, 0x6a, 0x75, 0xa9, 0xc3,
	0x19, 0xf7, 0xb3, 0x4e, 0xea, 0x4b, 0x05, 0xd0, 0x8e, 0xeb, 0x70, 0xdf, 0xb5, 0x2c, 0xe2, 0xeb,
	0x64, 0x48, 0x19, 0x75, 0x1d, 0xb4, 0x0b, 0x2d, 0x31, 0x1f, 0x13, 0x73, 0xdc, 0x51, 0x36, 0x94,
	0xcd, 0x85, 0xde, 0x96, 0x36, 0x59, 0xba, 0x38, 0xbc, 0xe6, 0x1d, 0x0e, 0x84, 0x80, 0x69, 0xc2,
	0x5a, 0x1b, 0x5e, 0xd4, 0x1e, 0xec, 0x7f, 0x48, 0x0c, 0xbe, 0x47, 0x38, 0xd6, 0xe3, 0x08, 0xe8,
	0x26, 0x34, 0x64, 0xa4, 0x9a, 0x8c, 0x74, 0xa1, 0x34, 0x52, 0x34, 0x41, 0x4d, 0xc7, 0x1f, 0xdd,
	0x79, 0xce, 0x89, 0x23, 0x52, 0xd1, 0xa5, 0x2b, 0x5a, 0x87, 0x96, 0x1f, 0x25, 0xd7, 0xa9, 0x6f,
	0x28, 0x9b, 0x75, 0x3d, 0xfe, 0x56, 0xbf, 0x51, 0x60, 0x35, 0x3f, 0x87, 0x5d, 0xca, 0x38, 0x7a,
	0x37, 0x37, 0x0f, 0xad, 0xda, 0x3c, 0x84, 0x77, 0x6e, 0x16, 0x4d, 0xca, 0x89, 0xcd, 0x3a, 0xb5,
	0x8d, 0xfa, 0xe6, 0x42, 0xef, 0x9c, 0x56, 0xd2, 0x4b, 0x5a, 0x3e, 0x17, 0x3d, 0xf4, 0x54, 0x7f,
	0x56, 0xa0, 0x7d, 0x1b, 0x13, 0xdb, 0x75, 0xfa, 0x84, 0xcf, 0x78, 0x91, 0xaf, 0x42, 0x83, 0x79,
	0xc4, 0x88, 0x16, 0xf9, 0x74, 0x69, 0x76, 0xf1, 0xf8, 0x7d, 0x8f, 0x18, 0xba, 0xf4, 0x41, 0x37,
	0x60, 0x8e, 0x71, 0xcc, 0x03, 0x26, 0xd7, 0x76, 0xa1, 0xb7, 0x59, 0xc1, 0x5b, 0xda, 0xeb, 0x91,
	0x9f, 0xfa, 0x83, 0x02, 0x28, 0xd6, 0xed, 0xb8, 0x8e, 0x49, 0xb9, 0xe8, 0x23, 0x04, 0x0d, 0x3e,
	0xf2, 0x88, 0x9c, 0x5e, 0x5b, 0x97, 0xbf, 0xd1, 0x6a, 0x3c, 0x58, 0x4d, 0x4a, 0xa3, 0x2f, 0xf4,
	0x14, 0x90, 0x85, 0x19, 0x7f, 0xe4, 0x63, 0x87, 0x49, 0xef, 0x47, 0xd4, 0x26, 0x51, 0x42, 0x67,
	0xab, 0x2d, 0x8c, 0xf0, 0xd0, 0x0b, 0xa2, 0x88, 0x31, 0x7d, 0x82, 0x99, 0xeb, 0x74, 0x1a, 0xe1,
	0x98, 0xe1, 0x17, 0xea, 0xc0, 0xbc, 0x4d, 0x18, 0xc3, 0x03, 0xd2, 0x69, 0x4a, 0xc5, 0xf8, 0x53,
	0xfd, 0x5c, 0x81, 0xc5, 0x78, 0x42, 0x33, 0xef, 0xa5, 0xed, 0x74, 0x2f, 0xa9, 0xd3, 0xd7, 0x7b,
	0xdc, 0x42, 0xbf, 0xd4, 0x12, 0x79, 0x89, 0x12, 0xa2, 0x07, 0xd0, 0x62, 0xc4, 0x22, 0x06, 0x77,
	0xfd, 0x28, 0xaf, 0x4b, 0x15, 0xf3, 0xc2, 0xfb, 0xc4, 0xea, 0x47, 0xae, 0x7a, 0x1c, 0x04, 0xfd,
	0x0f, 0x5a, 0x9c, 0xd8, 0x9e, 0x85, 0x39, 0x89, 0xba, 0xe9, 0x64, 0x32, 0x3f, 0x01, 0x8f, 0xc2,
	0xfd, 0xa1, 0x6b, 0x3e, 0x8a, 0xcc, 0x64, 0x2b, 0xc5, 0x4e, 0xe8, 0x3d, 0x58, 0x0a, 0x3c, 0x53,
	0xc8, 0xb9, 0xc0, 0x9a, 0xc1, 0x28, 0xaa, 0xe2, 0xd6, 0xf4, 0x69, 0x3e, 0x4e, 0xf9, 0xe9, 0x99,
	0x38, 0x68, 0x13, 0x96, 0x6d, 0xea, 0xe8, 0x04, 0x9b, 0xa3, 0x3e, 0x31, 0x5c, 0xc7, 0x64, 0xb2,
	0xa0, 0x4d, 0x3d, 0x2b, 0x46, 0x3d, 0x58, 0x19, 0x03, 0xc4, 0xff, 0x29, 0xe3, 0xae, 0x3f, 0xda,
	0xa5, 0x36, 0xe5, 0x9d, 0x39, 0x69, 0x5e, 0xa8, 0x53, 0x3f, 0x6d, 0xc0, 0x72, 0xa6, 0xc1, 0xd1,
	0x65, 0x58, 0x35, 0x02, 0xdf, 0x27, 0x0e, 0xbf, 0x1f, 0xd8, 0xfb, 0xc4, 0xef, 0x1b, 0x07, 0xc4,
	0x0c, 0x2c, 0x62, 0xca, 0xb5, 0x6e, 0xea, 0x25, 0x5a, 0xa4, 0x01, 0x72, 0xa4, 0x68, 0x8f, 0x32,
	0x16, 0xfb, 0xd4, 0xa4, 0x4f, 0x81, 0x46, 0x8c, 0x63, 0x12, 0x46, 0x7d, 0x62, 0x66, 0xc7, 0xa9,
	0x87, 0xe3, 0x14, 0x6b, 0xd1, 0x06, 0x2c, 0x84, 0xd1, 0xe4, 0xec, 0xa3, 0xd5, 0x48, 0x8a, 0x44,
	0x26, 0xee, 0x3e, 0x23, 0xfe, 0x90, 0x98, 0x77, 0x43, 0xf4, 0x17, 0x20, 0xda, 0x94, 0x20, 0x5a,
	0xa0, 0x11, 0x99, 0x84, 0xab, 0x9e, 0xcb, 0x24, 0x5c, 0xbb, 0x12, 0xad, 0xa8, 0x4d, 0x38, 0xec,
	0xcd, 0x21, 0xa6, 0x16, 0xde, 0xb7, 0x48, 0x67, 0x3e, 0xac, 0x4d, 0x46, 0x8c, 0xce, 0xc3, 0xf1,
	0x50, 0xf4, 0xd8, 0xc1, 0xb1, 0x6d, 0x4b, 0xda, 0xe6, 0x15, 0xe8, 0x34, 0x2c, 0x19, 0xae, 0x65,
	0xc9, 0x72, 0xed, 0xb8, 0x81, 0xc3, 0x3b, 0x6d, 0x69, 0x9a, 0x91, 0xa2, 0x7b, 0x00, 0xc6, 0x18,
	0x78, 0x58, 0x07, 0xa6, 0x80, 0x74, 0x1e, 0xac, 0xf4, 0x84, 0xbb, 0xfa, 0x42, 0x81, 0xb5, 0x92,
	0xa6, 0x2c, 0x04, 0xb5, 0xc7, 0xb0, 0x28, 0x20, 0x9f, 0x3a, 0x83, 0xd0, 0x38, 0xda, 0x38, 0xdd,
	0xd2, 0xf1, 0xf5, 0xa4, 0xf5, 0x64, 0x97, 0xa7, 0xa3, 0xa8, 0xbf, 0x2a, 0x00, 0xb7, 0x89, 0x67,
	0xb9, 0x23, 0x9b, 0x38, 0xb3, 0x66, 0x8c, 0x6b, 0x29, 0xc6, 0x38, 0x53, 0xbe, 0x54, 0x71, 0x02,
	0x09, 0xca, 0xb8, 0x99, 0xa1, 0x8c, 0xff, 0x54, 0x71, 0x4f, 0x73, 0xc6, 0xd7, 0x35, 0x38, 0x31,
	0x51, 0xbe, 0x1e, 0x69, 0xe8, 0xb0, 0x24, 0xe0, 0x3e, 0x5c, 0x2e, 0x49, 0x18, 0x73, 0xaf, 0x4c,
	0x18, 0x99, 0x08, 0x25, 0x44, 0x34, 0xff, 0x86, 0x88, 0xe8, 0x0b, 0x05, 0x96, 0x26, 0xab, 0x34,
	0x73, 0x26, 0xba, 0x92, 0x66, 0xa2, 0x93, 0x15, 0xca, 0x38, 0xa6, 0xa2, 0xef, 0xea, 0xc9, 0xcc,
	0x24, 0x17, 0xc9, 0x63, 0x9a, 0x67, 0x51, 0x03, 0xb3, 0x08, 0x1f, 0xe3, 0xef, 0x14, 0x4f, 0xd5,
	0x66, 0xcd, 0x53, 0xf5, 0xd7, 0xe1, 0xa9, 0xbb, 0xd0, 0x62, 0x63, 0x86, 0x6a, 0xc8, 0x00, 0xe7,
	0x2a, 0x75, 0x71, 0x44, 0x4e, 0xb1, 0x73, 0x11, 0x2d, 0x35, 0x67, 0x46, 0x4b, 0xa2, 0x67, 0x3c,
	0x1c, 0x30, 0x62, 0xca, 0x1e, 0x6c, 0xe9, 0xd1, 0x17, 0xda, 0x86, 0x35, 0xcf, 0x77, 0x07, 0x3e,
	0x61, 0xec, 0x36, 0xc1, 0xa6, 0x45, 0x1d, 0x32, 0x1e, 0x3d, 0x44, 0xc8, 0x32, 0xb5, 0xfa, 0xa2,
	0x0e, 0xc7, 0xb2, 0xdb, 0xb2, 0x84, 0x27, 0x94, 0x52, 0x9e, 0x48, 0xd6, 0xba, 0x96, 0xa9, 0xf5,
	0x26, 0x2c, 0x47, 0x2c, 0xa1, 0x8f, 0x4d, 0x42, 0x1a, 0xcb, 0x8a, 0xd1, 0x29, 0x58, 0xf4, 0xc5,
	0x02, 0xc5, 0x76, 0x21, 0x67, 0xa4, 0x85, 0x82, 0x31, 0x62, 0x42, 0x88, 0x2d, 0x43, 0xae, 0xcb,
	0x2b, 0xd0, 0x16, 0x9c, 0x08, 0x9c, 0xbc, 0x7d, 0x58, 0x92, 0x22, 0x15, 0xda, 0x4d, 0x71, 0xc7,
	0x9c, 0xdc, 0x0a, 0xe7, 0x2b, 0xf4, 0x42, 0x21, 0x79, 0x14, 0x30, 0x56, 0xab, 0x88, 0xb1, 0xd4,
	0x8f, 0xc5, 0xa1, 0x39, 0xd7, 0x57, 0x85, 0xf8, 0xf7, 0xa4, 0x98, 0x5f, 0xb6, 0x2a, 0xf2, 0xcb,
	0x64, 0xef, 0x16, 0x10, 0x4c, 0xb4, 0x0a, 0xb3, 0xbf, 0x92, 0x54, 0x25, 0x98, 0x49, 0x02, 0xaf,
	0x45, 0x30, 0x09, 0xf7, 0x34, 0xc1, 0xfc, 0xa8, 0xc0, 0x89, 0x89, 0xf2, 0x6d, 0xb8, 0x95, 0x08,
	0x32, 0x98, 0xcc, 0xe8, 0xcd, 0x91, 0xc1, 0x24, 0x87, 0x31, 0x19, 0xfc, 0x91, 0xca, 0x6c, 0x2a,
	0x19, 0x54, 0x3f, 0xc8, 0xff, 0xed, 0x68, 0x43, 0xfd, 0xb6, 0x06, 0xc7, 0xb2, 0x3d, 0x77, 0xe4,
	0x64, 0x7b, 0xb0, 0xf2, 0x2c, 0xb0, 0xac, 0x91, 0xcc, 0x28, 0x01, 0x89, 0x21, 0x6a, 0x16, 0xea,
	0xf2, 0xb8, 0xd8, 0xa8, 0x8c, 0x8b, 0xcd, 0x32, 0x5c, 0x2c, 0x46, 0xf8, 0x7a, 0x29, 0xc2, 0xbf,
	0x1a, 0x2a, 0x16, 0xec, 0xb4, 0xd4, 0x91, 0xda, 0x87, 0xd5, 0xe2, 0x43, 0xaf, 0xb8, 0x2f, 0xda,
	0xf8, 0x79, 0xf2, 0x32, 0x30, 0x0d, 0x7b, 0x02, 0x4e, 0x2d, 0x2d, 0x7c, 0xd2, 0xd2, 0xde, 0x71,
	0xf8, 0x03, 0xbf, 0xcf, 0x7d, 0xea, 0x0c, 0xf4, 0x4c, 0x1c, 0xf5, 0xa5, 0x02, 0x6b, 0x25, 0x48,
	0xf8, 0xd7, 0x8d, 0x2a, 0x51, 0x14, 0x3f, 0xef, 0x07, 0xfe, 0xa0, 0x08, 0xa7, 0xab, 0xc5, 0x8c,
	0x23, 0xa8, 0x37, 0x60, 0x23, 0x35, 0x05, 0xd1, 0x70, 0xe4, 0x59, 0x60, 0xc9, 0xde, 0x8b, 0x28,
	0xe3, 0xdf, 0xd0, 0xf6, 0xb0, 0xcf, 0x69, 0x4c, 0xd9, 0x4d, 0x7d, 0x22, 0x50, 0xbf, 0x57, 0xa0,
	0xd9, 0x37, 0x70, 0x94, 0xd9, 0xec, 0xf0, 0xfd, 0x72, 0x0a, 0xdf, 0xcb, 0x1f, 0x31, 0xe4, 0xd8,
	0x09, 0x68, 0xbf, 0x9e, 0x81, 0xf6, 0x53, 0x53, 0x3c, 0xd3, 0xa8, 0x7e, 0x06, 0xda, 0x71, 0xc0,
	0xa3, 0xb6, 0x9d, 0xfa, 0xbb, 0x02, 0x0b, 0x89, 0x00, 0x47, 0x6e, 0xd1, 0xfb, 0x29, 0x94, 0x11,
	0x8d, 0xde, 0xab, 0x92, 0x94, 0x36, 0xc6, 0x97, 0x3b, 0x0e, 0xf7, 0x47, 0x09, 0x90, 0x39, 0x0d,
	0x4b, 0x1c, 0xfb, 0x03, 0xc2, 0xc7, 0x06, 0x72, 0xaa, 0x6d, 0x3d, 0x23, 0x5d, 0xbf, 0x06, 0x8b,
	0xa9, 0x10, 0xe8, 0x18, 0xd4, 0x0f, 0xc9, 0x28, 0xa2, 0x26, 0xf1, 0x13, 0xad, 0x40, 0x73, 0x88,
	0xad, 0x80, 0x44, 0xc4, 0x14, 0x7e, 0x5c, 0xad, 0x6d, 0x2b, 0xea, 0x6f, 0x62, 0x82, 0x93, 0x6e,
	0x98, 0x71, 0x75, 0xaf, 0xa7, 0xaa, 0x5b, 0xfe, 0x24, 0x98, 0xec, 0xc7, 0x49, 0x8d, 0x6f, 0x65,
	0x6a, 0x7c, 0xb6, 0x92, 0x7f, 0xba, 0xd2, 0x3f, 0x29, 0xb0, 0x92, 0xd0, 0xbe, 0x0d, 0x04, 0xfe,
	0xa5, 0x02, 0xcb, 0x89, 0x29, 0xcd, 0x9c, 0xc1, 0xaf, 0xa6, 0x19, 0xfc, 0x54, 0x95, 0x55, 0x1f,
	0x53, 0xf8, 0x27, 0x8d, 0x54, 0x6e, 0xff, 0xc0, 0x0b, 0xdd, 0xfb, 0xb0, 0x32, 0x74, 0xad, 0xc0,
	0x26, 0x3b, 0x16, 0xa6, 0xf6, 0xd8, 0x48, 0x70, 0x67, 0x3d, 0x7b, 0x82, 0x8c, 0x83, 0x11, 0x9f,
	0x51, 0xc6, 0x89, 0xc3, 0x9f, 0x4c, 0x3c, 0xf5, 0xc2, 0x30, 0x68, 0x03, 0x16, 0x04, 0x47, 0x52,
	0x83, 0xdc, 0xc7, 0xf6, 0xb8, 0xb4, 0x49, 0x91, 0xb8, 0x79, 0x78, 0xae, 0xb9, 0x87, 0x1d, 0x3c,
	0x20, 0x82, 0x64, 0x1e, 0xba, 0x16, 0x35, 0x46, 0xf2, 0x76, 0xd7, 0xd6, 0x8b, 0x54, 0xe8, 0x69,
	0xee, 0xad, 0x34, 0x7c, 0x68, 0xe8, 0x55, 0xa9, 0xdc, 0x94, 0xd7, 0xd2, 0xb2, 0xcb, 0x66, 0xeb,
	0x88, 0x37, 0xd0, 0xaf, 0xea, 0x70, 0x3c, 0xb7, 0x23, 0x67, 0x7a, 0x37, 0xcc, 0x9d, 0x6c, 0xea,
	0x45, 0x27, 0x9b, 0x4d, 0x58, 0x8e, 0x5e, 0x56, 0x33, 0x27, 0xa0, 0xac, 0xb8, 0xe8, 0xae, 0xd9,
	0x2c, 0xbe, 0x6b, 0x26, 0x63, 0x46, 0xff, 0x25, 0x85, 0x95, 0xc9, 0x8a, 0x05, 0x7c, 0x87, 0xce,
	0xb1, 0xe1, 0x7c, 0x08, 0xdf, 0x69, 0x69, 0xe5, 0xb7, 0xc9, 0xbd, 0x82, 0xb7, 0xc9, 0x0b, 0x55,
	0x2a, 0x5c, 0x7c, 0x94, 0xfa, 0x4c, 0x81, 0x7f, 0x95, 0xb6, 0x41, 0x21, 0x3a, 0x7e, 0x50, 0x7c,
	0x7f, 0xbc, 0x52, 0xed, 0xfe, 0x58, 0x70, 0xe4, 0xc8, 0x5c, 0x24, 0x6f, 0xb5, 0x9f, 0xce, 0x47,
	0xae, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xad, 0xac, 0x05, 0xb2, 0x1d, 0x00, 0x00,
}
