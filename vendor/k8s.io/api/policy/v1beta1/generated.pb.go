// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/supergloo/vendor/k8s.io/api/policy/v1beta1/generated.proto

package v1beta1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import v11 "k8s.io/api/core/v1"
import v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
import _ "k8s.io/apimachinery/pkg/runtime"
import _ "k8s.io/apimachinery/pkg/runtime/schema"
import intstr "k8s.io/apimachinery/pkg/util/intstr"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// AllowedFlexVolume represents a single Flexvolume that is allowed to be used.
type AllowedFlexVolume struct {
	// driver is the name of the Flexvolume driver.
	Driver               *string  `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllowedFlexVolume) Reset()         { *m = AllowedFlexVolume{} }
func (m *AllowedFlexVolume) String() string { return proto.CompactTextString(m) }
func (*AllowedFlexVolume) ProtoMessage()    {}
func (*AllowedFlexVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{0}
}
func (m *AllowedFlexVolume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllowedFlexVolume.Unmarshal(m, b)
}
func (m *AllowedFlexVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllowedFlexVolume.Marshal(b, m, deterministic)
}
func (dst *AllowedFlexVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedFlexVolume.Merge(dst, src)
}
func (m *AllowedFlexVolume) XXX_Size() int {
	return xxx_messageInfo_AllowedFlexVolume.Size(m)
}
func (m *AllowedFlexVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedFlexVolume.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedFlexVolume proto.InternalMessageInfo

func (m *AllowedFlexVolume) GetDriver() string {
	if m != nil && m.Driver != nil {
		return *m.Driver
	}
	return ""
}

// AllowedHostPath defines the host volume conditions that will be enabled by a policy
// for pods to use. It requires the path prefix to be defined.
type AllowedHostPath struct {
	// pathPrefix is the path prefix that the host volume must match.
	// It does not support `*`.
	// Trailing slashes are trimmed when validating the path prefix with a host path.
	//
	// Examples:
	// `/foo` would allow `/foo`, `/foo/` and `/foo/bar`
	// `/foo` would not allow `/food` or `/etc/foo`
	PathPrefix *string `protobuf:"bytes,1,opt,name=pathPrefix" json:"pathPrefix,omitempty"`
	// when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
	// +optional
	ReadOnly             *bool    `protobuf:"varint,2,opt,name=readOnly" json:"readOnly,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllowedHostPath) Reset()         { *m = AllowedHostPath{} }
func (m *AllowedHostPath) String() string { return proto.CompactTextString(m) }
func (*AllowedHostPath) ProtoMessage()    {}
func (*AllowedHostPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{1}
}
func (m *AllowedHostPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllowedHostPath.Unmarshal(m, b)
}
func (m *AllowedHostPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllowedHostPath.Marshal(b, m, deterministic)
}
func (dst *AllowedHostPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedHostPath.Merge(dst, src)
}
func (m *AllowedHostPath) XXX_Size() int {
	return xxx_messageInfo_AllowedHostPath.Size(m)
}
func (m *AllowedHostPath) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedHostPath.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedHostPath proto.InternalMessageInfo

func (m *AllowedHostPath) GetPathPrefix() string {
	if m != nil && m.PathPrefix != nil {
		return *m.PathPrefix
	}
	return ""
}

func (m *AllowedHostPath) GetReadOnly() bool {
	if m != nil && m.ReadOnly != nil {
		return *m.ReadOnly
	}
	return false
}

// Eviction evicts a pod from its node subject to certain policies and safety constraints.
// This is a subresource of Pod.  A request to cause such an eviction is
// created by POSTing to .../pods/<pod name>/evictions.
type Eviction struct {
	// ObjectMeta describes the pod that is being evicted.
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// DeleteOptions may be provided
	DeleteOptions        *v1.DeleteOptions `protobuf:"bytes,2,opt,name=deleteOptions" json:"deleteOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Eviction) Reset()         { *m = Eviction{} }
func (m *Eviction) String() string { return proto.CompactTextString(m) }
func (*Eviction) ProtoMessage()    {}
func (*Eviction) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{2}
}
func (m *Eviction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Eviction.Unmarshal(m, b)
}
func (m *Eviction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Eviction.Marshal(b, m, deterministic)
}
func (dst *Eviction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Eviction.Merge(dst, src)
}
func (m *Eviction) XXX_Size() int {
	return xxx_messageInfo_Eviction.Size(m)
}
func (m *Eviction) XXX_DiscardUnknown() {
	xxx_messageInfo_Eviction.DiscardUnknown(m)
}

var xxx_messageInfo_Eviction proto.InternalMessageInfo

func (m *Eviction) GetMetadata() *v1.ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Eviction) GetDeleteOptions() *v1.DeleteOptions {
	if m != nil {
		return m.DeleteOptions
	}
	return nil
}

// FSGroupStrategyOptions defines the strategy type and options used to create the strategy.
type FSGroupStrategyOptions struct {
	// rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
	// +optional
	Rule *string `protobuf:"bytes,1,opt,name=rule" json:"rule,omitempty"`
	// ranges are the allowed ranges of fs groups.  If you would like to force a single
	// fs group then supply a single range with the same start and end. Required for MustRunAs.
	// +optional
	Ranges               []*IDRange `protobuf:"bytes,2,rep,name=ranges" json:"ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FSGroupStrategyOptions) Reset()         { *m = FSGroupStrategyOptions{} }
func (m *FSGroupStrategyOptions) String() string { return proto.CompactTextString(m) }
func (*FSGroupStrategyOptions) ProtoMessage()    {}
func (*FSGroupStrategyOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{3}
}
func (m *FSGroupStrategyOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FSGroupStrategyOptions.Unmarshal(m, b)
}
func (m *FSGroupStrategyOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FSGroupStrategyOptions.Marshal(b, m, deterministic)
}
func (dst *FSGroupStrategyOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FSGroupStrategyOptions.Merge(dst, src)
}
func (m *FSGroupStrategyOptions) XXX_Size() int {
	return xxx_messageInfo_FSGroupStrategyOptions.Size(m)
}
func (m *FSGroupStrategyOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FSGroupStrategyOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FSGroupStrategyOptions proto.InternalMessageInfo

func (m *FSGroupStrategyOptions) GetRule() string {
	if m != nil && m.Rule != nil {
		return *m.Rule
	}
	return ""
}

func (m *FSGroupStrategyOptions) GetRanges() []*IDRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

// HostPortRange defines a range of host ports that will be enabled by a policy
// for pods to use.  It requires both the start and end to be defined.
type HostPortRange struct {
	// min is the start of the range, inclusive.
	Min *int32 `protobuf:"varint,1,opt,name=min" json:"min,omitempty"`
	// max is the end of the range, inclusive.
	Max                  *int32   `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostPortRange) Reset()         { *m = HostPortRange{} }
func (m *HostPortRange) String() string { return proto.CompactTextString(m) }
func (*HostPortRange) ProtoMessage()    {}
func (*HostPortRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{4}
}
func (m *HostPortRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostPortRange.Unmarshal(m, b)
}
func (m *HostPortRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostPortRange.Marshal(b, m, deterministic)
}
func (dst *HostPortRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostPortRange.Merge(dst, src)
}
func (m *HostPortRange) XXX_Size() int {
	return xxx_messageInfo_HostPortRange.Size(m)
}
func (m *HostPortRange) XXX_DiscardUnknown() {
	xxx_messageInfo_HostPortRange.DiscardUnknown(m)
}

var xxx_messageInfo_HostPortRange proto.InternalMessageInfo

func (m *HostPortRange) GetMin() int32 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *HostPortRange) GetMax() int32 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

// IDRange provides a min/max of an allowed range of IDs.
type IDRange struct {
	// min is the start of the range, inclusive.
	Min *int64 `protobuf:"varint,1,opt,name=min" json:"min,omitempty"`
	// max is the end of the range, inclusive.
	Max                  *int64   `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDRange) Reset()         { *m = IDRange{} }
func (m *IDRange) String() string { return proto.CompactTextString(m) }
func (*IDRange) ProtoMessage()    {}
func (*IDRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{5}
}
func (m *IDRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDRange.Unmarshal(m, b)
}
func (m *IDRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDRange.Marshal(b, m, deterministic)
}
func (dst *IDRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDRange.Merge(dst, src)
}
func (m *IDRange) XXX_Size() int {
	return xxx_messageInfo_IDRange.Size(m)
}
func (m *IDRange) XXX_DiscardUnknown() {
	xxx_messageInfo_IDRange.DiscardUnknown(m)
}

var xxx_messageInfo_IDRange proto.InternalMessageInfo

func (m *IDRange) GetMin() int64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *IDRange) GetMax() int64 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

// PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
type PodDisruptionBudget struct {
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Specification of the desired behavior of the PodDisruptionBudget.
	Spec *PodDisruptionBudgetSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Most recently observed status of the PodDisruptionBudget.
	Status               *PodDisruptionBudgetStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PodDisruptionBudget) Reset()         { *m = PodDisruptionBudget{} }
func (m *PodDisruptionBudget) String() string { return proto.CompactTextString(m) }
func (*PodDisruptionBudget) ProtoMessage()    {}
func (*PodDisruptionBudget) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{6}
}
func (m *PodDisruptionBudget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodDisruptionBudget.Unmarshal(m, b)
}
func (m *PodDisruptionBudget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodDisruptionBudget.Marshal(b, m, deterministic)
}
func (dst *PodDisruptionBudget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodDisruptionBudget.Merge(dst, src)
}
func (m *PodDisruptionBudget) XXX_Size() int {
	return xxx_messageInfo_PodDisruptionBudget.Size(m)
}
func (m *PodDisruptionBudget) XXX_DiscardUnknown() {
	xxx_messageInfo_PodDisruptionBudget.DiscardUnknown(m)
}

var xxx_messageInfo_PodDisruptionBudget proto.InternalMessageInfo

func (m *PodDisruptionBudget) GetMetadata() *v1.ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PodDisruptionBudget) GetSpec() *PodDisruptionBudgetSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PodDisruptionBudget) GetStatus() *PodDisruptionBudgetStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
type PodDisruptionBudgetList struct {
	Metadata             *v1.ListMeta           `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Items                []*PodDisruptionBudget `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PodDisruptionBudgetList) Reset()         { *m = PodDisruptionBudgetList{} }
func (m *PodDisruptionBudgetList) String() string { return proto.CompactTextString(m) }
func (*PodDisruptionBudgetList) ProtoMessage()    {}
func (*PodDisruptionBudgetList) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{7}
}
func (m *PodDisruptionBudgetList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodDisruptionBudgetList.Unmarshal(m, b)
}
func (m *PodDisruptionBudgetList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodDisruptionBudgetList.Marshal(b, m, deterministic)
}
func (dst *PodDisruptionBudgetList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodDisruptionBudgetList.Merge(dst, src)
}
func (m *PodDisruptionBudgetList) XXX_Size() int {
	return xxx_messageInfo_PodDisruptionBudgetList.Size(m)
}
func (m *PodDisruptionBudgetList) XXX_DiscardUnknown() {
	xxx_messageInfo_PodDisruptionBudgetList.DiscardUnknown(m)
}

var xxx_messageInfo_PodDisruptionBudgetList proto.InternalMessageInfo

func (m *PodDisruptionBudgetList) GetMetadata() *v1.ListMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PodDisruptionBudgetList) GetItems() []*PodDisruptionBudget {
	if m != nil {
		return m.Items
	}
	return nil
}

// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
type PodDisruptionBudgetSpec struct {
	// An eviction is allowed if at least "minAvailable" pods selected by
	// "selector" will still be available after the eviction, i.e. even in the
	// absence of the evicted pod.  So for example you can prevent all voluntary
	// evictions by specifying "100%".
	MinAvailable *intstr.IntOrString `protobuf:"bytes,1,opt,name=minAvailable" json:"minAvailable,omitempty"`
	// Label query over pods whose evictions are managed by the disruption
	// budget.
	Selector *v1.LabelSelector `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	// An eviction is allowed if at most "maxUnavailable" pods selected by
	// "selector" are unavailable after the eviction, i.e. even in absence of
	// the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	MaxUnavailable       *intstr.IntOrString `protobuf:"bytes,3,opt,name=maxUnavailable" json:"maxUnavailable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PodDisruptionBudgetSpec) Reset()         { *m = PodDisruptionBudgetSpec{} }
func (m *PodDisruptionBudgetSpec) String() string { return proto.CompactTextString(m) }
func (*PodDisruptionBudgetSpec) ProtoMessage()    {}
func (*PodDisruptionBudgetSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{8}
}
func (m *PodDisruptionBudgetSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodDisruptionBudgetSpec.Unmarshal(m, b)
}
func (m *PodDisruptionBudgetSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodDisruptionBudgetSpec.Marshal(b, m, deterministic)
}
func (dst *PodDisruptionBudgetSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodDisruptionBudgetSpec.Merge(dst, src)
}
func (m *PodDisruptionBudgetSpec) XXX_Size() int {
	return xxx_messageInfo_PodDisruptionBudgetSpec.Size(m)
}
func (m *PodDisruptionBudgetSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PodDisruptionBudgetSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PodDisruptionBudgetSpec proto.InternalMessageInfo

func (m *PodDisruptionBudgetSpec) GetMinAvailable() *intstr.IntOrString {
	if m != nil {
		return m.MinAvailable
	}
	return nil
}

func (m *PodDisruptionBudgetSpec) GetSelector() *v1.LabelSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *PodDisruptionBudgetSpec) GetMaxUnavailable() *intstr.IntOrString {
	if m != nil {
		return m.MaxUnavailable
	}
	return nil
}

// PodDisruptionBudgetStatus represents information about the status of a
// PodDisruptionBudget. Status may trail the actual state of a system.
type PodDisruptionBudgetStatus struct {
	// Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other
	// status informatio is valid only if observedGeneration equals to PDB's object generation.
	// +optional
	ObservedGeneration *int64 `protobuf:"varint,1,opt,name=observedGeneration" json:"observedGeneration,omitempty"`
	// DisruptedPods contains information about pods whose eviction was
	// processed by the API server eviction subresource handler but has not
	// yet been observed by the PodDisruptionBudget controller.
	// A pod will be in this map from the time when the API server processed the
	// eviction request to the time when the pod is seen by PDB controller
	// as having been marked for deletion (or after a timeout). The key in the map is the name of the pod
	// and the value is the time when the API server processed the eviction request. If
	// the deletion didn't occur and a pod is still there it will be removed from
	// the list automatically by PodDisruptionBudget controller after some time.
	// If everything goes smooth this map should be empty for the most of the time.
	// Large number of entries in the map may indicate problems with pod deletions.
	// +optional
	DisruptedPods map[string]*v1.Time `protobuf:"bytes,2,rep,name=disruptedPods" json:"disruptedPods,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Number of pod disruptions that are currently allowed.
	DisruptionsAllowed *int32 `protobuf:"varint,3,opt,name=disruptionsAllowed" json:"disruptionsAllowed,omitempty"`
	// current number of healthy pods
	CurrentHealthy *int32 `protobuf:"varint,4,opt,name=currentHealthy" json:"currentHealthy,omitempty"`
	// minimum desired number of healthy pods
	DesiredHealthy *int32 `protobuf:"varint,5,opt,name=desiredHealthy" json:"desiredHealthy,omitempty"`
	// total number of pods counted by this disruption budget
	ExpectedPods         *int32   `protobuf:"varint,6,opt,name=expectedPods" json:"expectedPods,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodDisruptionBudgetStatus) Reset()         { *m = PodDisruptionBudgetStatus{} }
func (m *PodDisruptionBudgetStatus) String() string { return proto.CompactTextString(m) }
func (*PodDisruptionBudgetStatus) ProtoMessage()    {}
func (*PodDisruptionBudgetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{9}
}
func (m *PodDisruptionBudgetStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodDisruptionBudgetStatus.Unmarshal(m, b)
}
func (m *PodDisruptionBudgetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodDisruptionBudgetStatus.Marshal(b, m, deterministic)
}
func (dst *PodDisruptionBudgetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodDisruptionBudgetStatus.Merge(dst, src)
}
func (m *PodDisruptionBudgetStatus) XXX_Size() int {
	return xxx_messageInfo_PodDisruptionBudgetStatus.Size(m)
}
func (m *PodDisruptionBudgetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PodDisruptionBudgetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PodDisruptionBudgetStatus proto.InternalMessageInfo

func (m *PodDisruptionBudgetStatus) GetObservedGeneration() int64 {
	if m != nil && m.ObservedGeneration != nil {
		return *m.ObservedGeneration
	}
	return 0
}

func (m *PodDisruptionBudgetStatus) GetDisruptedPods() map[string]*v1.Time {
	if m != nil {
		return m.DisruptedPods
	}
	return nil
}

func (m *PodDisruptionBudgetStatus) GetDisruptionsAllowed() int32 {
	if m != nil && m.DisruptionsAllowed != nil {
		return *m.DisruptionsAllowed
	}
	return 0
}

func (m *PodDisruptionBudgetStatus) GetCurrentHealthy() int32 {
	if m != nil && m.CurrentHealthy != nil {
		return *m.CurrentHealthy
	}
	return 0
}

func (m *PodDisruptionBudgetStatus) GetDesiredHealthy() int32 {
	if m != nil && m.DesiredHealthy != nil {
		return *m.DesiredHealthy
	}
	return 0
}

func (m *PodDisruptionBudgetStatus) GetExpectedPods() int32 {
	if m != nil && m.ExpectedPods != nil {
		return *m.ExpectedPods
	}
	return 0
}

// PodSecurityPolicy governs the ability to make requests that affect the Security Context
// that will be applied to a pod and container.
type PodSecurityPolicy struct {
	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// spec defines the policy enforced.
	// +optional
	Spec                 *PodSecurityPolicySpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PodSecurityPolicy) Reset()         { *m = PodSecurityPolicy{} }
func (m *PodSecurityPolicy) String() string { return proto.CompactTextString(m) }
func (*PodSecurityPolicy) ProtoMessage()    {}
func (*PodSecurityPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{10}
}
func (m *PodSecurityPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodSecurityPolicy.Unmarshal(m, b)
}
func (m *PodSecurityPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodSecurityPolicy.Marshal(b, m, deterministic)
}
func (dst *PodSecurityPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSecurityPolicy.Merge(dst, src)
}
func (m *PodSecurityPolicy) XXX_Size() int {
	return xxx_messageInfo_PodSecurityPolicy.Size(m)
}
func (m *PodSecurityPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSecurityPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_PodSecurityPolicy proto.InternalMessageInfo

func (m *PodSecurityPolicy) GetMetadata() *v1.ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PodSecurityPolicy) GetSpec() *PodSecurityPolicySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// PodSecurityPolicyList is a list of PodSecurityPolicy objects.
type PodSecurityPolicyList struct {
	// Standard list metadata.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// items is a list of schema objects.
	Items                []*PodSecurityPolicy `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PodSecurityPolicyList) Reset()         { *m = PodSecurityPolicyList{} }
func (m *PodSecurityPolicyList) String() string { return proto.CompactTextString(m) }
func (*PodSecurityPolicyList) ProtoMessage()    {}
func (*PodSecurityPolicyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{11}
}
func (m *PodSecurityPolicyList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodSecurityPolicyList.Unmarshal(m, b)
}
func (m *PodSecurityPolicyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodSecurityPolicyList.Marshal(b, m, deterministic)
}
func (dst *PodSecurityPolicyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSecurityPolicyList.Merge(dst, src)
}
func (m *PodSecurityPolicyList) XXX_Size() int {
	return xxx_messageInfo_PodSecurityPolicyList.Size(m)
}
func (m *PodSecurityPolicyList) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSecurityPolicyList.DiscardUnknown(m)
}

var xxx_messageInfo_PodSecurityPolicyList proto.InternalMessageInfo

func (m *PodSecurityPolicyList) GetMetadata() *v1.ListMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PodSecurityPolicyList) GetItems() []*PodSecurityPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// PodSecurityPolicySpec defines the policy enforced.
type PodSecurityPolicySpec struct {
	// privileged determines if a pod can request to be run as privileged.
	// +optional
	Privileged *bool `protobuf:"varint,1,opt,name=privileged" json:"privileged,omitempty"`
	// defaultAddCapabilities is the default set of capabilities that will be added to the container
	// unless the pod spec specifically drops the capability.  You may not list a capability in both
	// defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly
	// allowed, and need not be included in the allowedCapabilities list.
	// +optional
	DefaultAddCapabilities []string `protobuf:"bytes,2,rep,name=defaultAddCapabilities" json:"defaultAddCapabilities,omitempty"`
	// requiredDropCapabilities are the capabilities that will be dropped from the container.  These
	// are required to be dropped and cannot be added.
	// +optional
	RequiredDropCapabilities []string `protobuf:"bytes,3,rep,name=requiredDropCapabilities" json:"requiredDropCapabilities,omitempty"`
	// allowedCapabilities is a list of capabilities that can be requested to add to the container.
	// Capabilities in this field may be added at the pod author's discretion.
	// You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
	// +optional
	AllowedCapabilities []string `protobuf:"bytes,4,rep,name=allowedCapabilities" json:"allowedCapabilities,omitempty"`
	// volumes is a white list of allowed volume plugins. Empty indicates that
	// no volumes may be used. To allow all volumes you may use '*'.
	// +optional
	Volumes []string `protobuf:"bytes,5,rep,name=volumes" json:"volumes,omitempty"`
	// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
	// +optional
	HostNetwork *bool `protobuf:"varint,6,opt,name=hostNetwork" json:"hostNetwork,omitempty"`
	// hostPorts determines which host port ranges are allowed to be exposed.
	// +optional
	HostPorts []*HostPortRange `protobuf:"bytes,7,rep,name=hostPorts" json:"hostPorts,omitempty"`
	// hostPID determines if the policy allows the use of HostPID in the pod spec.
	// +optional
	HostPID *bool `protobuf:"varint,8,opt,name=hostPID" json:"hostPID,omitempty"`
	// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
	// +optional
	HostIPC *bool `protobuf:"varint,9,opt,name=hostIPC" json:"hostIPC,omitempty"`
	// seLinux is the strategy that will dictate the allowable labels that may be set.
	SeLinux *SELinuxStrategyOptions `protobuf:"bytes,10,opt,name=seLinux" json:"seLinux,omitempty"`
	// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
	RunAsUser *RunAsUserStrategyOptions `protobuf:"bytes,11,opt,name=runAsUser" json:"runAsUser,omitempty"`
	// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
	SupplementalGroups *SupplementalGroupsStrategyOptions `protobuf:"bytes,12,opt,name=supplementalGroups" json:"supplementalGroups,omitempty"`
	// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
	FsGroup *FSGroupStrategyOptions `protobuf:"bytes,13,opt,name=fsGroup" json:"fsGroup,omitempty"`
	// readOnlyRootFilesystem when set to true will force containers to run with a read only root file
	// system.  If the container specifically requests to run with a non-read only root file system
	// the PSP should deny the pod.
	// If set to false the container may run with a read only root file system if it wishes but it
	// will not be forced to.
	// +optional
	ReadOnlyRootFilesystem *bool `protobuf:"varint,14,opt,name=readOnlyRootFilesystem" json:"readOnlyRootFilesystem,omitempty"`
	// defaultAllowPrivilegeEscalation controls the default setting for whether a
	// process can gain more privileges than its parent process.
	// +optional
	DefaultAllowPrivilegeEscalation *bool `protobuf:"varint,15,opt,name=defaultAllowPrivilegeEscalation" json:"defaultAllowPrivilegeEscalation,omitempty"`
	// allowPrivilegeEscalation determines if a pod can request to allow
	// privilege escalation. If unspecified, defaults to true.
	// +optional
	AllowPrivilegeEscalation *bool `protobuf:"varint,16,opt,name=allowPrivilegeEscalation" json:"allowPrivilegeEscalation,omitempty"`
	// allowedHostPaths is a white list of allowed host paths. Empty indicates
	// that all host paths may be used.
	// +optional
	AllowedHostPaths []*AllowedHostPath `protobuf:"bytes,17,rep,name=allowedHostPaths" json:"allowedHostPaths,omitempty"`
	// allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all
	// Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes
	// is allowed in the "volumes" field.
	// +optional
	AllowedFlexVolumes []*AllowedFlexVolume `protobuf:"bytes,18,rep,name=allowedFlexVolumes" json:"allowedFlexVolumes,omitempty"`
	// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none.
	// Each entry is either a plain sysctl name or ends in "*" in which case it is considered
	// as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed.
	// Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
	//
	// Examples:
	// e.g. "foo/*" allows "foo/bar", "foo/baz", etc.
	// e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
	// +optional
	AllowedUnsafeSysctls []string `protobuf:"bytes,19,rep,name=allowedUnsafeSysctls" json:"allowedUnsafeSysctls,omitempty"`
	// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none.
	// Each entry is either a plain sysctl name or ends in "*" in which case it is considered
	// as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
	//
	// Examples:
	// e.g. "foo/*" forbids "foo/bar", "foo/baz", etc.
	// e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
	// +optional
	ForbiddenSysctls []string `protobuf:"bytes,20,rep,name=forbiddenSysctls" json:"forbiddenSysctls,omitempty"`
	// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes.
	// Empty or nil indicates that only the DefaultProcMountType may be used.
	// This requires the ProcMountType feature flag to be enabled.
	// +optional
	AllowedProcMountTypes []string `protobuf:"bytes,21,rep,name=allowedProcMountTypes" json:"allowedProcMountTypes,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *PodSecurityPolicySpec) Reset()         { *m = PodSecurityPolicySpec{} }
func (m *PodSecurityPolicySpec) String() string { return proto.CompactTextString(m) }
func (*PodSecurityPolicySpec) ProtoMessage()    {}
func (*PodSecurityPolicySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{12}
}
func (m *PodSecurityPolicySpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodSecurityPolicySpec.Unmarshal(m, b)
}
func (m *PodSecurityPolicySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodSecurityPolicySpec.Marshal(b, m, deterministic)
}
func (dst *PodSecurityPolicySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSecurityPolicySpec.Merge(dst, src)
}
func (m *PodSecurityPolicySpec) XXX_Size() int {
	return xxx_messageInfo_PodSecurityPolicySpec.Size(m)
}
func (m *PodSecurityPolicySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSecurityPolicySpec.DiscardUnknown(m)
}

var xxx_messageInfo_PodSecurityPolicySpec proto.InternalMessageInfo

func (m *PodSecurityPolicySpec) GetPrivileged() bool {
	if m != nil && m.Privileged != nil {
		return *m.Privileged
	}
	return false
}

func (m *PodSecurityPolicySpec) GetDefaultAddCapabilities() []string {
	if m != nil {
		return m.DefaultAddCapabilities
	}
	return nil
}

func (m *PodSecurityPolicySpec) GetRequiredDropCapabilities() []string {
	if m != nil {
		return m.RequiredDropCapabilities
	}
	return nil
}

func (m *PodSecurityPolicySpec) GetAllowedCapabilities() []string {
	if m != nil {
		return m.AllowedCapabilities
	}
	return nil
}

func (m *PodSecurityPolicySpec) GetVolumes() []string {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *PodSecurityPolicySpec) GetHostNetwork() bool {
	if m != nil && m.HostNetwork != nil {
		return *m.HostNetwork
	}
	return false
}

func (m *PodSecurityPolicySpec) GetHostPorts() []*HostPortRange {
	if m != nil {
		return m.HostPorts
	}
	return nil
}

func (m *PodSecurityPolicySpec) GetHostPID() bool {
	if m != nil && m.HostPID != nil {
		return *m.HostPID
	}
	return false
}

func (m *PodSecurityPolicySpec) GetHostIPC() bool {
	if m != nil && m.HostIPC != nil {
		return *m.HostIPC
	}
	return false
}

func (m *PodSecurityPolicySpec) GetSeLinux() *SELinuxStrategyOptions {
	if m != nil {
		return m.SeLinux
	}
	return nil
}

func (m *PodSecurityPolicySpec) GetRunAsUser() *RunAsUserStrategyOptions {
	if m != nil {
		return m.RunAsUser
	}
	return nil
}

func (m *PodSecurityPolicySpec) GetSupplementalGroups() *SupplementalGroupsStrategyOptions {
	if m != nil {
		return m.SupplementalGroups
	}
	return nil
}

func (m *PodSecurityPolicySpec) GetFsGroup() *FSGroupStrategyOptions {
	if m != nil {
		return m.FsGroup
	}
	return nil
}

func (m *PodSecurityPolicySpec) GetReadOnlyRootFilesystem() bool {
	if m != nil && m.ReadOnlyRootFilesystem != nil {
		return *m.ReadOnlyRootFilesystem
	}
	return false
}

func (m *PodSecurityPolicySpec) GetDefaultAllowPrivilegeEscalation() bool {
	if m != nil && m.DefaultAllowPrivilegeEscalation != nil {
		return *m.DefaultAllowPrivilegeEscalation
	}
	return false
}

func (m *PodSecurityPolicySpec) GetAllowPrivilegeEscalation() bool {
	if m != nil && m.AllowPrivilegeEscalation != nil {
		return *m.AllowPrivilegeEscalation
	}
	return false
}

func (m *PodSecurityPolicySpec) GetAllowedHostPaths() []*AllowedHostPath {
	if m != nil {
		return m.AllowedHostPaths
	}
	return nil
}

func (m *PodSecurityPolicySpec) GetAllowedFlexVolumes() []*AllowedFlexVolume {
	if m != nil {
		return m.AllowedFlexVolumes
	}
	return nil
}

func (m *PodSecurityPolicySpec) GetAllowedUnsafeSysctls() []string {
	if m != nil {
		return m.AllowedUnsafeSysctls
	}
	return nil
}

func (m *PodSecurityPolicySpec) GetForbiddenSysctls() []string {
	if m != nil {
		return m.ForbiddenSysctls
	}
	return nil
}

func (m *PodSecurityPolicySpec) GetAllowedProcMountTypes() []string {
	if m != nil {
		return m.AllowedProcMountTypes
	}
	return nil
}

// RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.
type RunAsUserStrategyOptions struct {
	// rule is the strategy that will dictate the allowable RunAsUser values that may be set.
	Rule *string `protobuf:"bytes,1,opt,name=rule" json:"rule,omitempty"`
	// ranges are the allowed ranges of uids that may be used. If you would like to force a single uid
	// then supply a single range with the same start and end. Required for MustRunAs.
	// +optional
	Ranges               []*IDRange `protobuf:"bytes,2,rep,name=ranges" json:"ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RunAsUserStrategyOptions) Reset()         { *m = RunAsUserStrategyOptions{} }
func (m *RunAsUserStrategyOptions) String() string { return proto.CompactTextString(m) }
func (*RunAsUserStrategyOptions) ProtoMessage()    {}
func (*RunAsUserStrategyOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{13}
}
func (m *RunAsUserStrategyOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunAsUserStrategyOptions.Unmarshal(m, b)
}
func (m *RunAsUserStrategyOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunAsUserStrategyOptions.Marshal(b, m, deterministic)
}
func (dst *RunAsUserStrategyOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunAsUserStrategyOptions.Merge(dst, src)
}
func (m *RunAsUserStrategyOptions) XXX_Size() int {
	return xxx_messageInfo_RunAsUserStrategyOptions.Size(m)
}
func (m *RunAsUserStrategyOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RunAsUserStrategyOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RunAsUserStrategyOptions proto.InternalMessageInfo

func (m *RunAsUserStrategyOptions) GetRule() string {
	if m != nil && m.Rule != nil {
		return *m.Rule
	}
	return ""
}

func (m *RunAsUserStrategyOptions) GetRanges() []*IDRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

// SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.
type SELinuxStrategyOptions struct {
	// rule is the strategy that will dictate the allowable labels that may be set.
	Rule *string `protobuf:"bytes,1,opt,name=rule" json:"rule,omitempty"`
	// seLinuxOptions required to run as; required for MustRunAs
	// More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	// +optional
	SeLinuxOptions       *v11.SELinuxOptions `protobuf:"bytes,2,opt,name=seLinuxOptions" json:"seLinuxOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SELinuxStrategyOptions) Reset()         { *m = SELinuxStrategyOptions{} }
func (m *SELinuxStrategyOptions) String() string { return proto.CompactTextString(m) }
func (*SELinuxStrategyOptions) ProtoMessage()    {}
func (*SELinuxStrategyOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{14}
}
func (m *SELinuxStrategyOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SELinuxStrategyOptions.Unmarshal(m, b)
}
func (m *SELinuxStrategyOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SELinuxStrategyOptions.Marshal(b, m, deterministic)
}
func (dst *SELinuxStrategyOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SELinuxStrategyOptions.Merge(dst, src)
}
func (m *SELinuxStrategyOptions) XXX_Size() int {
	return xxx_messageInfo_SELinuxStrategyOptions.Size(m)
}
func (m *SELinuxStrategyOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SELinuxStrategyOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SELinuxStrategyOptions proto.InternalMessageInfo

func (m *SELinuxStrategyOptions) GetRule() string {
	if m != nil && m.Rule != nil {
		return *m.Rule
	}
	return ""
}

func (m *SELinuxStrategyOptions) GetSeLinuxOptions() *v11.SELinuxOptions {
	if m != nil {
		return m.SeLinuxOptions
	}
	return nil
}

// SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.
type SupplementalGroupsStrategyOptions struct {
	// rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
	// +optional
	Rule *string `protobuf:"bytes,1,opt,name=rule" json:"rule,omitempty"`
	// ranges are the allowed ranges of supplemental groups.  If you would like to force a single
	// supplemental group then supply a single range with the same start and end. Required for MustRunAs.
	// +optional
	Ranges               []*IDRange `protobuf:"bytes,2,rep,name=ranges" json:"ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SupplementalGroupsStrategyOptions) Reset()         { *m = SupplementalGroupsStrategyOptions{} }
func (m *SupplementalGroupsStrategyOptions) String() string { return proto.CompactTextString(m) }
func (*SupplementalGroupsStrategyOptions) ProtoMessage()    {}
func (*SupplementalGroupsStrategyOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_a110b8e44c7cd32c, []int{15}
}
func (m *SupplementalGroupsStrategyOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SupplementalGroupsStrategyOptions.Unmarshal(m, b)
}
func (m *SupplementalGroupsStrategyOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SupplementalGroupsStrategyOptions.Marshal(b, m, deterministic)
}
func (dst *SupplementalGroupsStrategyOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplementalGroupsStrategyOptions.Merge(dst, src)
}
func (m *SupplementalGroupsStrategyOptions) XXX_Size() int {
	return xxx_messageInfo_SupplementalGroupsStrategyOptions.Size(m)
}
func (m *SupplementalGroupsStrategyOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplementalGroupsStrategyOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SupplementalGroupsStrategyOptions proto.InternalMessageInfo

func (m *SupplementalGroupsStrategyOptions) GetRule() string {
	if m != nil && m.Rule != nil {
		return *m.Rule
	}
	return ""
}

func (m *SupplementalGroupsStrategyOptions) GetRanges() []*IDRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func init() {
	proto.RegisterType((*AllowedFlexVolume)(nil), "k8s.io.api.policy.v1beta1.AllowedFlexVolume")
	proto.RegisterType((*AllowedHostPath)(nil), "k8s.io.api.policy.v1beta1.AllowedHostPath")
	proto.RegisterType((*Eviction)(nil), "k8s.io.api.policy.v1beta1.Eviction")
	proto.RegisterType((*FSGroupStrategyOptions)(nil), "k8s.io.api.policy.v1beta1.FSGroupStrategyOptions")
	proto.RegisterType((*HostPortRange)(nil), "k8s.io.api.policy.v1beta1.HostPortRange")
	proto.RegisterType((*IDRange)(nil), "k8s.io.api.policy.v1beta1.IDRange")
	proto.RegisterType((*PodDisruptionBudget)(nil), "k8s.io.api.policy.v1beta1.PodDisruptionBudget")
	proto.RegisterType((*PodDisruptionBudgetList)(nil), "k8s.io.api.policy.v1beta1.PodDisruptionBudgetList")
	proto.RegisterType((*PodDisruptionBudgetSpec)(nil), "k8s.io.api.policy.v1beta1.PodDisruptionBudgetSpec")
	proto.RegisterType((*PodDisruptionBudgetStatus)(nil), "k8s.io.api.policy.v1beta1.PodDisruptionBudgetStatus")
	proto.RegisterMapType((map[string]*v1.Time)(nil), "k8s.io.api.policy.v1beta1.PodDisruptionBudgetStatus.DisruptedPodsEntry")
	proto.RegisterType((*PodSecurityPolicy)(nil), "k8s.io.api.policy.v1beta1.PodSecurityPolicy")
	proto.RegisterType((*PodSecurityPolicyList)(nil), "k8s.io.api.policy.v1beta1.PodSecurityPolicyList")
	proto.RegisterType((*PodSecurityPolicySpec)(nil), "k8s.io.api.policy.v1beta1.PodSecurityPolicySpec")
	proto.RegisterType((*RunAsUserStrategyOptions)(nil), "k8s.io.api.policy.v1beta1.RunAsUserStrategyOptions")
	proto.RegisterType((*SELinuxStrategyOptions)(nil), "k8s.io.api.policy.v1beta1.SELinuxStrategyOptions")
	proto.RegisterType((*SupplementalGroupsStrategyOptions)(nil), "k8s.io.api.policy.v1beta1.SupplementalGroupsStrategyOptions")
}

func init() {
	proto.RegisterFile("github.com/solo-io/supergloo/vendor/k8s.io/api/policy/v1beta1/generated.proto", fileDescriptor_generated_a110b8e44c7cd32c)
}

var fileDescriptor_generated_a110b8e44c7cd32c = []byte{
	// 1259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x72, 0xdb, 0xb6,
	0x13, 0x1e, 0x45, 0xfe, 0x23, 0xad, 0x63, 0xc7, 0x41, 0x12, 0xff, 0x18, 0x1f, 0x7e, 0x4d, 0x79,
	0xe8, 0x78, 0xd2, 0x86, 0x8a, 0x9d, 0x4c, 0x26, 0x93, 0xe9, 0xa1, 0x4e, 0x64, 0x27, 0x4e, 0xed,
	0x5a, 0xa5, 0x92, 0x4c, 0xdb, 0xe9, 0x05, 0x22, 0xd7, 0x12, 0x62, 0x90, 0x60, 0x01, 0x50, 0x91,
	0x5e, 0xa5, 0x2f, 0xd0, 0x43, 0x8f, 0x7d, 0x8d, 0xbe, 0x50, 0x7b, 0xea, 0x00, 0x22, 0x6d, 0x51,
	0xa2, 0x64, 0x3b, 0xe3, 0x1b, 0xb1, 0xfb, 0x7d, 0x1f, 0x16, 0x8b, 0xc5, 0x02, 0x84, 0xa3, 0x2e,
	0xd3, 0xbd, 0xb4, 0xe3, 0x05, 0x22, 0x6a, 0x28, 0xc1, 0xc5, 0x23, 0x26, 0x1a, 0x2a, 0x4d, 0x50,
	0x76, 0xb9, 0x10, 0x8d, 0x3e, 0xc6, 0xa1, 0x90, 0x8d, 0xd3, 0xe7, 0xca, 0x63, 0xa2, 0x41, 0x13,
	0xd6, 0x48, 0x04, 0x67, 0xc1, 0xb0, 0xd1, 0xdf, 0xee, 0xa0, 0xa6, 0xdb, 0x8d, 0x2e, 0xc6, 0x28,
	0xa9, 0xc6, 0xd0, 0x4b, 0xa4, 0xd0, 0x82, 0xdc, 0x1f, 0x41, 0x3d, 0x9a, 0x30, 0x6f, 0x04, 0xf5,
	0x32, 0xe8, 0xa6, 0x3b, 0xa6, 0x12, 0x08, 0x89, 0x8d, 0xfe, 0x14, 0x7d, 0xf3, 0xe9, 0x39, 0x26,
	0xa2, 0x41, 0x8f, 0xc5, 0x28, 0x87, 0x8d, 0xe4, 0xb4, 0x6b, 0x0c, 0xaa, 0x11, 0xa1, 0xa6, 0x65,
	0xac, 0xc6, 0x2c, 0x96, 0x4c, 0x63, 0xcd, 0x22, 0x9c, 0x22, 0x3c, 0xbb, 0x88, 0xa0, 0x82, 0x1e,
	0x46, 0x74, 0x8a, 0xf7, 0x64, 0x16, 0x2f, 0xd5, 0x8c, 0x37, 0x58, 0xac, 0x95, 0x96, 0x93, 0x24,
	0xf7, 0x6b, 0xb8, 0xbd, 0xcb, 0xb9, 0xf8, 0x84, 0xe1, 0x3e, 0xc7, 0xc1, 0x07, 0xc1, 0xd3, 0x08,
	0xc9, 0x06, 0x2c, 0x85, 0x92, 0xf5, 0x51, 0x3a, 0x95, 0x07, 0x95, 0xad, 0xba, 0x9f, 0x8d, 0xdc,
	0x23, 0xb8, 0x95, 0x81, 0xdf, 0x08, 0xa5, 0x5b, 0x54, 0xf7, 0xc8, 0xff, 0x01, 0x12, 0xaa, 0x7b,
	0x2d, 0x89, 0x27, 0x6c, 0x90, 0xc1, 0xc7, 0x2c, 0x64, 0x13, 0x6a, 0x12, 0x69, 0x78, 0x1c, 0xf3,
	0xa1, 0x73, 0xe3, 0x41, 0x65, 0xab, 0xe6, 0x9f, 0x8d, 0xdd, 0xbf, 0x2a, 0x50, 0xdb, 0xeb, 0xb3,
	0x40, 0x33, 0x11, 0x93, 0x43, 0xa8, 0x99, 0x0c, 0x86, 0x54, 0x53, 0x2b, 0xb3, 0xb2, 0xf3, 0xd8,
	0x3b, 0xdf, 0xae, 0xb3, 0x05, 0x79, 0xc9, 0x69, 0xd7, 0x18, 0x94, 0x67, 0xd0, 0x5e, 0x7f, 0xdb,
	0x3b, 0xee, 0x7c, 0xc4, 0x40, 0x1f, 0xa1, 0xa6, 0xfe, 0x99, 0x02, 0xf9, 0x19, 0x56, 0x43, 0xe4,
	0xa8, 0xf1, 0x38, 0x31, 0xea, 0xca, 0xce, 0xbd, 0xb2, 0xf3, 0xe4, 0x72, 0x92, 0xcd, 0x71, 0xaa,
	0x5f, 0x54, 0x72, 0x7b, 0xb0, 0xb1, 0xdf, 0x7e, 0x2d, 0x45, 0x9a, 0xb4, 0xb5, 0xc9, 0x64, 0x77,
	0x98, 0x79, 0x08, 0x81, 0x05, 0x99, 0x72, 0xcc, 0xb2, 0x60, 0xbf, 0xc9, 0x0b, 0x58, 0x92, 0x34,
	0xee, 0xa2, 0x89, 0xa0, 0xba, 0xb5, 0xb2, 0xe3, 0x7a, 0x33, 0x6b, 0xd0, 0x3b, 0x68, 0xfa, 0x06,
	0xea, 0x67, 0x0c, 0xf7, 0x09, 0xac, 0xda, 0x3c, 0x0b, 0xa9, 0xad, 0x83, 0xac, 0x43, 0x35, 0x62,
	0xb1, 0xd5, 0x5f, 0xf4, 0xcd, 0xa7, 0xb5, 0xd0, 0x81, 0x5d, 0x9d, 0xb1, 0xd0, 0x81, 0xfb, 0x08,
	0x96, 0x33, 0x9d, 0x71, 0x78, 0x75, 0x0a, 0x5e, 0x1d, 0xc1, 0xff, 0xa9, 0xc0, 0x9d, 0x96, 0x08,
	0x9b, 0x4c, 0xc9, 0xd4, 0x2e, 0xe3, 0x65, 0x1a, 0x76, 0x51, 0x5f, 0xf3, 0x76, 0xec, 0xc3, 0x82,
	0x4a, 0x30, 0xc8, 0x76, 0x61, 0x67, 0x4e, 0x0e, 0x4a, 0x62, 0x69, 0x27, 0x18, 0xf8, 0x96, 0x4f,
	0x0e, 0x61, 0x49, 0x69, 0xaa, 0x53, 0xe5, 0x54, 0xad, 0xd2, 0xd3, 0x2b, 0x2a, 0x59, 0xae, 0x9f,
	0x69, 0xb8, 0x7f, 0x56, 0xe0, 0x7f, 0x25, 0xa8, 0x43, 0xa6, 0x34, 0x79, 0x3b, 0xb5, 0x7e, 0xef,
	0x72, 0xeb, 0x37, 0xec, 0x89, 0xd5, 0x37, 0x61, 0x91, 0x69, 0x8c, 0xf2, 0x12, 0xf0, 0xae, 0x16,
	0xb4, 0x3f, 0x22, 0xbb, 0xbf, 0xdf, 0x28, 0x8d, 0xd6, 0x64, 0x87, 0xbc, 0x83, 0x9b, 0x11, 0x8b,
	0x77, 0xfb, 0x94, 0x71, 0xda, 0xc9, 0x2a, 0x70, 0xde, 0x8e, 0x99, 0x8e, 0xe0, 0x8d, 0x3a, 0x82,
	0x77, 0x10, 0xeb, 0x63, 0xd9, 0xd6, 0x92, 0xc5, 0x5d, 0xbf, 0xa0, 0x42, 0x8e, 0xa1, 0xa6, 0x90,
	0x63, 0xa0, 0x85, 0xbc, 0xda, 0xf9, 0x39, 0xa4, 0x1d, 0xe4, 0xed, 0x8c, 0xea, 0x9f, 0x89, 0x90,
	0x9f, 0x60, 0x2d, 0xa2, 0x83, 0xf7, 0x31, 0x3d, 0x0b, 0xb4, 0xfa, 0x99, 0x81, 0x4e, 0xe8, 0xb8,
	0x7f, 0x57, 0xe1, 0xfe, 0xcc, 0x0d, 0x27, 0x1e, 0x10, 0xd1, 0x51, 0x28, 0xfb, 0x18, 0xbe, 0x1e,
	0xf5, 0x3f, 0x26, 0xf2, 0x73, 0x51, 0xe2, 0x21, 0x11, 0xac, 0x86, 0x23, 0x25, 0x0c, 0x5b, 0x22,
	0xcc, 0x37, 0xee, 0xf5, 0xe7, 0x54, 0x9b, 0xd7, 0x1c, 0x57, 0xda, 0x8b, 0xb5, 0x1c, 0xfa, 0x45,
	0x75, 0x13, 0x5e, 0x78, 0xc6, 0x55, 0x59, 0x87, 0xb5, 0xa9, 0x59, 0xf4, 0x4b, 0x3c, 0xe4, 0x2b,
	0x58, 0x0b, 0x52, 0x29, 0x31, 0xd6, 0x6f, 0x90, 0x72, 0xdd, 0x1b, 0x3a, 0x0b, 0x16, 0x3b, 0x61,
	0x35, 0xb8, 0x10, 0x15, 0x93, 0x18, 0xe6, 0xb8, 0xc5, 0x11, 0xae, 0x68, 0x25, 0x2e, 0xdc, 0xc4,
	0x41, 0x82, 0x41, 0xbe, 0xda, 0x25, 0x8b, 0x2a, 0xd8, 0x36, 0x39, 0x90, 0xe9, 0x85, 0x98, 0x7e,
	0x72, 0x8a, 0xc3, 0xac, 0xe1, 0x99, 0x4f, 0xf2, 0x1d, 0x2c, 0xf6, 0x29, 0x4f, 0x31, 0x2b, 0x98,
	0x87, 0x97, 0x2b, 0x98, 0x77, 0x2c, 0x42, 0x7f, 0x44, 0x7c, 0x71, 0xe3, 0x79, 0xc5, 0xfd, 0xa3,
	0x02, 0xb7, 0x5b, 0x22, 0x6c, 0x63, 0x90, 0x4a, 0xa6, 0x87, 0x2d, 0x9b, 0xeb, 0x6b, 0xee, 0x49,
	0xcd, 0x42, 0x4f, 0x7a, 0x3c, 0x7f, 0x6f, 0x8b, 0x91, 0x9c, 0x77, 0x24, 0x13, 0xe9, 0xbd, 0x29,
	0xff, 0xb5, 0x77, 0x90, 0x97, 0xc5, 0x0e, 0xf2, 0xcd, 0x55, 0x82, 0xcd, 0xfb, 0xc7, 0xbf, 0xf5,
	0x92, 0x48, 0x6d, 0xf7, 0x30, 0x77, 0xb8, 0x64, 0x7d, 0xc6, 0xb1, 0x8b, 0xa1, 0x8d, 0xb5, 0xe6,
	0x8f, 0x59, 0xc8, 0x33, 0xd8, 0x08, 0xf1, 0x84, 0xa6, 0x5c, 0xef, 0x86, 0xe1, 0x2b, 0x9a, 0xd0,
	0x0e, 0xe3, 0x4c, 0xb3, 0xec, 0x4e, 0xab, 0xfb, 0x33, 0xbc, 0xe4, 0x05, 0x38, 0x12, 0x7f, 0x4b,
	0x4d, 0xa9, 0x35, 0xa5, 0x48, 0x0a, 0xcc, 0xaa, 0x65, 0xce, 0xf4, 0x93, 0xc7, 0x70, 0x87, 0x8e,
	0xca, 0xbd, 0x40, 0x5b, 0xb0, 0xb4, 0x32, 0x17, 0x71, 0x60, 0xb9, 0x6f, 0x9f, 0x2f, 0xca, 0x59,
	0xb4, 0xa8, 0x7c, 0x48, 0x1e, 0xc0, 0x4a, 0x4f, 0x28, 0xfd, 0x03, 0xea, 0x4f, 0x42, 0x9e, 0xda,
	0xf2, 0xae, 0xf9, 0xe3, 0x26, 0xb2, 0x0f, 0xf5, 0x5e, 0x76, 0xd3, 0x2a, 0x67, 0xd9, 0xe6, 0x78,
	0x6b, 0x4e, 0x8e, 0x0b, 0xb7, 0xb2, 0x7f, 0x4e, 0x35, 0x31, 0xd8, 0xc1, 0x41, 0xd3, 0xa9, 0xd9,
	0x59, 0xf2, 0x61, 0xee, 0x39, 0x68, 0xbd, 0x72, 0xea, 0xe7, 0x9e, 0x83, 0xd6, 0x2b, 0xf2, 0x3d,
	0x2c, 0x2b, 0x3c, 0x64, 0x71, 0x3a, 0x70, 0xc0, 0x96, 0xc9, 0xf6, 0x9c, 0x99, 0xdb, 0x7b, 0x16,
	0x39, 0xf1, 0xf2, 0xf0, 0x73, 0x05, 0xf2, 0x23, 0xd4, 0x65, 0x1a, 0xef, 0xaa, 0xf7, 0x0a, 0xa5,
	0xb3, 0x32, 0xd5, 0xb3, 0x27, 0xe5, 0xfc, 0x1c, 0x3b, 0x29, 0x78, 0xae, 0x42, 0x38, 0x10, 0x95,
	0x26, 0x09, 0xc7, 0x08, 0x63, 0x4d, 0xb9, 0x7d, 0xf9, 0x28, 0xe7, 0xa6, 0xd5, 0xfe, 0x76, 0x5e,
	0xa8, 0x53, 0xa4, 0xc9, 0x49, 0x4a, 0x74, 0x4d, 0x36, 0x4e, 0x94, 0xfd, 0x76, 0x56, 0x2f, 0xcc,
	0x46, 0xf9, 0x3b, 0xcc, 0xcf, 0x15, 0x4c, 0xe1, 0xe6, 0x8f, 0x4d, 0x5f, 0x08, 0xbd, 0xcf, 0x38,
	0xaa, 0xa1, 0xd2, 0x18, 0x39, 0x6b, 0x76, 0x0f, 0x66, 0x78, 0xc9, 0x1b, 0xf8, 0x22, 0x2f, 0x69,
	0x53, 0x68, 0xad, 0xfc, 0x28, 0xec, 0xa9, 0x80, 0xf2, 0xd1, 0xe5, 0x71, 0xcb, 0x0a, 0x5c, 0x04,
	0x33, 0x47, 0x80, 0xce, 0x92, 0x58, 0xb7, 0x12, 0x33, 0xfd, 0xe4, 0x03, 0xac, 0xd3, 0xe2, 0x6b,
	0x5b, 0x39, 0xb7, 0x6d, 0x6d, 0x3e, 0x9c, 0x93, 0x93, 0x89, 0x07, 0xba, 0x3f, 0xa5, 0x41, 0x7e,
	0x05, 0x42, 0x27, 0x9f, 0xfc, 0xca, 0x21, 0x17, 0x76, 0x96, 0xa9, 0xff, 0x04, 0xbf, 0x44, 0x87,
	0xec, 0xc0, 0xdd, 0xcc, 0xfa, 0x3e, 0x56, 0xf4, 0x04, 0xdb, 0x43, 0x15, 0x68, 0xae, 0x9c, 0x3b,
	0xf6, 0x4c, 0x96, 0xfa, 0xc8, 0x43, 0x58, 0x3f, 0x11, 0xb2, 0xc3, 0xc2, 0x10, 0xe3, 0x1c, 0x7f,
	0xd7, 0xe2, 0xa7, 0xec, 0xe4, 0x29, 0xdc, 0xcb, 0x34, 0x5a, 0x52, 0x04, 0x47, 0x22, 0x8d, 0xf5,
	0xbb, 0x61, 0x82, 0xca, 0xb9, 0x67, 0x09, 0xe5, 0x4e, 0xf7, 0x23, 0x38, 0xb3, 0x6a, 0xfd, 0xda,
	0x9f, 0xed, 0x03, 0xd8, 0x28, 0x3f, 0xa6, 0xa5, 0x33, 0xbd, 0x85, 0xb5, 0xec, 0xf0, 0x16, 0x7f,
	0x55, 0x0a, 0x33, 0x9a, 0x3f, 0x52, 0x73, 0x35, 0x64, 0xba, 0x79, 0xa1, 0x4f, 0x30, 0x5d, 0x05,
	0x5f, 0x5e, 0x78, 0xea, 0xae, 0x7b, 0xb9, 0x2f, 0xeb, 0xbf, 0x2c, 0x67, 0xae, 0xff, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x6a, 0xba, 0x8d, 0x8f, 0xaf, 0x0f, 0x00, 0x00,
}
