// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/supergloo/vendor/k8s.io/api/batch/v1/generated.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import v11 "k8s.io/api/core/v1"
import v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
import _ "k8s.io/apimachinery/pkg/runtime"
import _ "k8s.io/apimachinery/pkg/runtime/schema"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Job represents the configuration of a single job.
type Job struct {
	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Specification of the desired behavior of a job.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
	// +optional
	Spec *JobSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Current status of a job.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
	// +optional
	Status               *JobStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_ccb5391d0f68433d, []int{0}
}
func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (dst *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(dst, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetMetadata() *v1.ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Job) GetSpec() *JobSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Job) GetStatus() *JobStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// JobCondition describes current state of a job.
type JobCondition struct {
	// Type of job condition, Complete or Failed.
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	// Last time the condition was checked.
	// +optional
	LastProbeTime *v1.Time `protobuf:"bytes,3,opt,name=lastProbeTime" json:"lastProbeTime,omitempty"`
	// Last time the condition transit from one status to another.
	// +optional
	LastTransitionTime *v1.Time `protobuf:"bytes,4,opt,name=lastTransitionTime" json:"lastTransitionTime,omitempty"`
	// (brief) reason for the condition's last transition.
	// +optional
	Reason *string `protobuf:"bytes,5,opt,name=reason" json:"reason,omitempty"`
	// Human readable message indicating details about last transition.
	// +optional
	Message              *string  `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobCondition) Reset()         { *m = JobCondition{} }
func (m *JobCondition) String() string { return proto.CompactTextString(m) }
func (*JobCondition) ProtoMessage()    {}
func (*JobCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_ccb5391d0f68433d, []int{1}
}
func (m *JobCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobCondition.Unmarshal(m, b)
}
func (m *JobCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobCondition.Marshal(b, m, deterministic)
}
func (dst *JobCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobCondition.Merge(dst, src)
}
func (m *JobCondition) XXX_Size() int {
	return xxx_messageInfo_JobCondition.Size(m)
}
func (m *JobCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_JobCondition.DiscardUnknown(m)
}

var xxx_messageInfo_JobCondition proto.InternalMessageInfo

func (m *JobCondition) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *JobCondition) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *JobCondition) GetLastProbeTime() *v1.Time {
	if m != nil {
		return m.LastProbeTime
	}
	return nil
}

func (m *JobCondition) GetLastTransitionTime() *v1.Time {
	if m != nil {
		return m.LastTransitionTime
	}
	return nil
}

func (m *JobCondition) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *JobCondition) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// JobList is a collection of jobs.
type JobList struct {
	// Standard list metadata.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// items is the list of Jobs.
	Items                []*Job   `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobList) Reset()         { *m = JobList{} }
func (m *JobList) String() string { return proto.CompactTextString(m) }
func (*JobList) ProtoMessage()    {}
func (*JobList) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_ccb5391d0f68433d, []int{2}
}
func (m *JobList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobList.Unmarshal(m, b)
}
func (m *JobList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobList.Marshal(b, m, deterministic)
}
func (dst *JobList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobList.Merge(dst, src)
}
func (m *JobList) XXX_Size() int {
	return xxx_messageInfo_JobList.Size(m)
}
func (m *JobList) XXX_DiscardUnknown() {
	xxx_messageInfo_JobList.DiscardUnknown(m)
}

var xxx_messageInfo_JobList proto.InternalMessageInfo

func (m *JobList) GetMetadata() *v1.ListMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *JobList) GetItems() []*Job {
	if m != nil {
		return m.Items
	}
	return nil
}

// JobSpec describes how the job execution will look like.
type JobSpec struct {
	// Specifies the maximum desired number of pods the job should
	// run at any given time. The actual number of pods running in steady state will
	// be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism),
	// i.e. when the work left to do is less than max parallelism.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	// +optional
	Parallelism *int32 `protobuf:"varint,1,opt,name=parallelism" json:"parallelism,omitempty"`
	// Specifies the desired number of successfully finished pods the
	// job should be run with.  Setting to nil means that the success of any
	// pod signals the success of all pods, and allows parallelism to have any positive
	// value.  Setting to 1 means that parallelism is limited to 1 and the success of that
	// pod signals the success of the job.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	// +optional
	Completions *int32 `protobuf:"varint,2,opt,name=completions" json:"completions,omitempty"`
	// Specifies the duration in seconds relative to the startTime that the job may be active
	// before the system tries to terminate it; value must be positive integer
	// +optional
	ActiveDeadlineSeconds *int64 `protobuf:"varint,3,opt,name=activeDeadlineSeconds" json:"activeDeadlineSeconds,omitempty"`
	// Specifies the number of retries before marking this job failed.
	// Defaults to 6
	// +optional
	BackoffLimit *int32 `protobuf:"varint,7,opt,name=backoffLimit" json:"backoffLimit,omitempty"`
	// A label query over pods that should match the pod count.
	// Normally, the system sets this field for you.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	// +optional
	Selector *v1.LabelSelector `protobuf:"bytes,4,opt,name=selector" json:"selector,omitempty"`
	// manualSelector controls generation of pod labels and pod selectors.
	// Leave `manualSelector` unset unless you are certain what you are doing.
	// When false or unset, the system pick labels unique to this job
	// and appends those labels to the pod template.  When true,
	// the user is responsible for picking unique labels and specifying
	// the selector.  Failure to pick a unique label may cause this
	// and other jobs to not function correctly.  However, You may see
	// `manualSelector=true` in jobs that were created with the old `extensions/v1beta1`
	// API.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
	// +optional
	ManualSelector *bool `protobuf:"varint,5,opt,name=manualSelector" json:"manualSelector,omitempty"`
	// Describes the pod that will be created when executing a job.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Template *v11.PodTemplateSpec `protobuf:"bytes,6,opt,name=template" json:"template,omitempty"`
	// ttlSecondsAfterFinished limits the lifetime of a Job that has finished
	// execution (either Complete or Failed). If this field is set,
	// ttlSecondsAfterFinished after the Job finishes, it is eligible to be
	// automatically deleted. When the Job is being deleted, its lifecycle
	// guarantees (e.g. finalizers) will be honored. If this field is unset,
	// the Job won't be automatically deleted. If this field is set to zero,
	// the Job becomes eligible to be deleted immediately after it finishes.
	// This field is alpha-level and is only honored by servers that enable the
	// TTLAfterFinished feature.
	// +optional
	TtlSecondsAfterFinished *int32   `protobuf:"varint,8,opt,name=ttlSecondsAfterFinished" json:"ttlSecondsAfterFinished,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *JobSpec) Reset()         { *m = JobSpec{} }
func (m *JobSpec) String() string { return proto.CompactTextString(m) }
func (*JobSpec) ProtoMessage()    {}
func (*JobSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_ccb5391d0f68433d, []int{3}
}
func (m *JobSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobSpec.Unmarshal(m, b)
}
func (m *JobSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobSpec.Marshal(b, m, deterministic)
}
func (dst *JobSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSpec.Merge(dst, src)
}
func (m *JobSpec) XXX_Size() int {
	return xxx_messageInfo_JobSpec.Size(m)
}
func (m *JobSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSpec.DiscardUnknown(m)
}

var xxx_messageInfo_JobSpec proto.InternalMessageInfo

func (m *JobSpec) GetParallelism() int32 {
	if m != nil && m.Parallelism != nil {
		return *m.Parallelism
	}
	return 0
}

func (m *JobSpec) GetCompletions() int32 {
	if m != nil && m.Completions != nil {
		return *m.Completions
	}
	return 0
}

func (m *JobSpec) GetActiveDeadlineSeconds() int64 {
	if m != nil && m.ActiveDeadlineSeconds != nil {
		return *m.ActiveDeadlineSeconds
	}
	return 0
}

func (m *JobSpec) GetBackoffLimit() int32 {
	if m != nil && m.BackoffLimit != nil {
		return *m.BackoffLimit
	}
	return 0
}

func (m *JobSpec) GetSelector() *v1.LabelSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *JobSpec) GetManualSelector() bool {
	if m != nil && m.ManualSelector != nil {
		return *m.ManualSelector
	}
	return false
}

func (m *JobSpec) GetTemplate() *v11.PodTemplateSpec {
	if m != nil {
		return m.Template
	}
	return nil
}

func (m *JobSpec) GetTtlSecondsAfterFinished() int32 {
	if m != nil && m.TtlSecondsAfterFinished != nil {
		return *m.TtlSecondsAfterFinished
	}
	return 0
}

// JobStatus represents the current state of a Job.
type JobStatus struct {
	// The latest available observations of an object's current state.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	// +optional
	// +patchMergeKey=type
	// +patchStrategy=merge
	Conditions []*JobCondition `protobuf:"bytes,1,rep,name=conditions" json:"conditions,omitempty"`
	// Represents time when the job was acknowledged by the job controller.
	// It is not guaranteed to be set in happens-before order across separate operations.
	// It is represented in RFC3339 form and is in UTC.
	// +optional
	StartTime *v1.Time `protobuf:"bytes,2,opt,name=startTime" json:"startTime,omitempty"`
	// Represents time when the job was completed. It is not guaranteed to
	// be set in happens-before order across separate operations.
	// It is represented in RFC3339 form and is in UTC.
	// +optional
	CompletionTime *v1.Time `protobuf:"bytes,3,opt,name=completionTime" json:"completionTime,omitempty"`
	// The number of actively running pods.
	// +optional
	Active *int32 `protobuf:"varint,4,opt,name=active" json:"active,omitempty"`
	// The number of pods which reached phase Succeeded.
	// +optional
	Succeeded *int32 `protobuf:"varint,5,opt,name=succeeded" json:"succeeded,omitempty"`
	// The number of pods which reached phase Failed.
	// +optional
	Failed               *int32   `protobuf:"varint,6,opt,name=failed" json:"failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobStatus) Reset()         { *m = JobStatus{} }
func (m *JobStatus) String() string { return proto.CompactTextString(m) }
func (*JobStatus) ProtoMessage()    {}
func (*JobStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_ccb5391d0f68433d, []int{4}
}
func (m *JobStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobStatus.Unmarshal(m, b)
}
func (m *JobStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobStatus.Marshal(b, m, deterministic)
}
func (dst *JobStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStatus.Merge(dst, src)
}
func (m *JobStatus) XXX_Size() int {
	return xxx_messageInfo_JobStatus.Size(m)
}
func (m *JobStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStatus.DiscardUnknown(m)
}

var xxx_messageInfo_JobStatus proto.InternalMessageInfo

func (m *JobStatus) GetConditions() []*JobCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *JobStatus) GetStartTime() *v1.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *JobStatus) GetCompletionTime() *v1.Time {
	if m != nil {
		return m.CompletionTime
	}
	return nil
}

func (m *JobStatus) GetActive() int32 {
	if m != nil && m.Active != nil {
		return *m.Active
	}
	return 0
}

func (m *JobStatus) GetSucceeded() int32 {
	if m != nil && m.Succeeded != nil {
		return *m.Succeeded
	}
	return 0
}

func (m *JobStatus) GetFailed() int32 {
	if m != nil && m.Failed != nil {
		return *m.Failed
	}
	return 0
}

func init() {
	proto.RegisterType((*Job)(nil), "k8s.io.api.batch.v1.Job")
	proto.RegisterType((*JobCondition)(nil), "k8s.io.api.batch.v1.JobCondition")
	proto.RegisterType((*JobList)(nil), "k8s.io.api.batch.v1.JobList")
	proto.RegisterType((*JobSpec)(nil), "k8s.io.api.batch.v1.JobSpec")
	proto.RegisterType((*JobStatus)(nil), "k8s.io.api.batch.v1.JobStatus")
}

func init() {
	proto.RegisterFile("github.com/solo-io/supergloo/vendor/k8s.io/api/batch/v1/generated.proto", fileDescriptor_generated_ccb5391d0f68433d)
}

var fileDescriptor_generated_ccb5391d0f68433d = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x5f, 0x6f, 0xd3, 0x3e,
	0x14, 0x55, 0xff, 0x64, 0x6b, 0xdd, 0xfd, 0xf6, 0xe0, 0x9f, 0x80, 0x68, 0x9a, 0xd0, 0x08, 0x12,
	0x9a, 0x90, 0x70, 0xd6, 0x31, 0x4d, 0x7b, 0x43, 0x03, 0x04, 0xa8, 0x1a, 0xda, 0xe4, 0xed, 0x69,
	0x6f, 0x8e, 0x73, 0xdb, 0x9a, 0xc6, 0x71, 0x64, 0xbb, 0x95, 0xf6, 0x01, 0xf8, 0x12, 0xf0, 0x4d,
	0x90, 0xf8, 0x6e, 0xc8, 0x4e, 0x96, 0x76, 0x5d, 0x2b, 0x36, 0xde, 0x7a, 0x8f, 0xcf, 0x39, 0xb9,
	0xd7, 0xc7, 0xb7, 0xe8, 0xf3, 0x48, 0xd8, 0xf1, 0x34, 0x21, 0x5c, 0xc9, 0xd8, 0xa8, 0x4c, 0xbd,
	0x11, 0x2a, 0x36, 0xd3, 0x02, 0xf4, 0x28, 0x53, 0x2a, 0x9e, 0x41, 0x9e, 0x2a, 0x1d, 0x4f, 0x4e,
	0x0c, 0x11, 0x2a, 0x66, 0x85, 0x88, 0x13, 0x66, 0xf9, 0x38, 0x9e, 0xf5, 0xe3, 0x11, 0xe4, 0xa0,
	0x99, 0x85, 0x94, 0x14, 0x5a, 0x59, 0x85, 0xff, 0x2f, 0x49, 0x84, 0x15, 0x82, 0x78, 0x12, 0x99,
	0xf5, 0x77, 0xa2, 0x05, 0x25, 0x57, 0x1a, 0x56, 0x08, 0x77, 0x8e, 0xe6, 0x1c, 0xc9, 0xf8, 0x58,
	0xe4, 0xa0, 0x6f, 0xe2, 0x62, 0x32, 0x72, 0x80, 0x89, 0x25, 0x58, 0xb6, 0x4a, 0x15, 0xaf, 0x53,
	0xe9, 0x69, 0x6e, 0x85, 0x84, 0x7b, 0x82, 0xe3, 0xbf, 0x09, 0x0c, 0x1f, 0x83, 0x64, 0xcb, 0xba,
	0xe8, 0x77, 0x03, 0xb5, 0x06, 0x2a, 0xc1, 0x67, 0xa8, 0xe3, 0x7a, 0x49, 0x99, 0x65, 0x61, 0x63,
	0xaf, 0xb1, 0xdf, 0x3b, 0x3c, 0x20, 0xf3, 0x91, 0x6b, 0x4b, 0x52, 0x4c, 0x46, 0x0e, 0x30, 0xc4,
	0xb1, 0xc9, 0xac, 0x4f, 0xce, 0x93, 0x6f, 0xc0, 0xed, 0x57, 0xb0, 0x8c, 0xd6, 0x0e, 0xf8, 0x00,
	0xb5, 0x4d, 0x01, 0x3c, 0x6c, 0x7a, 0xa7, 0x5d, 0xb2, 0xe2, 0xf2, 0xc8, 0x40, 0x25, 0x97, 0x05,
	0x70, 0xea, 0x99, 0xf8, 0x18, 0x6d, 0x18, 0xcb, 0xec, 0xd4, 0x84, 0x2d, 0xaf, 0x79, 0xbe, 0x56,
	0xe3, 0x59, 0xb4, 0x62, 0x47, 0x3f, 0x9a, 0x68, 0x6b, 0xa0, 0x92, 0x0f, 0x2a, 0x4f, 0x85, 0x15,
	0x2a, 0xc7, 0x18, 0xb5, 0xed, 0x4d, 0x01, 0x7e, 0x88, 0x2e, 0xf5, 0xbf, 0xf1, 0xd3, 0xda, 0xbc,
	0xe9, 0xd1, 0xaa, 0xc2, 0x17, 0xe8, 0xbf, 0x8c, 0x19, 0x7b, 0xa1, 0x55, 0x02, 0x57, 0x42, 0x42,
	0xf5, 0xed, 0xd7, 0x0f, 0x9b, 0xdc, 0x29, 0xe8, 0x5d, 0x03, 0x7c, 0x8d, 0xb0, 0x03, 0xae, 0x34,
	0xcb, 0x8d, 0xef, 0xc7, 0xdb, 0xb6, 0x1f, 0x6d, 0xbb, 0xc2, 0xc5, 0x4d, 0xa1, 0x81, 0x19, 0x95,
	0x87, 0x41, 0x39, 0x45, 0x59, 0xe1, 0x10, 0x6d, 0x4a, 0x30, 0x86, 0x8d, 0x20, 0xdc, 0xf0, 0x07,
	0xb7, 0x65, 0xf4, 0xbd, 0x81, 0x36, 0x07, 0x2a, 0x39, 0x13, 0xc6, 0xe2, 0xc1, 0xbd, 0x80, 0xc9,
	0xc3, 0xfa, 0x71, 0xea, 0xa5, 0x78, 0x09, 0x0a, 0x84, 0x05, 0xe9, 0xae, 0xb3, 0xb5, 0xdf, 0x3b,
	0x0c, 0xd7, 0x65, 0x45, 0x4b, 0x5a, 0xf4, 0xb3, 0xe5, 0xfb, 0x70, 0x71, 0xe3, 0x3d, 0xd4, 0x2b,
	0x98, 0x66, 0x59, 0x06, 0x99, 0x30, 0xd2, 0xb7, 0x12, 0xd0, 0x45, 0xc8, 0x31, 0xb8, 0x92, 0x45,
	0x06, 0x6e, 0xf2, 0x32, 0xb2, 0x80, 0x2e, 0x42, 0xf8, 0x08, 0x3d, 0x61, 0xdc, 0x8a, 0x19, 0x7c,
	0x04, 0x96, 0x66, 0x22, 0x87, 0x4b, 0xe0, 0x2a, 0x4f, 0xcb, 0xb7, 0xd3, 0xa2, 0xab, 0x0f, 0x71,
	0x84, 0xb6, 0x12, 0xc6, 0x27, 0x6a, 0x38, 0x3c, 0x13, 0x52, 0xd8, 0x70, 0xd3, 0x1b, 0xdf, 0xc1,
	0xf0, 0x39, 0xea, 0x18, 0xc8, 0x80, 0x5b, 0xa5, 0xab, 0xd4, 0xde, 0x3e, 0xf0, 0x96, 0x58, 0x02,
	0xd9, 0x65, 0x25, 0xa5, 0xb5, 0x09, 0x7e, 0x85, 0xb6, 0x25, 0xcb, 0xa7, 0xac, 0x3e, 0xf3, 0xe1,
	0x75, 0xe8, 0x12, 0x8a, 0xdf, 0xa1, 0x8e, 0x05, 0x59, 0x64, 0xcc, 0x96, 0x29, 0xf6, 0x0e, 0x5f,
	0x2e, 0xde, 0xaa, 0xfb, 0x77, 0x71, 0x9f, 0xb9, 0x50, 0xe9, 0x55, 0x45, 0xf3, 0xcb, 0x53, 0x8b,
	0xf0, 0x09, 0x7a, 0x66, 0x6d, 0x56, 0xcd, 0x7a, 0x3a, 0xb4, 0xa0, 0x3f, 0x89, 0x5c, 0x98, 0x31,
	0xa4, 0x61, 0xc7, 0x0f, 0xba, 0xee, 0x38, 0xfa, 0xd5, 0x44, 0xdd, 0x7a, 0xb1, 0xf0, 0x29, 0x42,
	0xfc, 0x76, 0x99, 0x4c, 0xd8, 0xf0, 0x01, 0xbf, 0x58, 0x17, 0x70, 0xbd, 0x76, 0x74, 0x41, 0x84,
	0xbf, 0xa0, 0xae, 0xb1, 0x4c, 0x5b, 0xff, 0xf6, 0x9b, 0x8f, 0x7e, 0xfb, 0x73, 0x31, 0xa6, 0x68,
	0x7b, 0x9e, 0xfb, 0x3f, 0x6e, 0xe8, 0x92, 0x83, 0x5b, 0xa3, 0xf2, 0x7d, 0xf8, 0x80, 0x03, 0x5a,
	0x55, 0x78, 0x17, 0x75, 0xcd, 0x94, 0x73, 0x80, 0x14, 0x52, 0x1f, 0x52, 0x40, 0xe7, 0x80, 0x53,
	0x0d, 0x99, 0xc8, 0x20, 0xf5, 0xe9, 0x04, 0xb4, 0xaa, 0xde, 0xb7, 0xaf, 0x9b, 0xb3, 0xfe, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xe1, 0x6f, 0xb1, 0x67, 0x06, 0x00, 0x00,
}
