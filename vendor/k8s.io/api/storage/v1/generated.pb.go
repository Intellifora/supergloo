// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/supergloo/vendor/k8s.io/api/storage/v1/generated.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import v11 "k8s.io/api/core/v1"
import v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
import _ "k8s.io/apimachinery/pkg/runtime"
import _ "k8s.io/apimachinery/pkg/runtime/schema"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// StorageClass describes the parameters for a class of storage for
// which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class
// according to etcd is in ObjectMeta.Name.
type StorageClass struct {
	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Provisioner indicates the type of the provisioner.
	Provisioner *string `protobuf:"bytes,2,opt,name=provisioner" json:"provisioner,omitempty"`
	// Parameters holds the parameters for the provisioner that should
	// create volumes of this storage class.
	// +optional
	Parameters map[string]string `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Dynamically provisioned PersistentVolumes of this storage class are
	// created with this reclaimPolicy. Defaults to Delete.
	// +optional
	ReclaimPolicy *string `protobuf:"bytes,4,opt,name=reclaimPolicy" json:"reclaimPolicy,omitempty"`
	// Dynamically provisioned PersistentVolumes of this storage class are
	// created with these mountOptions, e.g. ["ro", "soft"]. Not validated -
	// mount of the PVs will simply fail if one is invalid.
	// +optional
	MountOptions []string `protobuf:"bytes,5,rep,name=mountOptions" json:"mountOptions,omitempty"`
	// AllowVolumeExpansion shows whether the storage class allow volume expand
	// +optional
	AllowVolumeExpansion *bool `protobuf:"varint,6,opt,name=allowVolumeExpansion" json:"allowVolumeExpansion,omitempty"`
	// VolumeBindingMode indicates how PersistentVolumeClaims should be
	// provisioned and bound.  When unset, VolumeBindingImmediate is used.
	// This field is only honored by servers that enable the VolumeScheduling feature.
	// +optional
	VolumeBindingMode *string `protobuf:"bytes,7,opt,name=volumeBindingMode" json:"volumeBindingMode,omitempty"`
	// Restrict the node topologies where volumes can be dynamically provisioned.
	// Each volume plugin defines its own supported topology specifications.
	// An empty TopologySelectorTerm list means there is no topology restriction.
	// This field is only honored by servers that enable the VolumeScheduling feature.
	// +optional
	AllowedTopologies    []*v11.TopologySelectorTerm `protobuf:"bytes,8,rep,name=allowedTopologies" json:"allowedTopologies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *StorageClass) Reset()         { *m = StorageClass{} }
func (m *StorageClass) String() string { return proto.CompactTextString(m) }
func (*StorageClass) ProtoMessage()    {}
func (*StorageClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_6b58164b52304a91, []int{0}
}
func (m *StorageClass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageClass.Unmarshal(m, b)
}
func (m *StorageClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageClass.Marshal(b, m, deterministic)
}
func (dst *StorageClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageClass.Merge(dst, src)
}
func (m *StorageClass) XXX_Size() int {
	return xxx_messageInfo_StorageClass.Size(m)
}
func (m *StorageClass) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageClass.DiscardUnknown(m)
}

var xxx_messageInfo_StorageClass proto.InternalMessageInfo

func (m *StorageClass) GetMetadata() *v1.ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *StorageClass) GetProvisioner() string {
	if m != nil && m.Provisioner != nil {
		return *m.Provisioner
	}
	return ""
}

func (m *StorageClass) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *StorageClass) GetReclaimPolicy() string {
	if m != nil && m.ReclaimPolicy != nil {
		return *m.ReclaimPolicy
	}
	return ""
}

func (m *StorageClass) GetMountOptions() []string {
	if m != nil {
		return m.MountOptions
	}
	return nil
}

func (m *StorageClass) GetAllowVolumeExpansion() bool {
	if m != nil && m.AllowVolumeExpansion != nil {
		return *m.AllowVolumeExpansion
	}
	return false
}

func (m *StorageClass) GetVolumeBindingMode() string {
	if m != nil && m.VolumeBindingMode != nil {
		return *m.VolumeBindingMode
	}
	return ""
}

func (m *StorageClass) GetAllowedTopologies() []*v11.TopologySelectorTerm {
	if m != nil {
		return m.AllowedTopologies
	}
	return nil
}

// StorageClassList is a collection of storage classes.
type StorageClassList struct {
	// Standard list metadata
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Items is the list of StorageClasses
	Items                []*StorageClass `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StorageClassList) Reset()         { *m = StorageClassList{} }
func (m *StorageClassList) String() string { return proto.CompactTextString(m) }
func (*StorageClassList) ProtoMessage()    {}
func (*StorageClassList) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_6b58164b52304a91, []int{1}
}
func (m *StorageClassList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageClassList.Unmarshal(m, b)
}
func (m *StorageClassList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageClassList.Marshal(b, m, deterministic)
}
func (dst *StorageClassList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageClassList.Merge(dst, src)
}
func (m *StorageClassList) XXX_Size() int {
	return xxx_messageInfo_StorageClassList.Size(m)
}
func (m *StorageClassList) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageClassList.DiscardUnknown(m)
}

var xxx_messageInfo_StorageClassList proto.InternalMessageInfo

func (m *StorageClassList) GetMetadata() *v1.ListMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *StorageClassList) GetItems() []*StorageClass {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*StorageClass)(nil), "k8s.io.api.storage.v1.StorageClass")
	proto.RegisterMapType((map[string]string)(nil), "k8s.io.api.storage.v1.StorageClass.ParametersEntry")
	proto.RegisterType((*StorageClassList)(nil), "k8s.io.api.storage.v1.StorageClassList")
}

func init() {
	proto.RegisterFile("github.com/solo-io/supergloo/vendor/k8s.io/api/storage/v1/generated.proto", fileDescriptor_generated_6b58164b52304a91)
}

var fileDescriptor_generated_6b58164b52304a91 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x95, 0x76, 0x85, 0xd6, 0x1d, 0x62, 0xb3, 0x86, 0x14, 0xf5, 0x14, 0x15, 0x0e, 0x39,
	0x80, 0x43, 0x0b, 0x42, 0x03, 0x89, 0xcb, 0xd0, 0x0e, 0xa0, 0x4d, 0x9b, 0xd2, 0x69, 0x07, 0x6e,
	0x5e, 0xf2, 0x94, 0x9a, 0xda, 0x7e, 0x96, 0xed, 0x04, 0xfa, 0x8f, 0x20, 0xf1, 0xdf, 0xa2, 0xa4,
	0x55, 0x97, 0xb5, 0x45, 0xec, 0xd6, 0x7e, 0x7e, 0xbf, 0x2f, 0xef, 0x7d, 0xef, 0x91, 0xaf, 0x85,
	0xf0, 0xf3, 0xf2, 0x8e, 0x65, 0xa8, 0x12, 0x87, 0x12, 0xdf, 0x08, 0x4c, 0x5c, 0x69, 0xc0, 0x16,
	0x12, 0x31, 0xa9, 0x40, 0xe7, 0x68, 0x93, 0xc5, 0xa9, 0x63, 0x02, 0x13, 0x6e, 0x44, 0xe2, 0x3c,
	0x5a, 0x5e, 0x40, 0x52, 0x4d, 0x92, 0x02, 0x34, 0x58, 0xee, 0x21, 0x67, 0xc6, 0xa2, 0x47, 0xfa,
	0x62, 0x55, 0xc6, 0xb8, 0x11, 0x6c, 0x5d, 0xc6, 0xaa, 0xc9, 0x68, 0xdc, 0xa2, 0x33, 0xb4, 0xfb,
	0xd0, 0xd1, 0xfb, 0xfb, 0x1a, 0xc5, 0xb3, 0xb9, 0xd0, 0x60, 0x97, 0x89, 0x59, 0x14, 0xb5, 0xe0,
	0x12, 0x05, 0x9e, 0xef, 0xa3, 0x92, 0x7f, 0x51, 0xb6, 0xd4, 0x5e, 0x28, 0xd8, 0x01, 0x3e, 0xfc,
	0x0f, 0x70, 0xd9, 0x1c, 0x14, 0xdf, 0xe6, 0xc6, 0xbf, 0x0f, 0xc8, 0xe1, 0x6c, 0x35, 0xd1, 0x17,
	0xc9, 0x9d, 0xa3, 0x17, 0xa4, 0x5f, 0x37, 0x95, 0x73, 0xcf, 0xc3, 0x20, 0x0a, 0xe2, 0xe1, 0xf4,
	0x2d, 0xbb, 0x9f, 0x7e, 0xe3, 0xcd, 0xcc, 0xa2, 0xa8, 0x05, 0xc7, 0xea, 0x6a, 0x56, 0x4d, 0xd8,
	0xd5, 0xdd, 0x0f, 0xc8, 0xfc, 0x25, 0x78, 0x9e, 0x6e, 0x1c, 0x68, 0x44, 0x86, 0xc6, 0x62, 0x25,
	0x9c, 0x40, 0x0d, 0x36, 0xec, 0x44, 0x41, 0x3c, 0x48, 0xdb, 0x12, 0x9d, 0x11, 0x62, 0xb8, 0xe5,
	0x0a, 0x3c, 0x58, 0x17, 0x76, 0xa3, 0x6e, 0x3c, 0x9c, 0xbe, 0x63, 0x7b, 0xf3, 0x66, 0xed, 0x46,
	0xd9, 0xf5, 0x86, 0x3a, 0xd7, 0xde, 0x2e, 0xd3, 0x96, 0x0d, 0x7d, 0x45, 0x9e, 0x59, 0xc8, 0x24,
	0x17, 0xea, 0x1a, 0xa5, 0xc8, 0x96, 0xe1, 0x41, 0xf3, 0xe1, 0x87, 0x22, 0x1d, 0x93, 0x43, 0x85,
	0xa5, 0xf6, 0x57, 0xc6, 0x0b, 0xd4, 0x2e, 0xec, 0x45, 0xdd, 0x78, 0x90, 0x3e, 0xd0, 0xe8, 0x94,
	0x9c, 0x70, 0x29, 0xf1, 0xe7, 0x2d, 0xca, 0x52, 0xc1, 0xf9, 0x2f, 0xc3, 0x75, 0xdd, 0x78, 0xf8,
	0x24, 0x0a, 0xe2, 0x7e, 0xba, 0xf7, 0x8d, 0xbe, 0x26, 0xc7, 0x55, 0x23, 0x9d, 0x09, 0x9d, 0x0b,
	0x5d, 0x5c, 0x62, 0x0e, 0xe1, 0xd3, 0xa6, 0x83, 0xdd, 0x07, 0x7a, 0x4b, 0x8e, 0x1b, 0x17, 0xc8,
	0x6f, 0xd0, 0xa0, 0xc4, 0x42, 0x80, 0x0b, 0xfb, 0x4d, 0x0e, 0x71, 0x3b, 0x87, 0xfa, 0xc0, 0xea,
	0x10, 0xd6, 0x55, 0xcb, 0x19, 0x48, 0xc8, 0x3c, 0xda, 0x1b, 0xb0, 0x2a, 0xdd, 0xb5, 0x18, 0x7d,
	0x26, 0xcf, 0xb7, 0x22, 0xa2, 0x47, 0xa4, 0xbb, 0x80, 0x65, 0xb3, 0xd6, 0x41, 0x5a, 0xff, 0xa4,
	0x27, 0xa4, 0x57, 0x71, 0x59, 0xc2, 0x7a, 0x33, 0xab, 0x3f, 0x9f, 0x3a, 0xa7, 0xc1, 0xf8, 0x4f,
	0x40, 0x8e, 0xda, 0x79, 0x5f, 0x08, 0xe7, 0xe9, 0xb7, 0x9d, 0xe3, 0x60, 0x8f, 0x3b, 0x8e, 0x9a,
	0xde, 0x3a, 0x8d, 0x8f, 0xa4, 0x27, 0x3c, 0x28, 0x17, 0x76, 0x9a, 0x59, 0x5f, 0x3e, 0x62, 0xe7,
	0xe9, 0x8a, 0x38, 0x3b, 0xf8, 0xde, 0xa9, 0x26, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xee,
	0x8e, 0x00, 0xe0, 0x03, 0x00, 0x00,
}
