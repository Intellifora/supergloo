syntax = "proto3";
package supergloo.solo.io;
option go_package = "github.com/solo-io/supergloo/pkg/api/v1";

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
option (gogoproto.equal_all) = true;

import "gloo/v1/proxy.proto";

// global routing config for a single mesh
message Routing {
    // users define routes here
    // routes can be assigned to services in the mesh, on the ingress, or both.
    // routes define http request matchers and the destinations (services inside or outside the mesh)
    // to which client requests are sent.
    // Routing features can be added for specific routes without needing to modify the client or service.
    // Features such as
    // - retries
    // - fault injection
    // - request mirroring (shadowing)
    // - cors
    // and more are configrable here.
    repeated Route routes = 1;
}

// Rules for traffic to a particular destination. Applied to any traffic regardless of source,
// as long as the destination matches
message Route {
    // set to true if this route should be used for ingress traffic coming from outside the mesh
    bool enabled_for_ingress  = 20;

    // set to true if this route should apply to sidecars in the mesh
    bool enabled_for_mesh = 21;

    // set these labels to apply this route to specific sidecars, selected by their labels
    // see https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // note: if both options are diabled, this route will be inactive
    // TODO ilackarms: not implemented
    map<string, string> enabled_for_labels = 23;

    // Domains to match on. E.g. `www.solo.io`
    // if empty this route will match requests for any domain.
    // wildcard domains such as `*.solo.io` are supported, as well as the special `*` domain
    // to match all domains
    repeated string domains = 22;

    // the set of attributes to match on http requests
    repeated gloo.solo.io.Matcher request_matchers = 1;

    // the action to take when a request is matched
    // for now this is limited to routing requests to upstream
    // services
    gloo.solo.io.RouteAction action = 2;

    // Timeout for HTTP requests.
    google.protobuf.Duration timeout = 6;

    // Retry policy for HTTP requests.
    HTTPRetry retries = 7;

    // Fault injection policy to apply on HTTP traffic at the client side.
    // Note that timeouts or retries will not be enabled when faults are
    // enabled on the client side.
    HTTPFaultInjection fault = 8;

    // Mirror HTTP traffic to a another destination in addition to forwarding
    // the requests to the intended destination. Mirrored traffic is on a
    // best effort basis where the sidecar/gateway will not wait for the
    // mirrored cluster to respond before returning the response from the
    // original destination.  Statistics will be generated for the mirrored
    // destination.
    gloo.solo.io.Destination mirror = 9;

    // Cross-Origin Resource Sharing policy (CORS). Refer to
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
    // for further details about cross origin resource sharing.
    CorsPolicy cors_policy = 10;

    // HTTP headers to remove before returning a response to the caller.
    repeated string remove_response_headers = 12;

    // Additional HTTP headers to add before returning a response to the
    // caller.
    map<string, string> append_response_headers = 13;

    // HTTP headers to remove before forwarding a request to the
    // destination service.
    repeated string remove_request_headers = 14;

    // Additional HTTP headers to add before forwarding a request to the
    // destination service.
    map<string, string> append_request_headers = 15;
}

// Describes the retry policy to use when a HTTP request fails. For
// example, the following rule sets the maximum number of retries to 3 when
// calling ratings:v1 service, with a 2s timeout per retry attempt.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: ratings-route
// spec:
//   hosts:
//   - ratings.prod.svc.cluster.local
//   http:
//   - route:
//     - destination:
//         host: ratings.prod.svc.cluster.local
//         subset: v1
//     retries:
//       attempts: 3
//       perTryTimeout: 2s
// ```
//
message HTTPRetry {
    // REQUIRED. Number of retries for a given request. The interval
    // between retries will be determined automatically (25ms+). Actual
    // number of retries attempted depends on the httpReqTimeout.
    int32 attempts = 1;

    // Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.
    google.protobuf.Duration per_try_timeout = 2;
}

// Describes the Cross-Origin Resource Sharing (CORS) policy, for a given
// service. Refer to
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
// for further details about cross origin resource sharing. For example,
// the following rule restricts cross origin requests to those originating
// from example.com domain using HTTP POST/GET, and sets the
// Access-Control-Allow-Credentials header to false. In addition, it only
// exposes X-Foo-bar header and sets an expiry period of 1 day.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: ratings-route
// spec:
//   hosts:
//   - ratings.prod.svc.cluster.local
//   http:
//   - route:
//     - destination:
//         host: ratings.prod.svc.cluster.local
//         subset: v1
//     corsPolicy:
//       allowOrigin:
//       - example.com
//       allowMethods:
//       - POST
//       - GET
//       allowCredentials: false
//       allowHeaders:
//       - X-Foo-Bar
//       maxAge: "1d"
// ```
//
message CorsPolicy {
    // The list of origins that are allowed to perform CORS requests. The
    // content will be serialized into the Access-Control-Allow-Origin
    // header. Wildcard * will allow all origins.
    repeated string allow_origin = 1;

    // List of HTTP methods allowed to access the resource. The content will
    // be serialized into the Access-Control-Allow-Methods header.
    repeated string allow_methods = 2;

    // List of HTTP headers that can be used when requesting the
    // resource. Serialized to Access-Control-Allow-Headers header.
    repeated string allow_headers = 3;

    // A white list of HTTP headers that the browsers are allowed to
    // access. Serialized into Access-Control-Expose-Headers header.
    repeated string expose_headers = 4;

    // Specifies how long the the results of a preflight request can be
    // cached. Translates to the Access-Control-Max-Age header.
    google.protobuf.Duration max_age = 5;

    // Indicates whether the caller is allowed to send the actual request
    // (not the preflight) using credentials. Translates to
    // Access-Control-Allow-Credentials header.
    google.protobuf.BoolValue allow_credentials = 6;
}

// HTTPFaultInjection can be used to specify one or more faults to inject
// while forwarding http requests to the destination specified in a route.
// Fault specification is part of a VirtualService rule. Faults include
// aborting the Http request from downstream service, and/or delaying
// proxying of requests. A fault rule MUST HAVE delay or abort or both.
//
// *Note:* Delay and abort faults are independent of one another, even if
// both are specified simultaneously.
message HTTPFaultInjection {
    // Delay requests before forwarding, emulating various failures such as
    // network issues, overloaded upstream service, etc.
    Delay delay = 1;

    // Abort Http request attempts and return error codes back to downstream
    // service, giving the impression that the upstream service is faulty.
    Abort abort = 2;

    // Delay specification is used to inject latency into the request
    // forwarding path. The following example will introduce a 5 second delay
    // in 1 out of every 1000 requests to the "v1" version of the "reviews"
    // service from all pods with label env: prod
    //
    // ```yaml
    // apiVersion: networking.istio.io/v1alpha3
    // kind: VirtualService
    // metadata:
    //   name: reviews-route
    // spec:
    //   hosts:
    //   - reviews.prod.svc.cluster.local
    //   http:
    //   - match:
    //     - sourceLabels:
    //         env: prod
    //     route:
    //     - destination:
    //         host: reviews.prod.svc.cluster.local
    //         subset: v1
    //     fault:
    //       delay:
    //         percentage:
    //           value: 0.001
    //         fixedDelay: 5s
    // ```
    //
    // The _fixedDelay_ field is used to indicate the amount of delay in seconds.
    // The optional _percentage_ field can be used to only delay a certain
    // percentage of requests. If left unspecified, all request will be delayed.
    message Delay {
        // Percentage of requests on which the delay will be injected (0-100).
        // Use of integer `percent` value is deprecated. Use the double `percentage`
        // field instead.
        int32 percent = 1 [deprecated=true];

        oneof http_delay_type {
            // REQUIRED. Add a fixed delay before forwarding the request. Format:
            // 1h/1m/1s/1ms. MUST be >=1ms.
            google.protobuf.Duration fixed_delay = 2;

            // $hide_from_docs
            google.protobuf.Duration exponential_delay = 3 ;
        }

        // Percentage of requests on which the delay will be injected.
        Percent percentage = 5;
    }

    // Abort specification is used to prematurely abort a request with a
    // pre-specified error code. The following example will return an HTTP 400
    // error code for 1 out of every 1000 requests to the "ratings" service "v1".
    //
    // ```yaml
    // apiVersion: networking.istio.io/v1alpha3
    // kind: VirtualService
    // metadata:
    //   name: ratings-route
    // spec:
    //   hosts:
    //   - ratings.prod.svc.cluster.local
    //   http:
    //   - route:
    //     - destination:
    //         host: ratings.prod.svc.cluster.local
    //         subset: v1
    //     fault:
    //       abort:
    //         percentage:
    //           value: 0.001
    //         httpStatus: 400
    // ```
    //
    // The _httpStatus_ field is used to indicate the HTTP status code to
    // return to the caller. The optional _percentage_ field can be used to only
    // abort a certain percentage of requests. If not specified, all requests are
    // aborted.
    message Abort {
        // Percentage of requests to be aborted with the error code provided (0-100).
        // Use of integer `percent` value is deprecated. Use the double `percentage`
        // field instead.
        int32 percent = 1 [deprecated=true];

        oneof error_type {
            // REQUIRED. HTTP status code to use to abort the Http request.
            int32 http_status = 2;

            // $hide_from_docs
            string grpc_status = 3;

            // $hide_from_docs
            string http2_error = 4;
        }

        // Percentage of requests to be aborted with the error code provided.
        Percent percentage = 5;
    }
}

// Percent specifies a percentage in the range of [0.0, 100.0].
message Percent {
    double value = 1;
}
