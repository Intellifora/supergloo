package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"os/exec"
	"strings"
	"text/template"
)

func main() {

	tag, err := getGitTag()
	if err != nil {
		log.Fatal(err)
	}

	relativeFilename := "pkg/version/generated.go"
	if err := generateVersionFile(tag, relativeFilename); err != nil {
		log.Fatal(err)
	}

	fmt.Printf(tag)

}

func getGitTag() (string, error) {
	cmd := exec.Command("git", "describe", "--tags")
	var out bytes.Buffer
	var oerr bytes.Buffer
	cmd.Stdout = &out
	cmd.Stderr = &oerr
	err := cmd.Run()
	if err != nil {
		return "", err
	}
	if oerr.String() != "" {
		return "", fmt.Errorf(oerr.String())
	}
	rawOutput := out.String()
	cleanOutput := strings.TrimSuffix(rawOutput, "\n")
	if strings.Contains(cleanOutput, "\"") {
		return "", fmt.Errorf("Version must not include a quotation: %v", cleanOutput)
	}
	return cleanOutput, nil
}

func generateVersionFile(version string, relativeFilename string) error {
	data := fileData{
		Version: version,
	}

	tmpl, err := template.New("fileTemplate").Parse(fileTemplate)
	if err != nil {
		return err
	}
	var templateOut bytes.Buffer
	if err := tmpl.Execute(&templateOut, data); err != nil {
		return err
	}

	outFile, err := os.Create(relativeFilename)
	if err != nil {
		return err
	}
	if _, err := outFile.WriteString(templateOut.String()); err != nil {
		return err
	}
	return nil
}

type fileData struct {
	Version string
}

const fileTemplate = `package version

// Code generated by go run hack/version/main.go. DO NOT EDIT.

const Version = "{{.Version}}"
`
